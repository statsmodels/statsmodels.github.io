{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Dynamic factors and coincident indices\n",
    "\n",
    "Factor models generally try to find a small number of unobserved \"factors\" that influence a substantial portion of the variation in a larger number of observed variables, and they are related to dimension-reduction techniques such as principal components analysis. Dynamic factor models explicitly model the transition dynamics of the unobserved factors, and so are often applied to time-series data.\n",
    "\n",
    "Macroeconomic coincident indices are designed to capture the common component of the \"business cycle\"; such a component is assumed to simultaneously affect many macroeconomic variables. Although the estimation and use of coincident indices (for example the [Index of Coincident Economic Indicators](http://www.newyorkfed.org/research/regional_economy/coincident_summary.html)) pre-dates dynamic factor models, in several influential papers Stock and Watson (1989, 1991) used a dynamic factor model to provide a theoretical foundation for them.\n",
    "\n",
    "Below, we follow the treatment found in Kim and Nelson (1999), of the Stock and Watson (1991) model, to formulate a dynamic factor model, estimate its parameters via maximum likelihood, and create a coincident index."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Macroeconomic data\n",
    "\n",
    "The coincident index is created by considering the comovements in four macroeconomic variables (versions of these variables are available on [FRED](https://research.stlouisfed.org/fred2/); the ID of the series used below is given in parentheses):\n",
    "\n",
    "- Industrial production (IPMAN)\n",
    "- Real aggregate income (excluding transfer payments) (W875RX1)\n",
    "- Manufacturing and trade sales (CMRMTSPL)\n",
    "- Employees on non-farm payrolls (PAYEMS)\n",
    "\n",
    "In all cases, the data is at the monthly frequency and has been seasonally adjusted; the time-frame considered is 1972 - 2005."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "np.set_printoptions(precision=4, suppress=True, linewidth=120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/pandas_datareader/compat/__init__.py:7: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
      "  from pandas.util.testing import assert_frame_equal\n"
     ]
    }
   ],
   "source": [
    "from pandas_datareader.data import DataReader\n",
    "\n",
    "# Get the datasets from FRED\n",
    "start = '1979-01-01'\n",
    "end = '2014-12-01'\n",
    "indprod = DataReader('IPMAN', 'fred', start=start, end=end)\n",
    "income = DataReader('W875RX1', 'fred', start=start, end=end)\n",
    "sales = DataReader('CMRMTSPL', 'fred', start=start, end=end)\n",
    "emp = DataReader('PAYEMS', 'fred', start=start, end=end)\n",
    "# dta = pd.concat((indprod, income, sales, emp), axis=1)\n",
    "# dta.columns = ['indprod', 'income', 'sales', 'emp']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note**: in a recent update on FRED (8/12/15) the time series CMRMTSPL was truncated to begin in 1997; this is probably a mistake due to the fact that CMRMTSPL is a spliced series, so the earlier period is from the series HMRMT and the latter period is defined by CMRMT.\n",
    "\n",
    "This has since (02/11/16) been corrected, however the series could also be constructed by hand from HMRMT and CMRMT, as shown below (process taken from the notes in the Alfred xls file)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# HMRMT = DataReader('HMRMT', 'fred', start='1967-01-01', end=end)\n",
    "# CMRMT = DataReader('CMRMT', 'fred', start='1997-01-01', end=end)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# HMRMT_growth = HMRMT.diff() / HMRMT.shift()\n",
    "# sales = pd.Series(np.zeros(emp.shape[0]), index=emp.index)\n",
    "\n",
    "# # Fill in the recent entries (1997 onwards)\n",
    "# sales[CMRMT.index] = CMRMT\n",
    "\n",
    "# # Backfill the previous entries (pre 1997)\n",
    "# idx = sales.loc[:'1997-01-01'].index\n",
    "# for t in range(len(idx)-1, 0, -1):\n",
    "#     month = idx[t]\n",
    "#     prev_month = idx[t-1]\n",
    "#     sales.loc[prev_month] = sales.loc[month] / (1 + HMRMT_growth.loc[prev_month].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "dta = pd.concat((indprod, income, sales, emp), axis=1)\n",
    "dta.columns = ['indprod', 'income', 'sales', 'emp']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dta.loc[:, 'indprod':'emp'].plot(subplots=True, layout=(2, 2), figsize=(15, 6));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Stock and Watson (1991) report that for their datasets, they could not reject the null hypothesis of a unit root in each series (so the series are integrated), but they did not find strong evidence that the series were co-integrated.\n",
    "\n",
    "As a result, they suggest estimating the model using the first differences (of the logs) of the variables, demeaned and standardized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create log-differenced series\n",
    "dta['dln_indprod'] = (np.log(dta.indprod)).diff() * 100\n",
    "dta['dln_income'] = (np.log(dta.income)).diff() * 100\n",
    "dta['dln_sales'] = (np.log(dta.sales)).diff() * 100\n",
    "dta['dln_emp'] = (np.log(dta.emp)).diff() * 100\n",
    "\n",
    "# De-mean and standardize\n",
    "dta['std_indprod'] = (dta['dln_indprod'] - dta['dln_indprod'].mean()) / dta['dln_indprod'].std()\n",
    "dta['std_income'] = (dta['dln_income'] - dta['dln_income'].mean()) / dta['dln_income'].std()\n",
    "dta['std_sales'] = (dta['dln_sales'] - dta['dln_sales'].mean()) / dta['dln_sales'].std()\n",
    "dta['std_emp'] = (dta['dln_emp'] - dta['dln_emp'].mean()) / dta['dln_emp'].std()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dynamic factors\n",
    "\n",
    "A general dynamic factor model is written as:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "y_t & = \\Lambda f_t + B x_t + u_t \\\\\n",
    "f_t & = A_1 f_{t-1} + \\dots + A_p f_{t-p} + \\eta_t \\qquad \\eta_t \\sim N(0, I)\\\\\n",
    "u_t & = C_1 u_{t-1} + \\dots + C_q u_{t-q} + \\varepsilon_t \\qquad \\varepsilon_t \\sim N(0, \\Sigma)\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where $y_t$ are observed data, $f_t$ are the unobserved factors (evolving as a vector autoregression), $x_t$ are (optional) exogenous variables, and $u_t$ is the error, or \"idiosyncratic\", process ($u_t$ is also optionally allowed to be autocorrelated). The $\\Lambda$ matrix is often referred to as the matrix of \"factor loadings\". The variance of the factor error term is set to the identity matrix to ensure identification of the unobserved factors.\n",
    "\n",
    "This model can be cast into state space form, and the unobserved factor estimated via the Kalman filter. The likelihood can be evaluated as a byproduct of the filtering recursions, and maximum likelihood estimation used to estimate the parameters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model specification\n",
    "\n",
    "The specific dynamic factor model in this application has 1 unobserved factor which is assumed to follow an AR(2) process. The innovations $\\varepsilon_t$ are assumed to be independent (so that $\\Sigma$ is a diagonal matrix) and the error term associated with each equation, $u_{i,t}$ is assumed to follow an independent AR(2) process.\n",
    "\n",
    "Thus the specification considered here is:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "y_{i,t} & = \\lambda_i f_t + u_{i,t} \\\\\n",
    "u_{i,t} & = c_{i,1} u_{1,t-1} + c_{i,2} u_{i,t-2} + \\varepsilon_{i,t} \\qquad & \\varepsilon_{i,t} \\sim N(0, \\sigma_i^2) \\\\\n",
    "f_t & = a_1 f_{t-1} + a_2 f_{t-2} + \\eta_t \\qquad & \\eta_t \\sim N(0, I)\\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where $i$ is one of: `[indprod, income, sales, emp ]`.\n",
    "\n",
    "This model can be formulated using the `DynamicFactor` model built-in to statsmodels. In particular, we have the following specification:\n",
    "\n",
    "- `k_factors = 1` - (there is 1 unobserved factor)\n",
    "- `factor_order = 2` - (it follows an AR(2) process)\n",
    "- `error_var = False` - (the errors evolve as independent AR processes rather than jointly as a VAR - note that this is the default option, so it is not specified below)\n",
    "- `error_order = 2` - (the errors are autocorrelated of order 2: i.e. AR(2) processes)\n",
    "- `error_cov_type = 'diagonal'` - (the innovations are uncorrelated; this is again the default)\n",
    "\n",
    "Once the model is created, the parameters can be estimated via maximum likelihood; this is done using the `fit()` method.\n",
    "\n",
    "**Note**: recall that we have demeaned and standardized the data; this will be important in interpreting the results that follow.\n",
    "\n",
    "**Aside**: in their empirical example, Kim and Nelson (1999) actually consider a slightly different model in which the employment variable is allowed to also depend on lagged values of the factor - this model does not fit into the built-in `DynamicFactor` class, but can be accommodated by using a subclass to implement the required new parameters and restrictions - see Appendix A, below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parameter estimation\n",
    "\n",
    "Multivariate models can have a relatively large number of parameters, and it may be difficult to escape from local minima to find the maximized likelihood. In an attempt to mitigate this problem, I perform an initial maximization step (from the model-defined starting parameters) using the modified Powell method available in Scipy (see the minimize documentation for more information). The resulting parameters are then used as starting parameters in the standard LBFGS optimization method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/build/statsmodels/statsmodels/statsmodels/tsa/base/tsa_model.py:162: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.\n",
      "  % freq, ValueWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/build/statsmodels/statsmodels/statsmodels/base/model.py:568: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  \"Check mle_retvals\", ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "# Get the endogenous data\n",
    "endog = dta.loc['1979-02-01':, 'std_indprod':'std_emp']\n",
    "\n",
    "# Create the model\n",
    "mod = sm.tsa.DynamicFactor(endog, k_factors=1, factor_order=2, error_order=2)\n",
    "initial_res = mod.fit(method='powell', disp=False)\n",
    "res = mod.fit(initial_res.params, disp=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimates\n",
    "\n",
    "Once the model has been estimated, there are two components that we can use for analysis or inference:\n",
    "\n",
    "- The estimated parameters\n",
    "- The estimated factor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parameters\n",
    "\n",
    "The estimated parameters can be helpful in understanding the implications of the model, although in models with a larger number of observed variables and / or unobserved factors they can be difficult to interpret.\n",
    "\n",
    "One reason for this difficulty is due to identification issues between the factor loadings and the unobserved factors. One easy-to-see identification issue is the sign of the loadings and the factors: an equivalent model to the one displayed below would result from reversing the signs of all factor loadings and the unobserved factor.\n",
    "\n",
    "Here, one of the easy-to-interpret implications in this model is the persistence of the unobserved factor: we find that exhibits substantial persistence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                             Statespace Model Results                                            \n",
      "=================================================================================================================\n",
      "Dep. Variable:     ['std_indprod', 'std_income', 'std_sales', 'std_emp']   No. Observations:                  431\n",
      "Model:                                 DynamicFactor(factors=1, order=2)   Log Likelihood               -2065.018\n",
      "                                                          + AR(2) errors   AIC                           4166.036\n",
      "Date:                                                   Fri, 21 Feb 2020   BIC                           4239.226\n",
      "Time:                                                           13:55:46   HQIC                          4194.933\n",
      "Sample:                                                       02-01-1979                                         \n",
      "                                                            - 12-01-2014                                         \n",
      "Covariance Type:                                                     opg                                         \n",
      "====================================================================================================\n",
      "                                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "loading.f1.std_indprod              -0.8560      0.016    -52.137      0.000      -0.888      -0.824\n",
      "loading.f1.std_income               -0.2516      0.034     -7.427      0.000      -0.318      -0.185\n",
      "loading.f1.std_sales                -0.4757      0.024    -19.973      0.000      -0.522      -0.429\n",
      "loading.f1.std_emp                  -0.2723      0.027    -10.043      0.000      -0.325      -0.219\n",
      "sigma2.std_indprod                8.467e-15   1.38e-09   6.15e-06      1.000    -2.7e-09     2.7e-09\n",
      "sigma2.std_income                    0.9030      0.020     46.071      0.000       0.865       0.941\n",
      "sigma2.std_sales                     0.6023      0.035     17.298      0.000       0.534       0.671\n",
      "sigma2.std_emp                       0.3706      0.015     25.457      0.000       0.342       0.399\n",
      "L1.f1.f1                             0.2211      0.017     12.895      0.000       0.188       0.255\n",
      "L2.f1.f1                             0.2765      0.021     13.122      0.000       0.235       0.318\n",
      "L1.e(std_indprod).e(std_indprod)    -1.8926      0.002  -1150.429      0.000      -1.896      -1.889\n",
      "L2.e(std_indprod).e(std_indprod)    -1.0000   9.89e-06  -1.01e+05      0.000      -1.000      -1.000\n",
      "L1.e(std_income).e(std_income)      -0.1542      0.019     -8.279      0.000      -0.191      -0.118\n",
      "L2.e(std_income).e(std_income)      -0.0874      0.020     -4.266      0.000      -0.128      -0.047\n",
      "L1.e(std_sales).e(std_sales)        -0.4418      0.031    -14.373      0.000      -0.502      -0.382\n",
      "L2.e(std_sales).e(std_sales)        -0.2077      0.021     -9.976      0.000      -0.248      -0.167\n",
      "L1.e(std_emp).e(std_emp)             0.3047      0.034      8.980      0.000       0.238       0.371\n",
      "L2.e(std_emp).e(std_emp)             0.4798      0.029     16.615      0.000       0.423       0.536\n",
      "========================================================================================================\n",
      "Ljung-Box (Q):          87.79, 34.95, 68.98, 70.65   Jarque-Bera (JB):   193.98, 9286.58, 20.13, 4165.73\n",
      "Prob(Q):                    0.00, 0.70, 0.00, 0.00   Prob(JB):                    0.00, 0.00, 0.00, 0.00\n",
      "Heteroskedasticity (H):     0.80, 4.82, 0.47, 0.41   Skew:                       0.07, -0.98, 0.19, 0.86\n",
      "Prob(H) (two-sided):        0.19, 0.00, 0.00, 0.00   Kurtosis:                  6.28, 25.65, 3.99, 18.13\n",
      "========================================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
      "[2] Covariance matrix is singular or near-singular, with condition number 7.04e+16. Standard errors may be unstable.\n"
     ]
    }
   ],
   "source": [
    "print(res.summary(separate_params=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Estimated factors\n",
    "\n",
    "While it can be useful to plot the unobserved factors, it is less useful here than one might think for two reasons:\n",
    "\n",
    "1. The sign-related identification issue described above.\n",
    "2. Since the data was differenced, the estimated factor explains the variation in the differenced data, not the original data.\n",
    "\n",
    "It is for these reasons that the coincident index is created (see below).\n",
    "\n",
    "With these reservations, the unobserved factor is plotted below, along with the NBER indicators for US recessions. It appears that the factor is successful at picking up some degree of business cycle activity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(13,3))\n",
    "\n",
    "# Plot the factor\n",
    "dates = endog.index._mpl_repr()\n",
    "ax.plot(dates, res.factors.filtered[0], label='Factor')\n",
    "ax.legend()\n",
    "\n",
    "# Retrieve and also plot the NBER recession indicators\n",
    "rec = DataReader('USREC', 'fred', start=start, end=end)\n",
    "ylim = ax.get_ylim()\n",
    "ax.fill_between(dates[:-3], ylim[0], ylim[1], rec.values[:-4,0], facecolor='k', alpha=0.1);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Post-estimation\n",
    "\n",
    "Although here we will be able to interpret the results of the model by constructing the coincident index, there is a useful and generic approach for getting a sense for what is being captured by the estimated factor. By taking the estimated factors as given, regressing them (and a constant) each (one at a time) on each of the observed variables, and recording the coefficients of determination ($R^2$ values), we can get a sense of the variables for which each factor explains a substantial portion of the variance and the variables for which it does not.\n",
    "\n",
    "In models with more variables and more factors, this can sometimes lend interpretation to the factors (for example sometimes one factor will load primarily on real variables and another on nominal variables).\n",
    "\n",
    "In this model, with only four endogenous variables and one factor, it is easy to digest a simple table of the $R^2$ values, but in larger models it is not. For this reason, a bar plot is often employed; from the plot we can easily see that the factor explains most of the variation in industrial production index and a large portion of the variation in sales and employment, it is less helpful in explaining income."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "res.plot_coefficients_of_determination(figsize=(8,2));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coincident Index\n",
    "\n",
    "As described above, the goal of this model was to create an interpretable series which could be used to understand the current status of the macroeconomy. This is what the coincident index is designed to do. It is constructed below. For readers interested in an explanation of the construction, see Kim and Nelson (1999) or Stock and Watson (1991).\n",
    "\n",
    "In essence, what is done is to reconstruct the mean of the (differenced) factor. We will compare it to the coincident index on published by the Federal Reserve Bank of Philadelphia (USPHCI on FRED)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "usphci = DataReader('USPHCI', 'fred', start='1979-01-01', end='2014-12-01')['USPHCI']\n",
    "usphci.plot(figsize=(13,3));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "dusphci = usphci.diff()[1:].values\n",
    "def compute_coincident_index(mod, res):\n",
    "    # Estimate W(1)\n",
    "    spec = res.specification\n",
    "    design = mod.ssm['design']\n",
    "    transition = mod.ssm['transition']\n",
    "    ss_kalman_gain = res.filter_results.kalman_gain[:,:,-1]\n",
    "    k_states = ss_kalman_gain.shape[0]\n",
    "\n",
    "    W1 = np.linalg.inv(np.eye(k_states) - np.dot(\n",
    "        np.eye(k_states) - np.dot(ss_kalman_gain, design),\n",
    "        transition\n",
    "    )).dot(ss_kalman_gain)[0]\n",
    "\n",
    "    # Compute the factor mean vector\n",
    "    factor_mean = np.dot(W1, dta.loc['1972-02-01':, 'dln_indprod':'dln_emp'].mean())\n",
    "    \n",
    "    # Normalize the factors\n",
    "    factor = res.factors.filtered[0]\n",
    "    factor *= np.std(usphci.diff()[1:]) / np.std(factor)\n",
    "\n",
    "    # Compute the coincident index\n",
    "    coincident_index = np.zeros(mod.nobs+1)\n",
    "    # The initial value is arbitrary; here it is set to\n",
    "    # facilitate comparison\n",
    "    coincident_index[0] = usphci.iloc[0] * factor_mean / dusphci.mean()\n",
    "    for t in range(0, mod.nobs):\n",
    "        coincident_index[t+1] = coincident_index[t] + factor[t] + factor_mean\n",
    "    \n",
    "    # Attach dates\n",
    "    coincident_index = pd.Series(coincident_index, index=dta.index).iloc[1:]\n",
    "    \n",
    "    # Normalize to use the same base year as USPHCI\n",
    "    coincident_index *= (usphci.loc['1992-07-01'] / coincident_index.loc['1992-07-01'])\n",
    "    \n",
    "    return coincident_index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below we plot the calculated coincident index along with the US recessions and the comparison coincident index USPHCI."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(13,3))\n",
    "\n",
    "# Compute the index\n",
    "coincident_index = compute_coincident_index(mod, res)\n",
    "\n",
    "# Plot the factor\n",
    "dates = endog.index._mpl_repr()\n",
    "ax.plot(dates, coincident_index, label='Coincident index')\n",
    "ax.plot(usphci.index._mpl_repr(), usphci, label='USPHCI')\n",
    "ax.legend(loc='lower right')\n",
    "\n",
    "# Retrieve and also plot the NBER recession indicators\n",
    "ylim = ax.get_ylim()\n",
    "ax.fill_between(dates[:-3], ylim[0], ylim[1], rec.values[:-4,0], facecolor='k', alpha=0.1);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Appendix 1: Extending the dynamic factor model\n",
    "\n",
    "Recall that the previous specification was described by:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "y_{i,t} & = \\lambda_i f_t + u_{i,t} \\\\\n",
    "u_{i,t} & = c_{i,1} u_{1,t-1} + c_{i,2} u_{i,t-2} + \\varepsilon_{i,t} \\qquad & \\varepsilon_{i,t} \\sim N(0, \\sigma_i^2) \\\\\n",
    "f_t & = a_1 f_{t-1} + a_2 f_{t-2} + \\eta_t \\qquad & \\eta_t \\sim N(0, I)\\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "Written in state space form, the previous specification of the model had the following observation equation:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "y_{\\text{indprod}, t} \\\\\n",
    "y_{\\text{income}, t} \\\\\n",
    "y_{\\text{sales}, t} \\\\\n",
    "y_{\\text{emp}, t} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "\\lambda_\\text{indprod} & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{income}  & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{sales}   & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{emp}     & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "u_{\\text{indprod}, t} \\\\\n",
    "u_{\\text{income}, t} \\\\\n",
    "u_{\\text{sales}, t} \\\\\n",
    "u_{\\text{emp}, t} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "and transition equation:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "u_{\\text{indprod}, t} \\\\\n",
    "u_{\\text{income}, t} \\\\\n",
    "u_{\\text{sales}, t} \\\\\n",
    "u_{\\text{emp}, t} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "a_1 & a_2 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "1   & 0   & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & c_{\\text{indprod}, 1} & 0 & 0 & 0 & c_{\\text{indprod}, 2} & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & c_{\\text{income}, 1} & 0 & 0 & 0 & c_{\\text{income}, 2} & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & c_{\\text{sales}, 1} & 0 & 0 & 0 & c_{\\text{sales}, 2} & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & c_{\\text{emp}, 1} & 0 & 0 & 0 & c_{\\text{emp}, 2} \\\\\n",
    "0   & 0   & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix} \n",
    "\\begin{bmatrix}\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "u_{\\text{indprod}, t-2} \\\\\n",
    "u_{\\text{income}, t-2} \\\\\n",
    "u_{\\text{sales}, t-2} \\\\\n",
    "u_{\\text{emp}, t-2} \\\\\n",
    "\\end{bmatrix}\n",
    "+ R \\begin{bmatrix}\n",
    "\\eta_t \\\\\n",
    "\\varepsilon_{t}\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "the `DynamicFactor` model handles setting up the state space representation and, in the `DynamicFactor.update` method, it fills in the fitted parameter values into the appropriate locations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The extended specification is the same as in the previous example, except that we also want to allow employment to depend on lagged values of the factor. This creates a change to the $y_{\\text{emp},t}$ equation. Now we have:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "y_{i,t} & = \\lambda_i f_t + u_{i,t} \\qquad & i \\in \\{\\text{indprod}, \\text{income}, \\text{sales} \\}\\\\\n",
    "y_{i,t} & = \\lambda_{i,0} f_t + \\lambda_{i,1} f_{t-1} + \\lambda_{i,2} f_{t-2} + \\lambda_{i,2} f_{t-3} + u_{i,t} \\qquad & i = \\text{emp} \\\\\n",
    "u_{i,t} & = c_{i,1} u_{i,t-1} + c_{i,2} u_{i,t-2} + \\varepsilon_{i,t} \\qquad & \\varepsilon_{i,t} \\sim N(0, \\sigma_i^2) \\\\\n",
    "f_t & = a_1 f_{t-1} + a_2 f_{t-2} + \\eta_t \\qquad & \\eta_t \\sim N(0, I)\\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "Now, the corresponding observation equation should look like the following:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "y_{\\text{indprod}, t} \\\\\n",
    "y_{\\text{income}, t} \\\\\n",
    "y_{\\text{sales}, t} \\\\\n",
    "y_{\\text{emp}, t} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "\\lambda_\\text{indprod} & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{income}  & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{sales}   & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{emp,1}   & \\lambda_\\text{emp,2} & \\lambda_\\text{emp,3} & \\lambda_\\text{emp,4} & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "u_{\\text{indprod}, t} \\\\\n",
    "u_{\\text{income}, t} \\\\\n",
    "u_{\\text{sales}, t} \\\\\n",
    "u_{\\text{emp}, t} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "Notice that we have introduced two new state variables, $f_{t-2}$ and $f_{t-3}$, which means we need to update the  transition equation:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "u_{\\text{indprod}, t} \\\\\n",
    "u_{\\text{income}, t} \\\\\n",
    "u_{\\text{sales}, t} \\\\\n",
    "u_{\\text{emp}, t} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "a_1 & a_2 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "1   & 0   & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 1   & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & c_{\\text{indprod}, 1} & 0 & 0 & 0 & c_{\\text{indprod}, 2} & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & c_{\\text{income}, 1} & 0 & 0 & 0 & c_{\\text{income}, 2} & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 0 & c_{\\text{sales}, 1} & 0 & 0 & 0 & c_{\\text{sales}, 2} & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 0 & 0 & c_{\\text{emp}, 1} & 0 & 0 & 0 & c_{\\text{emp}, 2} \\\\\n",
    "0   & 0   & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix} \n",
    "\\begin{bmatrix}\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "f_{t-4} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "u_{\\text{indprod}, t-2} \\\\\n",
    "u_{\\text{income}, t-2} \\\\\n",
    "u_{\\text{sales}, t-2} \\\\\n",
    "u_{\\text{emp}, t-2} \\\\\n",
    "\\end{bmatrix}\n",
    "+ R \\begin{bmatrix}\n",
    "\\eta_t \\\\\n",
    "\\varepsilon_{t}\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "This model cannot be handled out-of-the-box by the `DynamicFactor` class, but it can be handled by creating a subclass when alters the state space representation in the appropriate way."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, notice that if we had set `factor_order = 4`, we would almost have what we wanted. In that case, the last line of the observation equation would be:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "\\vdots \\\\\n",
    "y_{\\text{emp}, t} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "\\vdots &  &  &  &  &  &  &  &  &  &  & \\vdots \\\\\n",
    "\\lambda_\\text{emp,1}   & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "\\vdots\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "\n",
    "and the first line of the transition equation would be:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "\\vdots\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "a_1 & a_2 & a_3 & a_4 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\vdots &  &  &  &  &  &  &  &  &  &  & \\vdots \\\\\n",
    "\\end{bmatrix} \n",
    "\\begin{bmatrix}\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "f_{t-4} \\\\\n",
    "\\vdots\n",
    "\\end{bmatrix}\n",
    "+ R \\begin{bmatrix}\n",
    "\\eta_t \\\\\n",
    "\\varepsilon_{t}\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "Relative to what we want, we have the following differences:\n",
    "\n",
    "1. In the above situation, the $\\lambda_{\\text{emp}, j}$ are forced to be zero for $j > 0$, and we want them to be estimated as parameters.\n",
    "2. We only want the factor to transition according to an AR(2), but under the above situation it is an AR(4).\n",
    "\n",
    "Our strategy will be to subclass `DynamicFactor`, and let it do most of the work (setting up the state space representation, etc.) where it assumes that `factor_order = 4`. The only things we will actually do in the subclass will be to fix those two issues.\n",
    "\n",
    "First, here is the full code of the subclass; it is discussed below. It is important to note at the outset that none of the methods defined below could have been omitted. In fact, the methods `__init__`, `start_params`, `param_names`, `transform_params`, `untransform_params`, and `update` form the core of all state space models in statsmodels, not just the `DynamicFactor` class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.tsa.statespace import tools\n",
    "class ExtendedDFM(sm.tsa.DynamicFactor):\n",
    "    def __init__(self, endog, **kwargs):\n",
    "            # Setup the model as if we had a factor order of 4\n",
    "            super(ExtendedDFM, self).__init__(\n",
    "                endog, k_factors=1, factor_order=4, error_order=2,\n",
    "                **kwargs)\n",
    "\n",
    "            # Note: `self.parameters` is an ordered dict with the\n",
    "            # keys corresponding to parameter types, and the values\n",
    "            # the number of parameters of that type.\n",
    "            # Add the new parameters\n",
    "            self.parameters['new_loadings'] = 3\n",
    "\n",
    "            # Cache a slice for the location of the 4 factor AR\n",
    "            # parameters (a_1, ..., a_4) in the full parameter vector\n",
    "            offset = (self.parameters['factor_loadings'] +\n",
    "                      self.parameters['exog'] +\n",
    "                      self.parameters['error_cov'])\n",
    "            self._params_factor_ar = np.s_[offset:offset+2]\n",
    "            self._params_factor_zero = np.s_[offset+2:offset+4]\n",
    "\n",
    "    @property\n",
    "    def start_params(self):\n",
    "        # Add three new loading parameters to the end of the parameter\n",
    "        # vector, initialized to zeros (for simplicity; they could\n",
    "        # be initialized any way you like)\n",
    "        return np.r_[super(ExtendedDFM, self).start_params, 0, 0, 0]\n",
    "    \n",
    "    @property\n",
    "    def param_names(self):\n",
    "        # Add the corresponding names for the new loading parameters\n",
    "        #  (the name can be anything you like)\n",
    "        return super(ExtendedDFM, self).param_names + [\n",
    "            'loading.L%d.f1.%s' % (i, self.endog_names[3]) for i in range(1,4)]\n",
    "\n",
    "    def transform_params(self, unconstrained):\n",
    "            # Perform the typical DFM transformation (w/o the new parameters)\n",
    "            constrained = super(ExtendedDFM, self).transform_params(\n",
    "            unconstrained[:-3])\n",
    "\n",
    "            # Redo the factor AR constraint, since we only want an AR(2),\n",
    "            # and the previous constraint was for an AR(4)\n",
    "            ar_params = unconstrained[self._params_factor_ar]\n",
    "            constrained[self._params_factor_ar] = (\n",
    "                tools.constrain_stationary_univariate(ar_params))\n",
    "\n",
    "            # Return all the parameters\n",
    "            return np.r_[constrained, unconstrained[-3:]]\n",
    "\n",
    "    def untransform_params(self, constrained):\n",
    "            # Perform the typical DFM untransformation (w/o the new parameters)\n",
    "            unconstrained = super(ExtendedDFM, self).untransform_params(\n",
    "                constrained[:-3])\n",
    "\n",
    "            # Redo the factor AR unconstrained, since we only want an AR(2),\n",
    "            # and the previous unconstrained was for an AR(4)\n",
    "            ar_params = constrained[self._params_factor_ar]\n",
    "            unconstrained[self._params_factor_ar] = (\n",
    "                tools.unconstrain_stationary_univariate(ar_params))\n",
    "\n",
    "            # Return all the parameters\n",
    "            return np.r_[unconstrained, constrained[-3:]]\n",
    "\n",
    "    def update(self, params, transformed=True, **kwargs):\n",
    "        # Peform the transformation, if required\n",
    "        if not transformed:\n",
    "            params = self.transform_params(params)\n",
    "        params[self._params_factor_zero] = 0\n",
    "        \n",
    "        # Now perform the usual DFM update, but exclude our new parameters\n",
    "        super(ExtendedDFM, self).update(params[:-3], transformed=True, **kwargs)\n",
    "\n",
    "        # Finally, set our new parameters in the design matrix\n",
    "        self.ssm['design', 3, 1:4] = params[-3:]\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So what did we just do?\n",
    "\n",
    "**`__init__`**\n",
    "\n",
    "The important step here was specifying the base dynamic factor model which we were operating with. In particular, as described above, we initialize with `factor_order=4`, even though we will only end up with an AR(2) model for the factor. We also performed some general setup-related tasks.\n",
    "\n",
    "**`start_params`**\n",
    "\n",
    "`start_params` are used as initial values in the optimizer. Since we are adding three new parameters, we need to pass those in. If we had not done this, the optimizer would use the default starting values, which would be three elements short.\n",
    "\n",
    "**`param_names`**\n",
    "\n",
    "`param_names` are used in a variety of places, but especially in the results class. Below we get a full result summary, which is only possible when all the parameters have associated names.\n",
    "\n",
    "**`transform_params`** and **`untransform_params`**\n",
    "\n",
    "The optimizer selects possibly parameter values in an unconstrained way. That's not usually desired (since variances cannot be negative, for example), and `transform_params` is used to transform the unconstrained values used by the optimizer to constrained values appropriate to the model. Variances terms are typically squared (to force them to be positive), and AR lag coefficients are often constrained to lead to a stationary model. `untransform_params` is used for the reverse operation (and is important because starting parameters are usually specified in terms of values appropriate to the model, and we need to convert them to parameters appropriate to the optimizer before we can begin the optimization routine).\n",
    "\n",
    "Even though we do not need to transform or untransform our new parameters (the loadings can in theory take on any values), we still need to modify this function for two reasons:\n",
    "\n",
    "1. The version in the `DynamicFactor` class is expecting 3 fewer parameters than we have now. At a minimum, we need to handle the three new parameters.\n",
    "2. The version in the `DynamicFactor` class constrains the factor lag coefficients to be stationary as though it was an AR(4) model. Since we actually have an AR(2) model, we need to re-do the constraint. We also set the last two autoregressive coefficients to be zero here.\n",
    "\n",
    "**`update`**\n",
    "\n",
    "The most important reason we need to specify a new `update` method is because we have three new parameters that we need to place into the state space formulation. In particular we let the parent `DynamicFactor.update` class handle placing all the parameters except the three new ones in to the state space representation, and then we put the last three in manually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/build/statsmodels/statsmodels/statsmodels/tsa/base/tsa_model.py:162: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.\n",
      "  % freq, ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 4.698612\n",
      "         Iterations: 268\n",
      "         Function evaluations: 459\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                             Statespace Model Results                                            \n",
      "=================================================================================================================\n",
      "Dep. Variable:     ['std_indprod', 'std_income', 'std_sales', 'std_emp']   No. Observations:                  431\n",
      "Model:                                 DynamicFactor(factors=1, order=4)   Log Likelihood               -2025.102\n",
      "                                                          + AR(2) errors   AIC                           4096.203\n",
      "Date:                                                   Fri, 21 Feb 2020   BIC                           4189.724\n",
      "Time:                                                           13:56:02   HQIC                          4133.128\n",
      "Sample:                                                       02-01-1979                                         \n",
      "                                                            - 12-01-2014                                         \n",
      "Covariance Type:                                                     opg                                         \n",
      "====================================================================================================\n",
      "                                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "loading.f1.std_indprod              -0.6889      0.036    -19.110      0.000      -0.760      -0.618\n",
      "loading.f1.std_income               -0.2584      0.038     -6.727      0.000      -0.334      -0.183\n",
      "loading.f1.std_sales                -0.4390      0.024    -18.549      0.000      -0.485      -0.393\n",
      "loading.f1.std_emp                  -0.4166      0.039    -10.761      0.000      -0.493      -0.341\n",
      "sigma2.std_indprod                   0.2456      0.046      5.323      0.000       0.155       0.336\n",
      "sigma2.std_income                    0.8735      0.030     29.557      0.000       0.816       0.931\n",
      "sigma2.std_sales                     0.5346      0.034     15.522      0.000       0.467       0.602\n",
      "sigma2.std_emp                       0.2531      0.024     10.487      0.000       0.206       0.300\n",
      "L1.f1.f1                             0.3047      0.059      5.169      0.000       0.189       0.420\n",
      "L2.f1.f1                             0.3768      0.062      6.076      0.000       0.255       0.498\n",
      "L3.f1.f1                                  0   1.96e-11          0      1.000   -3.85e-11    3.85e-11\n",
      "L4.f1.f1                                  0   1.96e-11          0      1.000   -3.85e-11    3.85e-11\n",
      "L1.e(std_indprod).e(std_indprod)    -0.3202      0.113     -2.828      0.005      -0.542      -0.098\n",
      "L2.e(std_indprod).e(std_indprod)    -0.2253      0.090     -2.497      0.013      -0.402      -0.048\n",
      "L1.e(std_income).e(std_income)      -0.1730      0.022     -7.835      0.000      -0.216      -0.130\n",
      "L2.e(std_income).e(std_income)      -0.0936      0.044     -2.120      0.034      -0.180      -0.007\n",
      "L1.e(std_sales).e(std_sales)        -0.4896      0.046    -10.597      0.000      -0.580      -0.399\n",
      "L2.e(std_sales).e(std_sales)        -0.2268      0.050     -4.540      0.000      -0.325      -0.129\n",
      "L1.e(std_emp).e(std_emp)             0.2334      0.042      5.523      0.000       0.151       0.316\n",
      "L2.e(std_emp).e(std_emp)             0.4965      0.051      9.815      0.000       0.397       0.596\n",
      "loading.L1.f1.std_emp               -0.0725      0.038     -1.898      0.058      -0.147       0.002\n",
      "loading.L2.f1.std_emp                0.0005      0.036      0.014      0.989      -0.070       0.071\n",
      "loading.L3.f1.std_emp               -0.1737      0.028     -6.168      0.000      -0.229      -0.119\n",
      "========================================================================================================\n",
      "Ljung-Box (Q):          59.16, 34.27, 68.30, 61.90   Jarque-Bera (JB):   231.63, 9689.10, 25.37, 3374.68\n",
      "Prob(Q):                    0.03, 0.73, 0.00, 0.01   Prob(JB):                    0.00, 0.00, 0.00, 0.00\n",
      "Heteroskedasticity (H):     0.76, 5.03, 0.44, 0.45   Skew:                       0.22, -0.97, 0.24, 0.75\n",
      "Prob(H) (two-sided):        0.11, 0.00, 0.00, 0.00   Kurtosis:                  6.56, 26.15, 4.08, 16.63\n",
      "========================================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
      "[2] Covariance matrix is singular or near-singular, with condition number 5.31e+17. Standard errors may be unstable.\n"
     ]
    }
   ],
   "source": [
    "# Create the model\n",
    "extended_mod = ExtendedDFM(endog)\n",
    "initial_extended_res = extended_mod.fit(maxiter=1000, disp=False)\n",
    "extended_res = extended_mod.fit(initial_extended_res.params, method='nm', maxiter=1000)\n",
    "print(extended_res.summary(separate_params=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although this model increases the likelihood, it is not preferred by the AIC and BIC measures which penalize the additional three parameters.\n",
    "\n",
    "Furthermore, the qualitative results are unchanged, as we can see from the updated $R^2$ chart and the new coincident index, both of which are practically identical to the previous results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "extended_res.plot_coefficients_of_determination(figsize=(8,2));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(13,3))\n",
    "\n",
    "# Compute the index\n",
    "extended_coincident_index = compute_coincident_index(extended_mod, extended_res)\n",
    "\n",
    "# Plot the factor\n",
    "dates = endog.index._mpl_repr()\n",
    "ax.plot(dates, coincident_index, '-', linewidth=1, label='Basic model')\n",
    "ax.plot(dates, extended_coincident_index, '--', linewidth=3, label='Extended model')\n",
    "ax.plot(usphci.index._mpl_repr(), usphci, label='USPHCI')\n",
    "ax.legend(loc='lower right')\n",
    "ax.set(title='Coincident indices, comparison')\n",
    "\n",
    "# Retrieve and also plot the NBER recession indicators\n",
    "ylim = ax.get_ylim()\n",
    "ax.fill_between(dates[:-3], ylim[0], ylim[1], rec.values[:-4,0], facecolor='k', alpha=0.1);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
