{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Interactions and ANOVA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: This script is based heavily on Jonathan Taylor's class notes http://www.stanford.edu/class/stats191/interactions.html\n",
    "\n",
    "Download and format data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from urllib.request import urlopen\n",
    "import numpy as np\n",
    "np.set_printoptions(precision=4, suppress=True)\n",
    "\n",
    "import pandas as pd\n",
    "pd.set_option(\"display.width\", 100)\n",
    "import matplotlib.pyplot as plt\n",
    "from statsmodels.formula.api import ols\n",
    "from statsmodels.graphics.api import interaction_plot, abline_plot\n",
    "from statsmodels.stats.anova import anova_lm\n",
    "\n",
    "try:\n",
    "    salary_table = pd.read_csv('salary.table')\n",
    "except:  # recent pandas can read URL without urlopen\n",
    "    url = 'http://stats191.stanford.edu/data/salary.table'\n",
    "    fh = urlopen(url)\n",
    "    salary_table = pd.read_table(fh)\n",
    "    salary_table.to_csv('salary.table')\n",
    "\n",
    "E = salary_table.E\n",
    "M = salary_table.M\n",
    "X = salary_table.X\n",
    "S = salary_table.S"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Take a look at the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,6))\n",
    "symbols = ['D', '^']\n",
    "colors = ['r', 'g', 'blue']\n",
    "factor_groups = salary_table.groupby(['E','M'])\n",
    "for values, group in factor_groups:\n",
    "    i,j = values\n",
    "    plt.scatter(group['X'], group['S'], marker=symbols[j], color=colors[i-1],\n",
    "               s=144)\n",
    "plt.xlabel('Experience');\n",
    "plt.ylabel('Salary');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit a linear model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      S   R-squared:                       0.957\n",
      "Model:                            OLS   Adj. R-squared:                  0.953\n",
      "Method:                 Least Squares   F-statistic:                     226.8\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           2.23e-27\n",
      "Time:                        13:56:17   Log-Likelihood:                -381.63\n",
      "No. Observations:                  46   AIC:                             773.3\n",
      "Df Residuals:                      41   BIC:                             782.4\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept   8035.5976    386.689     20.781      0.000    7254.663    8816.532\n",
      "C(E)[T.2]   3144.0352    361.968      8.686      0.000    2413.025    3875.045\n",
      "C(E)[T.3]   2996.2103    411.753      7.277      0.000    2164.659    3827.762\n",
      "C(M)[T.1]   6883.5310    313.919     21.928      0.000    6249.559    7517.503\n",
      "X            546.1840     30.519     17.896      0.000     484.549     607.819\n",
      "==============================================================================\n",
      "Omnibus:                        2.293   Durbin-Watson:                   2.237\n",
      "Prob(Omnibus):                  0.318   Jarque-Bera (JB):                1.362\n",
      "Skew:                          -0.077   Prob(JB):                        0.506\n",
      "Kurtosis:                       2.171   Cond. No.                         33.5\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "formula = 'S ~ C(E) + C(M) + X'\n",
    "lm = ols(formula, salary_table).fit()\n",
    "print(lm.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Have a look at the created design matrix: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 1., 1.],\n",
       "       [1., 0., 1., 0., 1.],\n",
       "       [1., 0., 1., 1., 1.],\n",
       "       [1., 1., 0., 0., 1.],\n",
       "       [1., 0., 1., 0., 1.]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.model.exog[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or since we initially passed in a DataFrame, we have a DataFrame available in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Intercept</th>\n",
       "      <th>C(E)[T.2]</th>\n",
       "      <th>C(E)[T.3]</th>\n",
       "      <th>C(M)[T.1]</th>\n",
       "      <th>X</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Intercept  C(E)[T.2]  C(E)[T.3]  C(M)[T.1]    X\n",
       "0        1.0        0.0        0.0        1.0  1.0\n",
       "1        1.0        0.0        1.0        0.0  1.0\n",
       "2        1.0        0.0        1.0        1.0  1.0\n",
       "3        1.0        1.0        0.0        0.0  1.0\n",
       "4        1.0        0.0        1.0        0.0  1.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.model.data.orig_exog[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We keep a reference to the original untouched data in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>S</th>\n",
       "      <th>X</th>\n",
       "      <th>E</th>\n",
       "      <th>M</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>13876</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>11608</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>18701</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>11283</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>11767</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      S  X  E  M\n",
       "0           0  13876  1  1  1\n",
       "1           1  11608  1  3  0\n",
       "2           2  18701  1  3  1\n",
       "3           3  11283  1  2  0\n",
       "4           4  11767  1  3  0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.model.data.frame[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Influence statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================================================================\n",
      "       obs      endog     fitted     Cook's   student.   hat diag    dffits   ext.stud.     dffits\n",
      "                           value          d   residual              internal   residual           \n",
      "--------------------------------------------------------------------------------------------------\n",
      "         0  13876.000  15465.313      0.104     -1.683      0.155     -0.722     -1.723     -0.739\n",
      "         1  11608.000  11577.992      0.000      0.031      0.130      0.012      0.031      0.012\n",
      "         2  18701.000  18461.523      0.001      0.247      0.109      0.086      0.244      0.085\n",
      "         3  11283.000  11725.817      0.005     -0.458      0.113     -0.163     -0.453     -0.162\n",
      "         4  11767.000  11577.992      0.001      0.197      0.130      0.076      0.195      0.075\n",
      "         5  20872.000  19155.532      0.092      1.787      0.126      0.678      1.838      0.698\n",
      "         6  11772.000  12272.001      0.006     -0.513      0.101     -0.172     -0.509     -0.170\n",
      "         7  10535.000   9127.966      0.056      1.457      0.116      0.529      1.478      0.537\n",
      "         8  12195.000  12124.176      0.000      0.074      0.123      0.028      0.073      0.027\n",
      "         9  12313.000  12818.185      0.005     -0.516      0.091     -0.163     -0.511     -0.161\n",
      "        10  14975.000  16557.681      0.084     -1.655      0.134     -0.650     -1.692     -0.664\n",
      "        11  21371.000  19701.716      0.078      1.728      0.116      0.624      1.772      0.640\n",
      "        12  19800.000  19553.891      0.001      0.252      0.096      0.082      0.249      0.081\n",
      "        13  11417.000  10220.334      0.033      1.227      0.098      0.405      1.234      0.408\n",
      "        14  20263.000  20100.075      0.001      0.166      0.093      0.053      0.165      0.053\n",
      "        15  13231.000  13216.544      0.000      0.015      0.114      0.005      0.015      0.005\n",
      "        16  12884.000  13364.369      0.004     -0.488      0.082     -0.146     -0.483     -0.145\n",
      "        17  13245.000  13910.553      0.007     -0.674      0.075     -0.192     -0.669     -0.191\n",
      "        18  13677.000  13762.728      0.000     -0.089      0.113     -0.032     -0.087     -0.031\n",
      "        19  15965.000  17650.049      0.082     -1.747      0.119     -0.642     -1.794     -0.659\n",
      "        20  12336.000  11312.702      0.021      1.043      0.087      0.323      1.044      0.323\n",
      "        21  21352.000  21192.443      0.001      0.163      0.091      0.052      0.161      0.051\n",
      "        22  13839.000  14456.737      0.006     -0.624      0.070     -0.171     -0.619     -0.170\n",
      "        23  22884.000  21340.268      0.052      1.579      0.095      0.511      1.610      0.521\n",
      "        24  16978.000  18742.417      0.083     -1.822      0.111     -0.644     -1.877     -0.664\n",
      "        25  14803.000  15549.105      0.008     -0.751      0.065     -0.199     -0.747     -0.198\n",
      "        26  17404.000  19288.601      0.093     -1.944      0.110     -0.684     -2.016     -0.709\n",
      "        27  22184.000  22284.811      0.000     -0.103      0.096     -0.034     -0.102     -0.033\n",
      "        28  13548.000  12405.070      0.025      1.162      0.083      0.350      1.167      0.352\n",
      "        29  14467.000  13497.438      0.018      0.987      0.086      0.304      0.987      0.304\n",
      "        30  15942.000  16641.473      0.007     -0.705      0.068     -0.190     -0.701     -0.189\n",
      "        31  23174.000  23377.179      0.001     -0.209      0.108     -0.073     -0.207     -0.072\n",
      "        32  23780.000  23525.004      0.001      0.260      0.092      0.083      0.257      0.082\n",
      "        33  25410.000  24071.188      0.040      1.370      0.096      0.446      1.386      0.451\n",
      "        34  14861.000  14043.622      0.014      0.834      0.091      0.263      0.831      0.262\n",
      "        35  16882.000  17733.841      0.012     -0.863      0.077     -0.249     -0.860     -0.249\n",
      "        36  24170.000  24469.547      0.003     -0.312      0.127     -0.119     -0.309     -0.118\n",
      "        37  15990.000  15135.990      0.018      0.878      0.104      0.300      0.876      0.299\n",
      "        38  26330.000  25163.556      0.035      1.202      0.109      0.420      1.209      0.422\n",
      "        39  17949.000  18826.209      0.017     -0.897      0.093     -0.288     -0.895     -0.287\n",
      "        40  25685.000  26108.099      0.008     -0.452      0.169     -0.204     -0.447     -0.202\n",
      "        41  27837.000  26802.108      0.039      1.087      0.141      0.440      1.089      0.441\n",
      "        42  18838.000  19918.577      0.033     -1.119      0.117     -0.407     -1.123     -0.408\n",
      "        43  17483.000  16774.542      0.018      0.743      0.138      0.297      0.739      0.295\n",
      "        44  19207.000  20464.761      0.052     -1.313      0.131     -0.511     -1.325     -0.515\n",
      "        45  19346.000  18959.278      0.009      0.423      0.208      0.216      0.419      0.214\n",
      "==================================================================================================\n"
     ]
    }
   ],
   "source": [
    "infl = lm.get_influence()\n",
    "print(infl.summary_table())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "or get a dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_infl = infl.summary_frame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dfb_Intercept</th>\n",
       "      <th>dfb_C(E)[T.2]</th>\n",
       "      <th>dfb_C(E)[T.3]</th>\n",
       "      <th>dfb_C(M)[T.1]</th>\n",
       "      <th>dfb_X</th>\n",
       "      <th>cooks_d</th>\n",
       "      <th>standard_resid</th>\n",
       "      <th>hat_diag</th>\n",
       "      <th>dffits_internal</th>\n",
       "      <th>student_resid</th>\n",
       "      <th>dffits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.505123</td>\n",
       "      <td>0.376134</td>\n",
       "      <td>0.483977</td>\n",
       "      <td>-0.369677</td>\n",
       "      <td>0.399111</td>\n",
       "      <td>0.104186</td>\n",
       "      <td>-1.683099</td>\n",
       "      <td>0.155327</td>\n",
       "      <td>-0.721753</td>\n",
       "      <td>-1.723037</td>\n",
       "      <td>-0.738880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.004663</td>\n",
       "      <td>0.000145</td>\n",
       "      <td>0.006733</td>\n",
       "      <td>-0.006220</td>\n",
       "      <td>-0.004449</td>\n",
       "      <td>0.000029</td>\n",
       "      <td>0.031318</td>\n",
       "      <td>0.130266</td>\n",
       "      <td>0.012120</td>\n",
       "      <td>0.030934</td>\n",
       "      <td>0.011972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.013627</td>\n",
       "      <td>0.000367</td>\n",
       "      <td>0.036876</td>\n",
       "      <td>0.030514</td>\n",
       "      <td>-0.034970</td>\n",
       "      <td>0.001492</td>\n",
       "      <td>0.246931</td>\n",
       "      <td>0.109021</td>\n",
       "      <td>0.086377</td>\n",
       "      <td>0.244082</td>\n",
       "      <td>0.085380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.083152</td>\n",
       "      <td>-0.074411</td>\n",
       "      <td>0.009704</td>\n",
       "      <td>0.053783</td>\n",
       "      <td>0.105122</td>\n",
       "      <td>0.005338</td>\n",
       "      <td>-0.457630</td>\n",
       "      <td>0.113030</td>\n",
       "      <td>-0.163364</td>\n",
       "      <td>-0.453173</td>\n",
       "      <td>-0.161773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.029382</td>\n",
       "      <td>0.000917</td>\n",
       "      <td>0.042425</td>\n",
       "      <td>-0.039198</td>\n",
       "      <td>-0.028036</td>\n",
       "      <td>0.001166</td>\n",
       "      <td>0.197257</td>\n",
       "      <td>0.130266</td>\n",
       "      <td>0.076340</td>\n",
       "      <td>0.194929</td>\n",
       "      <td>0.075439</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   dfb_Intercept  dfb_C(E)[T.2]  dfb_C(E)[T.3]  dfb_C(M)[T.1]     dfb_X   cooks_d  standard_resid  \\\n",
       "0      -0.505123       0.376134       0.483977      -0.369677  0.399111  0.104186       -1.683099   \n",
       "1       0.004663       0.000145       0.006733      -0.006220 -0.004449  0.000029        0.031318   \n",
       "2       0.013627       0.000367       0.036876       0.030514 -0.034970  0.001492        0.246931   \n",
       "3      -0.083152      -0.074411       0.009704       0.053783  0.105122  0.005338       -0.457630   \n",
       "4       0.029382       0.000917       0.042425      -0.039198 -0.028036  0.001166        0.197257   \n",
       "\n",
       "   hat_diag  dffits_internal  student_resid    dffits  \n",
       "0  0.155327        -0.721753      -1.723037 -0.738880  \n",
       "1  0.130266         0.012120       0.030934  0.011972  \n",
       "2  0.109021         0.086377       0.244082  0.085380  \n",
       "3  0.113030        -0.163364      -0.453173 -0.161773  \n",
       "4  0.130266         0.076340       0.194929  0.075439  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_infl[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now plot the residuals within the groups separately:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "resid = lm.resid\n",
    "plt.figure(figsize=(6,6));\n",
    "for values, group in factor_groups:\n",
    "    i,j = values\n",
    "    group_num = i*2 + j - 1  # for plotting purposes\n",
    "    x = [group_num] * len(group)\n",
    "    plt.scatter(x, resid[group.index], marker=symbols[j], color=colors[i-1],\n",
    "            s=144, edgecolors='black')\n",
    "plt.xlabel('Group');\n",
    "plt.ylabel('Residuals');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we will test some interactions using anova or f_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      S   R-squared:                       0.961\n",
      "Model:                            OLS   Adj. R-squared:                  0.955\n",
      "Method:                 Least Squares   F-statistic:                     158.6\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           8.23e-26\n",
      "Time:                        13:56:18   Log-Likelihood:                -379.47\n",
      "No. Observations:                  46   AIC:                             772.9\n",
      "Df Residuals:                      39   BIC:                             785.7\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================\n",
      "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "Intercept    7256.2800    549.494     13.205      0.000    6144.824    8367.736\n",
      "C(E)[T.2]    4172.5045    674.966      6.182      0.000    2807.256    5537.753\n",
      "C(E)[T.3]    3946.3649    686.693      5.747      0.000    2557.396    5335.333\n",
      "C(M)[T.1]    7102.4539    333.442     21.300      0.000    6428.005    7776.903\n",
      "X             632.2878     53.185     11.888      0.000     524.710     739.865\n",
      "C(E)[T.2]:X  -125.5147     69.863     -1.797      0.080    -266.826      15.796\n",
      "C(E)[T.3]:X  -141.2741     89.281     -1.582      0.122    -321.861      39.313\n",
      "==============================================================================\n",
      "Omnibus:                        0.432   Durbin-Watson:                   2.179\n",
      "Prob(Omnibus):                  0.806   Jarque-Bera (JB):                0.590\n",
      "Skew:                           0.144   Prob(JB):                        0.744\n",
      "Kurtosis:                       2.526   Cond. No.                         69.7\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "interX_lm = ols(\"S ~ C(E) * X + C(M)\", salary_table).fit()\n",
    "print(interX_lm.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Do an ANOVA check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   df_resid           ssr  df_diff       ss_diff         F    Pr(>F)\n",
      "0      41.0  4.328072e+07      0.0           NaN       NaN       NaN\n",
      "1      39.0  3.941068e+07      2.0  3.870040e+06  1.914856  0.160964\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      S   R-squared:                       0.999\n",
      "Model:                            OLS   Adj. R-squared:                  0.999\n",
      "Method:                 Least Squares   F-statistic:                     5517.\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           1.67e-55\n",
      "Time:                        13:56:18   Log-Likelihood:                -298.74\n",
      "No. Observations:                  46   AIC:                             611.5\n",
      "Df Residuals:                      39   BIC:                             624.3\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "Intercept            9472.6854     80.344    117.902      0.000    9310.175    9635.196\n",
      "C(E)[T.2]            1381.6706     77.319     17.870      0.000    1225.279    1538.063\n",
      "C(E)[T.3]            1730.7483    105.334     16.431      0.000    1517.690    1943.806\n",
      "C(M)[T.1]            3981.3769    101.175     39.351      0.000    3776.732    4186.022\n",
      "C(E)[T.2]:C(M)[T.1]  4902.5231    131.359     37.322      0.000    4636.825    5168.222\n",
      "C(E)[T.3]:C(M)[T.1]  3066.0351    149.330     20.532      0.000    2763.986    3368.084\n",
      "X                     496.9870      5.566     89.283      0.000     485.728     508.246\n",
      "==============================================================================\n",
      "Omnibus:                       74.761   Durbin-Watson:                   2.244\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1037.873\n",
      "Skew:                          -4.103   Prob(JB):                    4.25e-226\n",
      "Kurtosis:                      24.776   Cond. No.                         79.0\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "   df_resid           ssr  df_diff       ss_diff           F        Pr(>F)\n",
      "0      41.0  4.328072e+07      0.0           NaN         NaN           NaN\n",
      "1      39.0  1.178168e+06      2.0  4.210255e+07  696.844466  3.025504e-31\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.stats.api import anova_lm\n",
    "\n",
    "table1 = anova_lm(lm, interX_lm)\n",
    "print(table1)\n",
    "\n",
    "interM_lm = ols(\"S ~ X + C(E)*C(M)\", data=salary_table).fit()\n",
    "print(interM_lm.summary())\n",
    "\n",
    "table2 = anova_lm(lm, interM_lm)\n",
    "print(table2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The design matrix as a DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Intercept</th>\n",
       "      <th>C(E)[T.2]</th>\n",
       "      <th>C(E)[T.3]</th>\n",
       "      <th>C(M)[T.1]</th>\n",
       "      <th>C(E)[T.2]:C(M)[T.1]</th>\n",
       "      <th>C(E)[T.3]:C(M)[T.1]</th>\n",
       "      <th>X</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Intercept  C(E)[T.2]  C(E)[T.3]  C(M)[T.1]  C(E)[T.2]:C(M)[T.1]  C(E)[T.3]:C(M)[T.1]    X\n",
       "0        1.0        0.0        0.0        1.0                  0.0                  0.0  1.0\n",
       "1        1.0        0.0        1.0        0.0                  0.0                  0.0  1.0\n",
       "2        1.0        0.0        1.0        1.0                  0.0                  1.0  1.0\n",
       "3        1.0        1.0        0.0        0.0                  0.0                  0.0  1.0\n",
       "4        1.0        0.0        1.0        0.0                  0.0                  0.0  1.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interM_lm.model.data.orig_exog[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The design matrix as an ndarray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Intercept',\n",
       " 'C(E)[T.2]',\n",
       " 'C(E)[T.3]',\n",
       " 'C(M)[T.1]',\n",
       " 'C(E)[T.2]:C(M)[T.1]',\n",
       " 'C(E)[T.3]:C(M)[T.1]',\n",
       " 'X']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interM_lm.model.exog\n",
    "interM_lm.model.exog_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "infl = interM_lm.get_influence()\n",
    "resid = infl.resid_studentized_internal\n",
    "plt.figure(figsize=(6,6))\n",
    "for values, group in factor_groups:\n",
    "    i,j = values\n",
    "    idx = group.index\n",
    "    plt.scatter(X[idx], resid[idx], marker=symbols[j], color=colors[i-1],\n",
    "            s=144, edgecolors='black')\n",
    "plt.xlabel('X');\n",
    "plt.ylabel('standardized resids');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks like one observation is an outlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      S   R-squared:                       0.955\n",
      "Model:                            OLS   Adj. R-squared:                  0.950\n",
      "Method:                 Least Squares   F-statistic:                     211.7\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           2.45e-26\n",
      "Time:                        13:56:18   Log-Likelihood:                -373.79\n",
      "No. Observations:                  45   AIC:                             757.6\n",
      "Df Residuals:                      40   BIC:                             766.6\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept   8044.7518    392.781     20.482      0.000    7250.911    8838.592\n",
      "C(E)[T.2]   3129.5286    370.470      8.447      0.000    2380.780    3878.277\n",
      "C(E)[T.3]   2999.4451    416.712      7.198      0.000    2157.238    3841.652\n",
      "C(M)[T.1]   6866.9856    323.991     21.195      0.000    6212.175    7521.796\n",
      "X            545.7855     30.912     17.656      0.000     483.311     608.260\n",
      "==============================================================================\n",
      "Omnibus:                        2.511   Durbin-Watson:                   2.265\n",
      "Prob(Omnibus):                  0.285   Jarque-Bera (JB):                1.400\n",
      "Skew:                          -0.044   Prob(JB):                        0.496\n",
      "Kurtosis:                       2.140   Cond. No.                         33.1\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "\n",
      "\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      S   R-squared:                       0.959\n",
      "Model:                            OLS   Adj. R-squared:                  0.952\n",
      "Method:                 Least Squares   F-statistic:                     147.7\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           8.97e-25\n",
      "Time:                        13:56:18   Log-Likelihood:                -371.70\n",
      "No. Observations:                  45   AIC:                             757.4\n",
      "Df Residuals:                      38   BIC:                             770.0\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================\n",
      "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "Intercept    7266.0887    558.872     13.001      0.000    6134.711    8397.466\n",
      "C(E)[T.2]    4162.0846    685.728      6.070      0.000    2773.900    5550.269\n",
      "C(E)[T.3]    3940.4359    696.067      5.661      0.000    2531.322    5349.549\n",
      "C(M)[T.1]    7088.6387    345.587     20.512      0.000    6389.035    7788.243\n",
      "X             631.6892     53.950     11.709      0.000     522.473     740.905\n",
      "C(E)[T.2]:X  -125.5009     70.744     -1.774      0.084    -268.714      17.712\n",
      "C(E)[T.3]:X  -139.8410     90.728     -1.541      0.132    -323.511      43.829\n",
      "==============================================================================\n",
      "Omnibus:                        0.617   Durbin-Watson:                   2.194\n",
      "Prob(Omnibus):                  0.734   Jarque-Bera (JB):                0.728\n",
      "Skew:                           0.162   Prob(JB):                        0.695\n",
      "Kurtosis:                       2.468   Cond. No.                         68.7\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "\n",
      "\n",
      "   df_resid           ssr  df_diff       ss_diff         F    Pr(>F)\n",
      "0      40.0  4.320910e+07      0.0           NaN       NaN       NaN\n",
      "1      38.0  3.937424e+07      2.0  3.834859e+06  1.850508  0.171042\n",
      "\n",
      "\n",
      "   df_resid           ssr  df_diff       ss_diff            F        Pr(>F)\n",
      "0      40.0  4.320910e+07      0.0           NaN          NaN           NaN\n",
      "1      38.0  1.711881e+05      2.0  4.303791e+07  4776.734853  2.291239e-46\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n"
     ]
    }
   ],
   "source": [
    "drop_idx = abs(resid).argmax()\n",
    "print(drop_idx)  # zero-based index\n",
    "idx = salary_table.index.drop(drop_idx)\n",
    "\n",
    "lm32 = ols('S ~ C(E) + X + C(M)', data=salary_table, subset=idx).fit()\n",
    "\n",
    "print(lm32.summary())\n",
    "print('\\n')\n",
    "\n",
    "interX_lm32 = ols('S ~ C(E) * X + C(M)', data=salary_table, subset=idx).fit()\n",
    "\n",
    "print(interX_lm32.summary())\n",
    "print('\\n')\n",
    "\n",
    "\n",
    "table3 = anova_lm(lm32, interX_lm32)\n",
    "print(table3)\n",
    "print('\\n')\n",
    "\n",
    "\n",
    "interM_lm32 = ols('S ~ X + C(E) * C(M)', data=salary_table, subset=idx).fit()\n",
    "\n",
    "table4 = anova_lm(lm32, interM_lm32)\n",
    "print(table4)\n",
    "print('\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Replot the residuals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "resid = interM_lm32.get_influence().summary_frame()['standard_resid']\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "resid = resid.reindex(X.index)\n",
    "for values, group in factor_groups:\n",
    "    i,j = values\n",
    "    idx = group.index\n",
    "    plt.scatter(X.loc[idx], resid.loc[idx], marker=symbols[j], color=colors[i-1],\n",
    "            s=144, edgecolors='black')\n",
    "plt.xlabel('X[~[32]]');\n",
    "plt.ylabel('standardized resids');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Plot the fitted values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lm_final = ols('S ~ X + C(E)*C(M)', data = salary_table.drop([drop_idx])).fit()\n",
    "mf = lm_final.model.data.orig_exog\n",
    "lstyle = ['-','--']\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "for values, group in factor_groups:\n",
    "    i,j = values\n",
    "    idx = group.index\n",
    "    plt.scatter(X[idx], S[idx], marker=symbols[j], color=colors[i-1],\n",
    "                s=144, edgecolors='black')\n",
    "    # drop NA because there is no idx 32 in the final model\n",
    "    fv = lm_final.fittedvalues.reindex(idx).dropna()\n",
    "    x = mf.X.reindex(idx).dropna()\n",
    "    plt.plot(x, fv, ls=lstyle[j], color=colors[i-1])\n",
    "plt.xlabel('Experience');\n",
    "plt.ylabel('Salary');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From our first look at the data, the difference between Master's and PhD in the management group is different than in the non-management group. This is an interaction between the two qualitative variables management,M and education,E. We can visualize this by first removing the effect of experience, then plotting the means within each of the 6 groups using interaction.plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "U = S - X * interX_lm32.params['X']\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "interaction_plot(E, M, U, colors=['red','blue'], markers=['^','D'],\n",
    "        markersize=10, ax=plt.gca())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Minority Employment Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "try:\n",
    "    jobtest_table = pd.read_table('jobtest.table')\n",
    "except:  # do not have data already\n",
    "    url = 'http://stats191.stanford.edu/data/jobtest.table'\n",
    "    jobtest_table = pd.read_table(url)\n",
    "\n",
    "factor_group = jobtest_table.groupby(['MINORITY'])\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(6,6))\n",
    "colors = ['purple', 'green']\n",
    "markers = ['o', 'v']\n",
    "for factor, group in factor_group:\n",
    "    ax.scatter(group['TEST'], group['JPERF'], color=colors[factor],\n",
    "                marker=markers[factor], s=12**2)\n",
    "ax.set_xlabel('TEST');\n",
    "ax.set_ylabel('JPERF');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  JPERF   R-squared:                       0.517\n",
      "Model:                            OLS   Adj. R-squared:                  0.490\n",
      "Method:                 Least Squares   F-statistic:                     19.25\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           0.000356\n",
      "Time:                        13:56:20   Log-Likelihood:                -36.614\n",
      "No. Observations:                  20   AIC:                             77.23\n",
      "Df Residuals:                      18   BIC:                             79.22\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      1.0350      0.868      1.192      0.249      -0.789       2.859\n",
      "TEST           2.3605      0.538      4.387      0.000       1.230       3.491\n",
      "==============================================================================\n",
      "Omnibus:                        0.324   Durbin-Watson:                   2.896\n",
      "Prob(Omnibus):                  0.850   Jarque-Bera (JB):                0.483\n",
      "Skew:                          -0.186   Prob(JB):                        0.785\n",
      "Kurtosis:                       2.336   Cond. No.                         5.26\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "min_lm = ols('JPERF ~ TEST', data=jobtest_table).fit()\n",
    "print(min_lm.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6,6));\n",
    "for factor, group in factor_group:\n",
    "    ax.scatter(group['TEST'], group['JPERF'], color=colors[factor],\n",
    "                marker=markers[factor], s=12**2)\n",
    "\n",
    "ax.set_xlabel('TEST')\n",
    "ax.set_ylabel('JPERF')\n",
    "fig = abline_plot(model_results = min_lm, ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  JPERF   R-squared:                       0.632\n",
      "Model:                            OLS   Adj. R-squared:                  0.589\n",
      "Method:                 Least Squares   F-statistic:                     14.59\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           0.000204\n",
      "Time:                        13:56:20   Log-Likelihood:                -33.891\n",
      "No. Observations:                  20   AIC:                             73.78\n",
      "Df Residuals:                      17   BIC:                             76.77\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=================================================================================\n",
      "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "Intercept         1.1211      0.780      1.437      0.169      -0.525       2.768\n",
      "TEST              1.8276      0.536      3.412      0.003       0.698       2.958\n",
      "TEST:MINORITY     0.9161      0.397      2.306      0.034       0.078       1.754\n",
      "==============================================================================\n",
      "Omnibus:                        0.388   Durbin-Watson:                   3.008\n",
      "Prob(Omnibus):                  0.823   Jarque-Bera (JB):                0.514\n",
      "Skew:                           0.050   Prob(JB):                        0.773\n",
      "Kurtosis:                       2.221   Cond. No.                         5.96\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "min_lm2 = ols('JPERF ~ TEST + TEST:MINORITY',\n",
    "        data=jobtest_table).fit()\n",
    "\n",
    "print(min_lm2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6,6));\n",
    "for factor, group in factor_group:\n",
    "    ax.scatter(group['TEST'], group['JPERF'], color=colors[factor],\n",
    "                marker=markers[factor], s=12**2)\n",
    "\n",
    "fig = abline_plot(intercept = min_lm2.params['Intercept'],\n",
    "                 slope = min_lm2.params['TEST'], ax=ax, color='purple');\n",
    "fig = abline_plot(intercept = min_lm2.params['Intercept'],\n",
    "        slope = min_lm2.params['TEST'] + min_lm2.params['TEST:MINORITY'],\n",
    "        ax=ax, color='green');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  JPERF   R-squared:                       0.572\n",
      "Model:                            OLS   Adj. R-squared:                  0.522\n",
      "Method:                 Least Squares   F-statistic:                     11.38\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           0.000731\n",
      "Time:                        13:56:20   Log-Likelihood:                -35.390\n",
      "No. Observations:                  20   AIC:                             76.78\n",
      "Df Residuals:                      17   BIC:                             79.77\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      0.6120      0.887      0.690      0.500      -1.260       2.483\n",
      "TEST           2.2988      0.522      4.400      0.000       1.197       3.401\n",
      "MINORITY       1.0276      0.691      1.487      0.155      -0.430       2.485\n",
      "==============================================================================\n",
      "Omnibus:                        0.251   Durbin-Watson:                   3.028\n",
      "Prob(Omnibus):                  0.882   Jarque-Bera (JB):                0.437\n",
      "Skew:                          -0.059   Prob(JB):                        0.804\n",
      "Kurtosis:                       2.286   Cond. No.                         5.72\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "min_lm3 = ols('JPERF ~ TEST + MINORITY', data = jobtest_table).fit()\n",
    "print(min_lm3.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6,6));\n",
    "for factor, group in factor_group:\n",
    "    ax.scatter(group['TEST'], group['JPERF'], color=colors[factor],\n",
    "                marker=markers[factor], s=12**2)\n",
    "\n",
    "fig = abline_plot(intercept = min_lm3.params['Intercept'],\n",
    "                 slope = min_lm3.params['TEST'], ax=ax, color='purple');\n",
    "fig = abline_plot(intercept = min_lm3.params['Intercept'] + min_lm3.params['MINORITY'],\n",
    "        slope = min_lm3.params['TEST'], ax=ax, color='green');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  JPERF   R-squared:                       0.664\n",
      "Model:                            OLS   Adj. R-squared:                  0.601\n",
      "Method:                 Least Squares   F-statistic:                     10.55\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           0.000451\n",
      "Time:                        13:56:21   Log-Likelihood:                -32.971\n",
      "No. Observations:                  20   AIC:                             73.94\n",
      "Df Residuals:                      16   BIC:                             77.92\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=================================================================================\n",
      "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "Intercept         2.0103      1.050      1.914      0.074      -0.216       4.236\n",
      "TEST              1.3134      0.670      1.959      0.068      -0.108       2.735\n",
      "MINORITY         -1.9132      1.540     -1.242      0.232      -5.179       1.352\n",
      "TEST:MINORITY     1.9975      0.954      2.093      0.053      -0.026       4.021\n",
      "==============================================================================\n",
      "Omnibus:                        3.377   Durbin-Watson:                   3.015\n",
      "Prob(Omnibus):                  0.185   Jarque-Bera (JB):                1.330\n",
      "Skew:                           0.120   Prob(JB):                        0.514\n",
      "Kurtosis:                       1.760   Cond. No.                         13.8\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "min_lm4 = ols('JPERF ~ TEST * MINORITY', data = jobtest_table).fit()\n",
    "print(min_lm4.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8,6));\n",
    "for factor, group in factor_group:\n",
    "    ax.scatter(group['TEST'], group['JPERF'], color=colors[factor],\n",
    "                marker=markers[factor], s=12**2)\n",
    "\n",
    "fig = abline_plot(intercept = min_lm4.params['Intercept'],\n",
    "                 slope = min_lm4.params['TEST'], ax=ax, color='purple');\n",
    "fig = abline_plot(intercept = min_lm4.params['Intercept'] + min_lm4.params['MINORITY'],\n",
    "        slope = min_lm4.params['TEST'] + min_lm4.params['TEST:MINORITY'],\n",
    "        ax=ax, color='green');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   df_resid        ssr  df_diff    ss_diff         F    Pr(>F)\n",
      "0      18.0  45.568297      0.0        NaN       NaN       NaN\n",
      "1      16.0  31.655473      2.0  13.912824  3.516061  0.054236\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n"
     ]
    }
   ],
   "source": [
    "# is there any effect of MINORITY on slope or intercept?\n",
    "table5 = anova_lm(min_lm, min_lm4)\n",
    "print(table5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   df_resid        ssr  df_diff   ss_diff         F    Pr(>F)\n",
      "0      18.0  45.568297      0.0       NaN       NaN       NaN\n",
      "1      17.0  40.321546      1.0  5.246751  2.212087  0.155246\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n"
     ]
    }
   ],
   "source": [
    "# is there any effect of MINORITY on intercept\n",
    "table6 = anova_lm(min_lm, min_lm3)\n",
    "print(table6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   df_resid        ssr  df_diff    ss_diff         F    Pr(>F)\n",
      "0      18.0  45.568297      0.0        NaN       NaN       NaN\n",
      "1      17.0  34.707653      1.0  10.860644  5.319603  0.033949\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n"
     ]
    }
   ],
   "source": [
    "# is there any effect of MINORITY on slope\n",
    "table7 = anova_lm(min_lm, min_lm2)\n",
    "print(table7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   df_resid        ssr  df_diff  ss_diff         F    Pr(>F)\n",
      "0      17.0  34.707653      0.0      NaN       NaN       NaN\n",
      "1      16.0  31.655473      1.0  3.05218  1.542699  0.232115\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n"
     ]
    }
   ],
   "source": [
    "# is it just the slope or both?\n",
    "table8 = anova_lm(min_lm2, min_lm4)\n",
    "print(table8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## One-way ANOVA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "try:\n",
    "    rehab_table = pd.read_csv('rehab.table')\n",
    "except:\n",
    "    url = 'http://stats191.stanford.edu/data/rehab.csv'\n",
    "    rehab_table = pd.read_table(url, delimiter=\",\")\n",
    "    rehab_table.to_csv('rehab.table')\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "fig = rehab_table.boxplot('Time', 'Fitness', ax=ax, grid=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              df  sum_sq     mean_sq          F    PR(>F)\n",
      "C(Fitness)   2.0   672.0  336.000000  16.961538  0.000041\n",
      "Residual    21.0   416.0   19.809524        NaN       NaN\n",
      "    Intercept  C(Fitness)[T.2]  C(Fitness)[T.3]\n",
      "0         1.0              0.0              0.0\n",
      "1         1.0              0.0              0.0\n",
      "2         1.0              0.0              0.0\n",
      "3         1.0              0.0              0.0\n",
      "4         1.0              0.0              0.0\n",
      "5         1.0              0.0              0.0\n",
      "6         1.0              0.0              0.0\n",
      "7         1.0              0.0              0.0\n",
      "8         1.0              1.0              0.0\n",
      "9         1.0              1.0              0.0\n",
      "10        1.0              1.0              0.0\n",
      "11        1.0              1.0              0.0\n",
      "12        1.0              1.0              0.0\n",
      "13        1.0              1.0              0.0\n",
      "14        1.0              1.0              0.0\n",
      "15        1.0              1.0              0.0\n",
      "16        1.0              1.0              0.0\n",
      "17        1.0              1.0              0.0\n",
      "18        1.0              0.0              1.0\n",
      "19        1.0              0.0              1.0\n",
      "20        1.0              0.0              1.0\n",
      "21        1.0              0.0              1.0\n",
      "22        1.0              0.0              1.0\n",
      "23        1.0              0.0              1.0\n"
     ]
    }
   ],
   "source": [
    "rehab_lm = ols('Time ~ C(Fitness)', data=rehab_table).fit()\n",
    "table9 = anova_lm(rehab_lm)\n",
    "print(table9)\n",
    "\n",
    "print(rehab_lm.model.data.orig_exog)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                   Time   R-squared:                       0.618\n",
      "Model:                            OLS   Adj. R-squared:                  0.581\n",
      "Method:                 Least Squares   F-statistic:                     16.96\n",
      "Date:                Fri, 21 Feb 2020   Prob (F-statistic):           4.13e-05\n",
      "Time:                        13:56:21   Log-Likelihood:                -68.286\n",
      "No. Observations:                  24   AIC:                             142.6\n",
      "Df Residuals:                      21   BIC:                             146.1\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===================================================================================\n",
      "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "Intercept          38.0000      1.574     24.149      0.000      34.728      41.272\n",
      "C(Fitness)[T.2]    -6.0000      2.111     -2.842      0.010     -10.390      -1.610\n",
      "C(Fitness)[T.3]   -14.0000      2.404     -5.824      0.000     -18.999      -9.001\n",
      "==============================================================================\n",
      "Omnibus:                        0.163   Durbin-Watson:                   2.209\n",
      "Prob(Omnibus):                  0.922   Jarque-Bera (JB):                0.211\n",
      "Skew:                          -0.163   Prob(JB):                        0.900\n",
      "Kurtosis:                       2.675   Cond. No.                         3.80\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "print(rehab_lm.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Two-way ANOVA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    kidney_table = pd.read_table('./kidney.table')\n",
    "except:\n",
    "    url = 'http://stats191.stanford.edu/data/kidney.table'\n",
    "    kidney_table = pd.read_csv(url, delim_whitespace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Explore the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Days</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Weight</th>\n",
       "      <th>ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>6.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>8.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Days  Duration  Weight  ID\n",
       "0   0.0         1       1   1\n",
       "1   2.0         1       1   2\n",
       "2   1.0         1       1   3\n",
       "3   3.0         1       1   4\n",
       "4   0.0         1       1   5\n",
       "5   2.0         1       1   6\n",
       "6   0.0         1       1   7\n",
       "7   5.0         1       1   8\n",
       "8   6.0         1       1   9\n",
       "9   8.0         1       1  10"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kidney_table.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Balanced panel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "kt = kidney_table\n",
    "plt.figure(figsize=(8,6))\n",
    "fig = interaction_plot(kt['Weight'], kt['Duration'], np.log(kt['Days']+1),\n",
    "        colors=['red', 'blue'], markers=['D','^'], ms=10, ax=plt.gca())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You have things available in the calling namespace available in the formula evaluation namespace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   df_resid        ssr  df_diff   ss_diff        F    Pr(>F)\n",
      "0      56.0  29.624856      0.0       NaN      NaN       NaN\n",
      "1      54.0  28.989198      2.0  0.635658  0.59204  0.556748\n",
      "   df_resid        ssr  df_diff    ss_diff          F    Pr(>F)\n",
      "0      58.0  46.596147      0.0        NaN        NaN       NaN\n",
      "1      56.0  29.624856      2.0  16.971291  16.040454  0.000003\n",
      "   df_resid        ssr  df_diff   ss_diff         F   Pr(>F)\n",
      "0      57.0  31.964549      0.0       NaN       NaN      NaN\n",
      "1      56.0  29.624856      1.0  2.339693  4.422732  0.03997\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/home/travis/miniconda/envs/statsmodels-test/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n"
     ]
    }
   ],
   "source": [
    "kidney_lm = ols('np.log(Days+1) ~ C(Duration) * C(Weight)', data=kt).fit()\n",
    "\n",
    "table10 = anova_lm(kidney_lm)\n",
    "\n",
    "print(anova_lm(ols('np.log(Days+1) ~ C(Duration) + C(Weight)',\n",
    "                data=kt).fit(), kidney_lm))\n",
    "print(anova_lm(ols('np.log(Days+1) ~ C(Duration)', data=kt).fit(),\n",
    "               ols('np.log(Days+1) ~ C(Duration) + C(Weight, Sum)',\n",
    "                   data=kt).fit()))\n",
    "print(anova_lm(ols('np.log(Days+1) ~ C(Weight)', data=kt).fit(),\n",
    "               ols('np.log(Days+1) ~ C(Duration) + C(Weight, Sum)',\n",
    "                   data=kt).fit()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sum of squares\n",
    "\n",
    " Illustrates the use of different types of sums of squares (I,II,II)\n",
    " and how the Sum contrast can be used to produce the same output between\n",
    " the 3.\n",
    "\n",
    " Types I and II are equivalent under a balanced design.\n",
    "\n",
    " Do not use Type III with non-orthogonal contrast - ie., Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                   df     sum_sq   mean_sq          F    PR(>F)\n",
      "C(Duration, Sum)                  1.0   2.339693  2.339693   4.358293  0.041562\n",
      "C(Weight, Sum)                    2.0  16.971291  8.485645  15.806745  0.000004\n",
      "C(Duration, Sum):C(Weight, Sum)   2.0   0.635658  0.317829   0.592040  0.556748\n",
      "Residual                         54.0  28.989198  0.536837        NaN       NaN\n",
      "                                    sum_sq    df          F    PR(>F)\n",
      "C(Duration, Sum)                  2.339693   1.0   4.358293  0.041562\n",
      "C(Weight, Sum)                   16.971291   2.0  15.806745  0.000004\n",
      "C(Duration, Sum):C(Weight, Sum)   0.635658   2.0   0.592040  0.556748\n",
      "Residual                         28.989198  54.0        NaN       NaN\n",
      "                                     sum_sq    df           F        PR(>F)\n",
      "Intercept                        156.301830   1.0  291.153237  2.077589e-23\n",
      "C(Duration, Sum)                   2.339693   1.0    4.358293  4.156170e-02\n",
      "C(Weight, Sum)                    16.971291   2.0   15.806745  3.944502e-06\n",
      "C(Duration, Sum):C(Weight, Sum)    0.635658   2.0    0.592040  5.567479e-01\n",
      "Residual                          28.989198  54.0         NaN           NaN\n"
     ]
    }
   ],
   "source": [
    "sum_lm = ols('np.log(Days+1) ~ C(Duration, Sum) * C(Weight, Sum)',\n",
    "            data=kt).fit()\n",
    "\n",
    "print(anova_lm(sum_lm))\n",
    "print(anova_lm(sum_lm, typ=2))\n",
    "print(anova_lm(sum_lm, typ=3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                               df     sum_sq   mean_sq          F    PR(>F)\n",
      "C(Duration, Treatment)                        1.0   2.339693  2.339693   4.358293  0.041562\n",
      "C(Weight, Treatment)                          2.0  16.971291  8.485645  15.806745  0.000004\n",
      "C(Duration, Treatment):C(Weight, Treatment)   2.0   0.635658  0.317829   0.592040  0.556748\n",
      "Residual                                     54.0  28.989198  0.536837        NaN       NaN\n",
      "                                                sum_sq    df          F    PR(>F)\n",
      "C(Duration, Treatment)                        2.339693   1.0   4.358293  0.041562\n",
      "C(Weight, Treatment)                         16.971291   2.0  15.806745  0.000004\n",
      "C(Duration, Treatment):C(Weight, Treatment)   0.635658   2.0   0.592040  0.556748\n",
      "Residual                                     28.989198  54.0        NaN       NaN\n",
      "                                                sum_sq    df          F    PR(>F)\n",
      "Intercept                                    10.427596   1.0  19.424139  0.000050\n",
      "C(Duration, Treatment)                        0.054293   1.0   0.101134  0.751699\n",
      "C(Weight, Treatment)                         11.703387   2.0  10.900317  0.000106\n",
      "C(Duration, Treatment):C(Weight, Treatment)   0.635658   2.0   0.592040  0.556748\n",
      "Residual                                     28.989198  54.0        NaN       NaN\n"
     ]
    }
   ],
   "source": [
    "nosum_lm = ols('np.log(Days+1) ~ C(Duration, Treatment) * C(Weight, Treatment)',\n",
    "            data=kt).fit()\n",
    "print(anova_lm(nosum_lm))\n",
    "print(anova_lm(nosum_lm, typ=2))\n",
    "print(anova_lm(nosum_lm, typ=3))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
