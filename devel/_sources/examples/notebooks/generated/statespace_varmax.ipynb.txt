{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# VARMAX models\n",
    "\n",
    "This is a brief introduction notebook to VARMAX models in statsmodels. The VARMAX model is generically specified as:\n",
    "$$\n",
    "y_t = \\nu + A_1 y_{t-1} + \\dots + A_p y_{t-p} + B x_t + \\epsilon_t +\n",
    "M_1 \\epsilon_{t-1} + \\dots M_q \\epsilon_{t-q}\n",
    "$$\n",
    "\n",
    "where $y_t$ is a $\\text{k_endog} \\times 1$ vector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-10-29T06:44:15.746724Z",
     "iopub.status.busy": "2023-10-29T06:44:15.746435Z",
     "iopub.status.idle": "2023-10-29T06:44:16.599772Z",
     "shell.execute_reply": "2023-10-29T06:44:16.598929Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-10-29T06:44:16.604168Z",
     "iopub.status.busy": "2023-10-29T06:44:16.603317Z",
     "iopub.status.idle": "2023-10-29T06:44:17.930069Z",
     "shell.execute_reply": "2023-10-29T06:44:17.929194Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-10-29T06:44:17.934321Z",
     "iopub.status.busy": "2023-10-29T06:44:17.933684Z",
     "iopub.status.idle": "2023-10-29T06:44:18.231069Z",
     "shell.execute_reply": "2023-10-29T06:44:18.230243Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "dta = sm.datasets.webuse('lutkepohl2', 'https://www.stata-press.com/data/r12/')\n",
    "dta.index = dta.qtr\n",
    "dta.index.freq = dta.index.inferred_freq\n",
    "endog = dta.loc['1960-04-01':'1978-10-01', ['dln_inv', 'dln_inc', 'dln_consump']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model specification\n",
    "\n",
    "The `VARMAX` class in statsmodels allows estimation of VAR, VMA, and VARMA models (through the `order` argument), optionally with a constant term (via the `trend` argument). Exogenous regressors may also be included (as usual in statsmodels, by the `exog` argument), and in this way a time trend may be added. Finally, the class allows measurement error (via the `measurement_error` argument) and allows specifying either a diagonal or unstructured innovation covariance matrix (via the `error_cov_type` argument)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example 1: VAR\n",
    "\n",
    "Below is a simple VARX(2) model in two endogenous variables and an exogenous series, but no constant term. Notice that we needed to allow for more iterations than the default (which is `maxiter=50`) in order for the likelihood estimation to converge. This is not unusual in VAR models which have to estimate a large number of parameters, often on a relatively small number of time series: this model, for example, estimates 27 parameters off of 75 observations of 3 variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-10-29T06:44:18.235375Z",
     "iopub.status.busy": "2023-10-29T06:44:18.234873Z",
     "iopub.status.idle": "2023-10-29T06:44:24.422772Z",
     "shell.execute_reply": "2023-10-29T06:44:24.421697Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Statespace Model Results                             \n",
      "==================================================================================\n",
      "Dep. Variable:     ['dln_inv', 'dln_inc']   No. Observations:                   75\n",
      "Model:                            VARX(2)   Log Likelihood                 361.038\n",
      "Date:                    Sun, 29 Oct 2023   AIC                           -696.077\n",
      "Time:                            06:44:24   BIC                           -665.950\n",
      "Sample:                        04-01-1960   HQIC                          -684.047\n",
      "                             - 10-01-1978                                         \n",
      "Covariance Type:                      opg                                         \n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):            0.04, 10.15   Jarque-Bera (JB):          11.11, 2.42\n",
      "Prob(Q):                        0.83, 0.00   Prob(JB):                   0.00, 0.30\n",
      "Heteroskedasticity (H):         0.45, 0.40   Skew:                      0.16, -0.38\n",
      "Prob(H) (two-sided):            0.05, 0.03   Kurtosis:                   4.86, 3.44\n",
      "                            Results for equation dln_inv                            \n",
      "====================================================================================\n",
      "                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "L1.dln_inv          -0.2410      0.093     -2.593      0.010      -0.423      -0.059\n",
      "L1.dln_inc           0.2893      0.450      0.643      0.520      -0.592       1.171\n",
      "L2.dln_inv          -0.1650      0.155     -1.064      0.288      -0.469       0.139\n",
      "L2.dln_inc           0.0734      0.421      0.174      0.862      -0.753       0.899\n",
      "beta.dln_consump     0.9665      0.638      1.514      0.130      -0.285       2.218\n",
      "                            Results for equation dln_inc                            \n",
      "====================================================================================\n",
      "                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "L1.dln_inv           0.0631      0.036      1.760      0.078      -0.007       0.133\n",
      "L1.dln_inc           0.0801      0.107      0.746      0.456      -0.130       0.291\n",
      "L2.dln_inv           0.0100      0.033      0.305      0.761      -0.055       0.075\n",
      "L2.dln_inc           0.0322      0.134      0.240      0.810      -0.230       0.295\n",
      "beta.dln_consump     0.7776      0.112      6.922      0.000       0.557       0.998\n",
      "                                  Error covariance matrix                                   \n",
      "============================================================================================\n",
      "                               coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "sqrt.var.dln_inv             0.0434      0.004     12.298      0.000       0.036       0.050\n",
      "sqrt.cov.dln_inv.dln_inc  4.787e-05      0.002      0.024      0.981      -0.004       0.004\n",
      "sqrt.var.dln_inc             0.0109      0.001     11.208      0.000       0.009       0.013\n",
      "============================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "exog = endog['dln_consump']\n",
    "mod = sm.tsa.VARMAX(endog[['dln_inv', 'dln_inc']], order=(2,0), trend='n', exog=exog)\n",
    "res = mod.fit(maxiter=1000, disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the estimated VAR model, we can plot the impulse response functions of the endogenous variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-10-29T06:44:24.428448Z",
     "iopub.status.busy": "2023-10-29T06:44:24.426836Z",
     "iopub.status.idle": "2023-10-29T06:44:24.849084Z",
     "shell.execute_reply": "2023-10-29T06:44:24.848197Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = res.impulse_responses(10, orthogonalized=True, impulse=[1, 0]).plot(figsize=(13,3))\n",
    "ax.set(xlabel='t', title='Responses to a shock to `dln_inv`');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example 2: VMA\n",
    "\n",
    "A vector moving average model can also be formulated. Below we show a VMA(2) on the same data, but where the innovations to the process are uncorrelated. In this example we leave out the exogenous regressor but now include the constant term."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-10-29T06:44:24.852954Z",
     "iopub.status.busy": "2023-10-29T06:44:24.852643Z",
     "iopub.status.idle": "2023-10-29T06:44:36.385699Z",
     "shell.execute_reply": "2023-10-29T06:44:36.384812Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Statespace Model Results                             \n",
      "==================================================================================\n",
      "Dep. Variable:     ['dln_inv', 'dln_inc']   No. Observations:                   75\n",
      "Model:                             VMA(2)   Log Likelihood                 353.888\n",
      "                              + intercept   AIC                           -683.775\n",
      "Date:                    Sun, 29 Oct 2023   BIC                           -655.966\n",
      "Time:                            06:44:36   HQIC                          -672.671\n",
      "Sample:                        04-01-1960                                         \n",
      "                             - 10-01-1978                                         \n",
      "Covariance Type:                      opg                                         \n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):             0.01, 0.04   Jarque-Bera (JB):         12.59, 13.70\n",
      "Prob(Q):                        0.94, 0.83   Prob(JB):                   0.00, 0.00\n",
      "Heteroskedasticity (H):         0.44, 0.81   Skew:                      0.05, -0.48\n",
      "Prob(H) (two-sided):            0.04, 0.60   Kurtosis:                   5.00, 4.86\n",
      "                           Results for equation dln_inv                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0182      0.005      3.821      0.000       0.009       0.028\n",
      "L1.e(dln_inv)    -0.2595      0.106     -2.457      0.014      -0.466      -0.053\n",
      "L1.e(dln_inc)     0.5184      0.630      0.823      0.411      -0.716       1.753\n",
      "L2.e(dln_inv)     0.0286      0.149      0.193      0.847      -0.262       0.320\n",
      "L2.e(dln_inc)     0.1820      0.475      0.383      0.702      -0.749       1.113\n",
      "                           Results for equation dln_inc                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0207      0.002     13.050      0.000       0.018       0.024\n",
      "L1.e(dln_inv)     0.0484      0.042      1.164      0.244      -0.033       0.130\n",
      "L1.e(dln_inc)    -0.0724      0.140     -0.516      0.606      -0.347       0.203\n",
      "L2.e(dln_inv)     0.0178      0.042      0.420      0.675      -0.065       0.101\n",
      "L2.e(dln_inc)     0.1242      0.153      0.810      0.418      -0.176       0.425\n",
      "                             Error covariance matrix                              \n",
      "==================================================================================\n",
      "                     coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "sigma2.dln_inv     0.0020      0.000      7.348      0.000       0.001       0.003\n",
      "sigma2.dln_inc     0.0001   2.32e-05      5.837      0.000       9e-05       0.000\n",
      "==================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "mod = sm.tsa.VARMAX(endog[['dln_inv', 'dln_inc']], order=(0,2), error_cov_type='diagonal')\n",
    "res = mod.fit(maxiter=1000, disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Caution: VARMA(p,q) specifications\n",
    "\n",
    "Although the model allows estimating VARMA(p,q) specifications, these models are not identified without additional restrictions on the representation matrices, which are not built-in. For this reason, it is recommended that the user proceed with error (and indeed a warning is issued when these models are specified). Nonetheless, they may in some circumstances provide useful information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-10-29T06:44:36.389519Z",
     "iopub.status.busy": "2023-10-29T06:44:36.389195Z",
     "iopub.status.idle": "2023-10-29T06:44:42.453804Z",
     "shell.execute_reply": "2023-10-29T06:44:42.452927Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/statsmodels/tsa/statespace/varmax.py:161: EstimationWarning: Estimation of VARMA(p,q) models is not generically robust, due especially to identification issues.\n",
      "  warn('Estimation of VARMA(p,q) models is not generically robust,'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Statespace Model Results                             \n",
      "==================================================================================\n",
      "Dep. Variable:     ['dln_inv', 'dln_inc']   No. Observations:                   75\n",
      "Model:                         VARMA(1,1)   Log Likelihood                 354.289\n",
      "                              + intercept   AIC                           -682.579\n",
      "Date:                    Sun, 29 Oct 2023   BIC                           -652.451\n",
      "Time:                            06:44:42   HQIC                          -670.549\n",
      "Sample:                        04-01-1960                                         \n",
      "                             - 10-01-1978                                         \n",
      "Covariance Type:                      opg                                         \n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):             0.01, 0.07   Jarque-Bera (JB):         10.96, 14.27\n",
      "Prob(Q):                        0.93, 0.79   Prob(JB):                   0.00, 0.00\n",
      "Heteroskedasticity (H):         0.43, 0.91   Skew:                      0.01, -0.46\n",
      "Prob(H) (two-sided):            0.04, 0.81   Kurtosis:                   4.87, 4.93\n",
      "                           Results for equation dln_inv                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0104      0.064      0.163      0.870      -0.115       0.135\n",
      "L1.dln_inv       -0.0071      0.683     -0.010      0.992      -1.346       1.331\n",
      "L1.dln_inc        0.3869      2.693      0.144      0.886      -4.892       5.666\n",
      "L1.e(dln_inv)    -0.2493      0.694     -0.359      0.719      -1.609       1.110\n",
      "L1.e(dln_inc)     0.1233      2.942      0.042      0.967      -5.644       5.890\n",
      "                           Results for equation dln_inc                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0164      0.027      0.615      0.538      -0.036       0.069\n",
      "L1.dln_inv       -0.0332      0.272     -0.122      0.903      -0.567       0.501\n",
      "L1.dln_inc        0.2376      1.087      0.219      0.827      -1.892       2.367\n",
      "L1.e(dln_inv)     0.0888      0.279      0.318      0.750      -0.458       0.635\n",
      "L1.e(dln_inc)    -0.2373      1.121     -0.212      0.832      -2.435       1.961\n",
      "                                  Error covariance matrix                                   \n",
      "============================================================================================\n",
      "                               coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "sqrt.var.dln_inv             0.0449      0.003     14.519      0.000       0.039       0.051\n",
      "sqrt.cov.dln_inv.dln_inc     0.0017      0.003      0.649      0.516      -0.003       0.007\n",
      "sqrt.var.dln_inc             0.0116      0.001     11.724      0.000       0.010       0.013\n",
      "============================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "mod = sm.tsa.VARMAX(endog[['dln_inv', 'dln_inc']], order=(1,1))\n",
    "res = mod.fit(maxiter=1000, disp=False)\n",
    "print(res.summary())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
