{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# VARMAX models\n",
    "\n",
    "This is a brief introduction notebook to VARMAX models in statsmodels. The VARMAX model is generically specified as:\n",
    "$$\n",
    "y_t = \\nu + A_1 y_{t-1} + \\dots + A_p y_{t-p} + B x_t + \\epsilon_t +\n",
    "M_1 \\epsilon_{t-1} + \\dots M_q \\epsilon_{t-q}\n",
    "$$\n",
    "\n",
    "where $y_t$ is a $\\text{k_endog} \\times 1$ vector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-05T16:23:38.391343Z",
     "iopub.status.busy": "2023-05-05T16:23:38.390846Z",
     "iopub.status.idle": "2023-05-05T16:23:38.921249Z",
     "shell.execute_reply": "2023-05-05T16:23:38.920150Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-05-05T16:23:38.924575Z",
     "iopub.status.busy": "2023-05-05T16:23:38.924266Z",
     "iopub.status.idle": "2023-05-05T16:23:39.744349Z",
     "shell.execute_reply": "2023-05-05T16:23:39.743327Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-05-05T16:23:39.751935Z",
     "iopub.status.busy": "2023-05-05T16:23:39.751478Z",
     "iopub.status.idle": "2023-05-05T16:23:39.979241Z",
     "shell.execute_reply": "2023-05-05T16:23:39.978469Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "dta = sm.datasets.webuse('lutkepohl2', 'https://www.stata-press.com/data/r12/')\n",
    "dta.index = dta.qtr\n",
    "dta.index.freq = dta.index.inferred_freq\n",
    "endog = dta.loc['1960-04-01':'1978-10-01', ['dln_inv', 'dln_inc', 'dln_consump']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model specification\n",
    "\n",
    "The `VARMAX` class in statsmodels allows estimation of VAR, VMA, and VARMA models (through the `order` argument), optionally with a constant term (via the `trend` argument). Exogenous regressors may also be included (as usual in statsmodels, by the `exog` argument), and in this way a time trend may be added. Finally, the class allows measurement error (via the `measurement_error` argument) and allows specifying either a diagonal or unstructured innovation covariance matrix (via the `error_cov_type` argument)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example 1: VAR\n",
    "\n",
    "Below is a simple VARX(2) model in two endogenous variables and an exogenous series, but no constant term. Notice that we needed to allow for more iterations than the default (which is `maxiter=50`) in order for the likelihood estimation to converge. This is not unusual in VAR models which have to estimate a large number of parameters, often on a relatively small number of time series: this model, for example, estimates 27 parameters off of 75 observations of 3 variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-05-05T16:23:39.983463Z",
     "iopub.status.busy": "2023-05-05T16:23:39.982916Z",
     "iopub.status.idle": "2023-05-05T16:23:46.197779Z",
     "shell.execute_reply": "2023-05-05T16:23:46.197027Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Statespace Model Results                             \n",
      "==================================================================================\n",
      "Dep. Variable:     ['dln_inv', 'dln_inc']   No. Observations:                   75\n",
      "Model:                            VARX(2)   Log Likelihood                 361.034\n",
      "Date:                    Fri, 05 May 2023   AIC                           -696.068\n",
      "Time:                            16:23:46   BIC                           -665.941\n",
      "Sample:                        04-01-1960   HQIC                          -684.038\n",
      "                             - 10-01-1978                                         \n",
      "Covariance Type:                      opg                                         \n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):             0.04, 9.99   Jarque-Bera (JB):          11.10, 2.43\n",
      "Prob(Q):                        0.84, 0.00   Prob(JB):                   0.00, 0.30\n",
      "Heteroskedasticity (H):         0.45, 0.40   Skew:                      0.15, -0.38\n",
      "Prob(H) (two-sided):            0.05, 0.03   Kurtosis:                   4.86, 3.44\n",
      "                            Results for equation dln_inv                            \n",
      "====================================================================================\n",
      "                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "L1.dln_inv          -0.2419      0.093     -2.598      0.009      -0.424      -0.059\n",
      "L1.dln_inc           0.2741      0.448      0.613      0.540      -0.603       1.151\n",
      "L2.dln_inv          -0.1632      0.155     -1.052      0.293      -0.467       0.141\n",
      "L2.dln_inc           0.0788      0.423      0.187      0.852      -0.750       0.907\n",
      "beta.dln_consump     0.9662      0.638      1.514      0.130      -0.285       2.217\n",
      "                            Results for equation dln_inc                            \n",
      "====================================================================================\n",
      "                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "L1.dln_inv           0.0634      0.036      1.773      0.076      -0.007       0.133\n",
      "L1.dln_inc           0.0857      0.107      0.804      0.421      -0.123       0.295\n",
      "L2.dln_inv           0.0113      0.033      0.341      0.733      -0.053       0.076\n",
      "L2.dln_inc           0.0388      0.135      0.289      0.773      -0.225       0.302\n",
      "beta.dln_consump     0.7638      0.113      6.789      0.000       0.543       0.984\n",
      "                                  Error covariance matrix                                   \n",
      "============================================================================================\n",
      "                               coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "sqrt.var.dln_inv             0.0434      0.004     12.267      0.000       0.036       0.050\n",
      "sqrt.cov.dln_inv.dln_inc  5.933e-05      0.002      0.029      0.977      -0.004       0.004\n",
      "sqrt.var.dln_inc             0.0109      0.001     11.228      0.000       0.009       0.013\n",
      "============================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "exog = endog['dln_consump']\n",
    "mod = sm.tsa.VARMAX(endog[['dln_inv', 'dln_inc']], order=(2,0), trend='n', exog=exog)\n",
    "res = mod.fit(maxiter=1000, disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the estimated VAR model, we can plot the impulse response functions of the endogenous variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-05-05T16:23:46.201816Z",
     "iopub.status.busy": "2023-05-05T16:23:46.201277Z",
     "iopub.status.idle": "2023-05-05T16:23:46.526876Z",
     "shell.execute_reply": "2023-05-05T16:23:46.526125Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = res.impulse_responses(10, orthogonalized=True, impulse=[1, 0]).plot(figsize=(13,3))\n",
    "ax.set(xlabel='t', title='Responses to a shock to `dln_inv`');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example 2: VMA\n",
    "\n",
    "A vector moving average model can also be formulated. Below we show a VMA(2) on the same data, but where the innovations to the process are uncorrelated. In this example we leave out the exogenous regressor but now include the constant term."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-05-05T16:23:46.530505Z",
     "iopub.status.busy": "2023-05-05T16:23:46.530032Z",
     "iopub.status.idle": "2023-05-05T16:23:52.847232Z",
     "shell.execute_reply": "2023-05-05T16:23:52.846039Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Statespace Model Results                             \n",
      "==================================================================================\n",
      "Dep. Variable:     ['dln_inv', 'dln_inc']   No. Observations:                   75\n",
      "Model:                             VMA(2)   Log Likelihood                 353.888\n",
      "                              + intercept   AIC                           -683.775\n",
      "Date:                    Fri, 05 May 2023   BIC                           -655.965\n",
      "Time:                            16:23:52   HQIC                          -672.671\n",
      "Sample:                        04-01-1960                                         \n",
      "                             - 10-01-1978                                         \n",
      "Covariance Type:                      opg                                         \n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):             0.00, 0.05   Jarque-Bera (JB):         12.75, 13.71\n",
      "Prob(Q):                        0.95, 0.82   Prob(JB):                   0.00, 0.00\n",
      "Heteroskedasticity (H):         0.44, 0.81   Skew:                      0.06, -0.49\n",
      "Prob(H) (two-sided):            0.04, 0.60   Kurtosis:                   5.02, 4.86\n",
      "                           Results for equation dln_inv                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0182      0.005      3.789      0.000       0.009       0.028\n",
      "L1.e(dln_inv)    -0.2579      0.106     -2.438      0.015      -0.465      -0.051\n",
      "L1.e(dln_inc)     0.5084      0.630      0.807      0.420      -0.726       1.743\n",
      "L2.e(dln_inv)     0.0313      0.149      0.210      0.834      -0.261       0.324\n",
      "L2.e(dln_inc)     0.1934      0.476      0.406      0.685      -0.740       1.127\n",
      "                           Results for equation dln_inc                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0207      0.002     13.088      0.000       0.018       0.024\n",
      "L1.e(dln_inv)     0.0478      0.042      1.148      0.251      -0.034       0.129\n",
      "L1.e(dln_inc)    -0.0737      0.140     -0.525      0.599      -0.349       0.201\n",
      "L2.e(dln_inv)     0.0184      0.043      0.433      0.665      -0.065       0.102\n",
      "L2.e(dln_inc)     0.1219      0.153      0.795      0.426      -0.178       0.422\n",
      "                             Error covariance matrix                              \n",
      "==================================================================================\n",
      "                     coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "sigma2.dln_inv     0.0020      0.000      7.347      0.000       0.001       0.003\n",
      "sigma2.dln_inc     0.0001   2.33e-05      5.831      0.000       9e-05       0.000\n",
      "==================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "mod = sm.tsa.VARMAX(endog[['dln_inv', 'dln_inc']], order=(0,2), error_cov_type='diagonal')\n",
    "res = mod.fit(maxiter=1000, disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Caution: VARMA(p,q) specifications\n",
    "\n",
    "Although the model allows estimating VARMA(p,q) specifications, these models are not identified without additional restrictions on the representation matrices, which are not built-in. For this reason, it is recommended that the user proceed with error (and indeed a warning is issued when these models are specified). Nonetheless, they may in some circumstances provide useful information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2023-05-05T16:23:52.850659Z",
     "iopub.status.busy": "2023-05-05T16:23:52.850330Z",
     "iopub.status.idle": "2023-05-05T16:23:55.165834Z",
     "shell.execute_reply": "2023-05-05T16:23:55.164928Z"
    },
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/statsmodels/tsa/statespace/varmax.py:161: EstimationWarning: Estimation of VARMA(p,q) models is not generically robust, due especially to identification issues.\n",
      "  warn('Estimation of VARMA(p,q) models is not generically robust,'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Statespace Model Results                             \n",
      "==================================================================================\n",
      "Dep. Variable:     ['dln_inv', 'dln_inc']   No. Observations:                   75\n",
      "Model:                         VARMA(1,1)   Log Likelihood                 354.288\n",
      "                              + intercept   AIC                           -682.575\n",
      "Date:                    Fri, 05 May 2023   BIC                           -652.448\n",
      "Time:                            16:23:55   HQIC                          -670.546\n",
      "Sample:                        04-01-1960                                         \n",
      "                             - 10-01-1978                                         \n",
      "Covariance Type:                      opg                                         \n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):             0.01, 0.05   Jarque-Bera (JB):         11.01, 13.99\n",
      "Prob(Q):                        0.93, 0.82   Prob(JB):                   0.00, 0.00\n",
      "Heteroskedasticity (H):         0.43, 0.91   Skew:                      0.01, -0.45\n",
      "Prob(H) (two-sided):            0.04, 0.81   Kurtosis:                   4.88, 4.91\n",
      "                           Results for equation dln_inv                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0106      0.066      0.160      0.873      -0.119       0.141\n",
      "L1.dln_inv       -0.0079      0.707     -0.011      0.991      -1.394       1.378\n",
      "L1.dln_inc        0.3757      2.795      0.134      0.893      -5.102       5.853\n",
      "L1.e(dln_inv)    -0.2476      0.718     -0.345      0.730      -1.655       1.160\n",
      "L1.e(dln_inc)     0.1249      3.043      0.041      0.967      -5.839       6.089\n",
      "                           Results for equation dln_inc                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0165      0.028      0.595      0.552      -0.038       0.071\n",
      "L1.dln_inv       -0.0328      0.282     -0.116      0.907      -0.586       0.521\n",
      "L1.dln_inc        0.2324      1.129      0.206      0.837      -1.980       2.445\n",
      "L1.e(dln_inv)     0.0885      0.289      0.306      0.759      -0.478       0.655\n",
      "L1.e(dln_inc)    -0.2364      1.163     -0.203      0.839      -2.516       2.043\n",
      "                                  Error covariance matrix                                   \n",
      "============================================================================================\n",
      "                               coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "sqrt.var.dln_inv             0.0449      0.003     14.527      0.000       0.039       0.051\n",
      "sqrt.cov.dln_inv.dln_inc     0.0017      0.003      0.651      0.515      -0.003       0.007\n",
      "sqrt.var.dln_inc             0.0116      0.001     11.708      0.000       0.010       0.013\n",
      "============================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "mod = sm.tsa.VARMAX(endog[['dln_inv', 'dln_inc']], order=(1,1))\n",
    "res = mod.fit(maxiter=1000, disp=False)\n",
    "print(res.summary())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
