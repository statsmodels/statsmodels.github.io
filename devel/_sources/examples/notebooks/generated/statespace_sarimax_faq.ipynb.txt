{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "66195396-2615-48ab-aa26-954532d0bc35",
   "metadata": {},
   "source": [
    "# SARIMAX and ARIMA: Frequently Asked Questions (FAQ)\n",
    "\n",
    "This notebook contains explanations for frequently asked questions.\n",
    "\n",
    "* Comparing trends and exogenous variables in `SARIMAX`, `ARIMA` and `AutoReg`\n",
    "* Reconstructing residuals, fitted values and forecasts in `SARIMAX` and `ARIMA`\n",
    "* Initial residuals in `SARIMAX` and `ARIMA`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "174cebe5-2bfb-4258-96b0-a292e5cdbcf7",
   "metadata": {},
   "source": [
    "## Comparing trends and exogenous variables in `SARIMAX`, `ARIMA` and `AutoReg`\n",
    "\n",
    "`ARIMA` are formally OLS with ARMA errors.  A basic AR(1) in the OLS with ARMA errors is described as \n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "Y_t & = \\delta + \\epsilon_t \\\\\n",
    "\\epsilon_t & = \\rho \\epsilon_{t-1} + \\eta_t \\\\\n",
    "\\eta_t & \\sim WN(0,\\sigma^2) \\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "In large samples, $\\hat{\\delta}\\stackrel{p}{\\rightarrow} E[Y]$.\n",
    "\n",
    "`SARIMAX` uses a different representation, so that the model when estimated using `SARIMAX` is\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "Y_t & = \\phi + \\rho Y_{t-1} + \\eta_t \\\\\n",
    "\\eta_t & \\sim WN(0,\\sigma^2) \\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "\n",
    "This is the same representation that is used when the model is estimated using OLS (`AutoReg`). In large samples, $\\hat{\\phi}\\stackrel{p}{\\rightarrow} E[Y](1-\\rho)$.\n",
    "\n",
    "In the next cell, we simulate a large sample and verify that these relationship hold in practice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba21553a-e571-42ac-b166-b625a50509fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:30.752536Z",
     "iopub.status.busy": "2024-05-25T05:25:30.752267Z",
     "iopub.status.idle": "2024-05-25T05:25:31.911865Z",
     "shell.execute_reply": "2024-05-25T05:25:31.911197Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fe284c44-b750-4e6e-94d0-b238f364cd7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:31.916586Z",
     "iopub.status.busy": "2024-05-25T05:25:31.915465Z",
     "iopub.status.idle": "2024-05-25T05:25:32.583704Z",
     "shell.execute_reply": "2024-05-25T05:25:32.583023Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "rng = np.random.default_rng(20210819)\n",
    "eta = rng.standard_normal(5200)\n",
    "rho = 0.8\n",
    "beta = 10\n",
    "epsilon = eta.copy()\n",
    "for i in range(1, eta.shape[0]):\n",
    "    epsilon[i] = rho * epsilon[i - 1] + eta[i]\n",
    "y = beta + epsilon\n",
    "y = y[200:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f02b87c6-ee8f-4bb1-bf08-d252b9277733",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:32.592278Z",
     "iopub.status.busy": "2024-05-25T05:25:32.591745Z",
     "iopub.status.idle": "2024-05-25T05:25:33.728853Z",
     "shell.execute_reply": "2024-05-25T05:25:33.728127Z"
    }
   },
   "outputs": [],
   "source": [
    "from statsmodels.tsa.api import SARIMAX, AutoReg\n",
    "from statsmodels.tsa.arima.model import ARIMA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e8212dc-e259-422f-b10b-3b742e86b36c",
   "metadata": {},
   "source": [
    "The three models are specified and estimated in the next cell.  An AR(0) is included as a reference. The AR(0) is identical using all three estimators."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7200d248-bd47-4c95-9f1c-6daaf1e09bb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:33.732841Z",
     "iopub.status.busy": "2024-05-25T05:25:33.732116Z",
     "iopub.status.idle": "2024-05-25T05:25:35.241649Z",
     "shell.execute_reply": "2024-05-25T05:25:35.240704Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =            2     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  1.91760D+00    |proj g|=  3.68860D-06\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "    2      0      1      0     0     0   3.689D-06   1.918D+00\n",
      "  F =   1.9175996129577773     \n",
      "\n",
      "CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL            \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =            3     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  1.41373D+00    |proj g|=  9.51828D-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "    3      2      5      1     0     0   4.516D-05   1.414D+00\n",
      "  F =   1.4137311050015484     \n",
      "\n",
      "CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             \n"
     ]
    }
   ],
   "source": [
    "ar0_res = SARIMAX(y, order=(0, 0, 0), trend=\"c\").fit()\n",
    "sarimax_res = SARIMAX(y, order=(1, 0, 0), trend=\"c\").fit()\n",
    "arima_res = ARIMA(y, order=(1, 0, 0), trend=\"c\").fit()\n",
    "autoreg_res = AutoReg(y, 1, trend=\"c\").fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f502bdd-9ba5-47e4-8aeb-e83e5e1d8898",
   "metadata": {},
   "source": [
    "The table below contains the estimated parameter in the model, the estimated AR(1) coefficient, and the long-run mean which is either equal to the estimated parameters (AR(0) or `ARIMA`), or depends on the ratio of the intercept to 1 minus the AR(1) parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8ff07d0e-6754-4664-93e4-0f9299096868",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:35.245409Z",
     "iopub.status.busy": "2024-05-25T05:25:35.245160Z",
     "iopub.status.idle": "2024-05-25T05:25:35.270525Z",
     "shell.execute_reply": "2024-05-25T05:25:35.269923Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AR(0)</th>\n",
       "      <th>SARIMAX</th>\n",
       "      <th>ARIMA</th>\n",
       "      <th>AutoReg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>delta-or-phi</th>\n",
       "      <td>9.7745</td>\n",
       "      <td>1.985714</td>\n",
       "      <td>9.774498</td>\n",
       "      <td>1.985790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rho</th>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.796846</td>\n",
       "      <td>0.796875</td>\n",
       "      <td>0.796882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>long-run mean</th>\n",
       "      <td>9.7745</td>\n",
       "      <td>9.774424</td>\n",
       "      <td>9.774498</td>\n",
       "      <td>9.776537</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                AR(0)   SARIMAX     ARIMA   AutoReg\n",
       "delta-or-phi   9.7745  1.985714  9.774498  1.985790\n",
       "rho            0.0000  0.796846  0.796875  0.796882\n",
       "long-run mean  9.7745  9.774424  9.774498  9.776537"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "intercept = [\n",
    "    ar0_res.params[0],\n",
    "    sarimax_res.params[0],\n",
    "    arima_res.params[0],\n",
    "    autoreg_res.params[0],\n",
    "]\n",
    "rho_hat = [0] + [r.params[1] for r in (sarimax_res, arima_res, autoreg_res)]\n",
    "long_run = [\n",
    "    ar0_res.params[0],\n",
    "    sarimax_res.params[0] / (1 - sarimax_res.params[1]),\n",
    "    arima_res.params[0],\n",
    "    autoreg_res.params[0] / (1 - autoreg_res.params[1]),\n",
    "]\n",
    "cols = [\"AR(0)\", \"SARIMAX\", \"ARIMA\", \"AutoReg\"]\n",
    "pd.DataFrame(\n",
    "    [intercept, rho_hat, long_run],\n",
    "    columns=cols,\n",
    "    index=[\"delta-or-phi\", \"rho\", \"long-run mean\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f81803a-0902-4715-a1a6-0a609c8bd614",
   "metadata": {},
   "source": [
    "### Differences between trend and exog in `SARIMAX`\n",
    "\n",
    "When `SARIMAX` includes `exog` variables, then the `exog` are treated as OLS regressors, so that the model estimated is\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "Y_t - X_t \\beta & = \\delta + \\rho (Y_{t-1} - X_{t-1}\\beta) + \\eta_t \\\\\n",
    "\\eta_t & \\sim WN(0,\\sigma^2) \\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "In the next example, we omit the trend and instead include a column of 1, which produces a model that is equivalent, in large samples, to the case with no exogenous regressor and `trend=\"c\"`. Here the estimated value of `const` matches the value estimated using `ARIMA`. This happens since both exog in `SARIMAX` and the trend in `ARIMA` are treated as linear regression models with ARMA errors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c18adf81-1ad9-4d11-a23b-e6d139c1fa3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:35.274609Z",
     "iopub.status.busy": "2024-05-25T05:25:35.273573Z",
     "iopub.status.idle": "2024-05-25T05:25:35.898788Z",
     "shell.execute_reply": "2024-05-25T05:25:35.897998Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =            3     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  1.41373D+00    |proj g|=  1.06920D-04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "    3      1      4      1     0     0   4.752D-05   1.414D+00\n",
      "  F =   1.4137311099487531     \n",
      "\n",
      "CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   No. Observations:                 5000\n",
      "Model:               SARIMAX(1, 0, 0)   Log Likelihood               -7068.656\n",
      "Date:                Sat, 25 May 2024   AIC                          14143.311\n",
      "Time:                        05:25:35   BIC                          14162.863\n",
      "Sample:                             0   HQIC                         14150.164\n",
      "                               - 5000                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          9.7745      0.069    141.177      0.000       9.639       9.910\n",
      "ar.L1          0.7969      0.009     93.691      0.000       0.780       0.814\n",
      "sigma2         0.9894      0.020     49.921      0.000       0.951       1.028\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   0.42   Jarque-Bera (JB):                 0.08\n",
      "Prob(Q):                              0.51   Prob(JB):                         0.96\n",
      "Heteroskedasticity (H):               0.97   Skew:                            -0.01\n",
      "Prob(H) (two-sided):                  0.47   Kurtosis:                         2.99\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "sarimax_exog_res = SARIMAX(y, exog=np.ones_like(y), order=(1, 0, 0), trend=\"n\").fit()\n",
    "print(sarimax_exog_res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74d8b733-e74f-4e86-b663-111ab6953b79",
   "metadata": {},
   "source": [
    "### Using `exog` in `SARIMAX` and `ARIMA`\n",
    "\n",
    "While `exog` are treated the same in both models, the intercept continues to differ.  Below we add an exogenous regressor to `y` and then fit the model using all three methods. The data generating process is now\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "Y_t & = \\delta + X_t \\beta + \\epsilon_t \\\\\n",
    "\\epsilon_t & = \\rho \\epsilon_{t-1} + \\eta_t \\\\\n",
    "\\eta_t & \\sim WN(0,\\sigma^2) \\\\\n",
    "\\end{align}\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8978b4c9-05cb-4674-9c67-53eccd8302a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:35.903150Z",
     "iopub.status.busy": "2024-05-25T05:25:35.902069Z",
     "iopub.status.idle": "2024-05-25T05:25:35.906834Z",
     "shell.execute_reply": "2024-05-25T05:25:35.906250Z"
    }
   },
   "outputs": [],
   "source": [
    "full_x = rng.standard_normal(eta.shape)\n",
    "x = full_x[200:]\n",
    "y += 3 * x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8bebdfd6-cb1b-4c33-a4a5-3eb54fe73e24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:35.910786Z",
     "iopub.status.busy": "2024-05-25T05:25:35.909755Z",
     "iopub.status.idle": "2024-05-25T05:25:39.201471Z",
     "shell.execute_reply": "2024-05-25T05:25:39.200762Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =            4     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  1.42683D+00    |proj g|=  2.05943D-01\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate    5    f=  1.41332D+00    |proj g|=  1.60874D-03\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "At iterate   10    f=  1.41329D+00    |proj g|=  3.11659D-05\n",
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "    4     11     15      1     0     0   1.796D-06   1.413D+00\n",
      "  F =   1.4132928400115858     \n",
      "\n",
      "CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL            \n"
     ]
    }
   ],
   "source": [
    "sarimax_exog_res = SARIMAX(y, exog=x, order=(1, 0, 0), trend=\"c\").fit()\n",
    "arima_exog_res = ARIMA(y, exog=x, order=(1, 0, 0), trend=\"c\").fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9015313a-a7b1-436c-a0f0-c567aae09141",
   "metadata": {},
   "source": [
    "Examining the parameter tables, we see that the parameter estimates on `x1` are identical while the estimates of the `intercept` continue to differ due to the differences in the treatment of trends in these estimators."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34f02944-22c0-47d6-8f53-2f3528a99e1a",
   "metadata": {},
   "source": [
    "#### `SARIMAX`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "573ef935-85d2-49e6-b6a1-0041253fc71a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:39.208235Z",
     "iopub.status.busy": "2024-05-25T05:25:39.205474Z",
     "iopub.status.idle": "2024-05-25T05:25:39.287992Z",
     "shell.execute_reply": "2024-05-25T05:25:39.287364Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coef</th>\n",
       "      <th>std err</th>\n",
       "      <th>z</th>\n",
       "      <th>P&gt;|z|</th>\n",
       "      <th>[0.025</th>\n",
       "      <th>0.975]</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>intercept</th>\n",
       "      <td>1.9849</td>\n",
       "      <td>0.085</td>\n",
       "      <td>23.484</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.819</td>\n",
       "      <td>2.151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>x1</th>\n",
       "      <td>3.0231</td>\n",
       "      <td>0.011</td>\n",
       "      <td>277.150</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.002</td>\n",
       "      <td>3.044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ar.L1</th>\n",
       "      <td>0.7969</td>\n",
       "      <td>0.009</td>\n",
       "      <td>93.735</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.780</td>\n",
       "      <td>0.814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sigma2</th>\n",
       "      <td>0.9886</td>\n",
       "      <td>0.020</td>\n",
       "      <td>49.941</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.950</td>\n",
       "      <td>1.027</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              coef      std err       z      P>|z|     [0.025     0.975] \n",
       "                                                                         \n",
       "intercept      1.9849      0.085     23.484     0.0      1.819      2.151\n",
       "x1             3.0231      0.011    277.150     0.0      3.002      3.044\n",
       "ar.L1          0.7969      0.009     93.735     0.0      0.780      0.814\n",
       "sigma2         0.9886      0.020     49.941     0.0      0.950      1.027"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def print_params(s):\n",
    "    from io import StringIO\n",
    "\n",
    "    return pd.read_csv(StringIO(s.tables[1].as_csv()), index_col=0)\n",
    "\n",
    "\n",
    "print_params(sarimax_exog_res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb72481a-29db-4e40-bdc4-8023ff81c51a",
   "metadata": {},
   "source": [
    "#### `ARIMA`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "101e7417-d6fc-448c-9d87-9ba44aafcc70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:39.299483Z",
     "iopub.status.busy": "2024-05-25T05:25:39.291628Z",
     "iopub.status.idle": "2024-05-25T05:25:39.360963Z",
     "shell.execute_reply": "2024-05-25T05:25:39.360343Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coef</th>\n",
       "      <th>std err</th>\n",
       "      <th>z</th>\n",
       "      <th>P&gt;|z|</th>\n",
       "      <th>[0.025</th>\n",
       "      <th>0.975]</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>const</th>\n",
       "      <td>9.7741</td>\n",
       "      <td>0.069</td>\n",
       "      <td>141.201</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.638</td>\n",
       "      <td>9.910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>x1</th>\n",
       "      <td>3.0231</td>\n",
       "      <td>0.011</td>\n",
       "      <td>277.140</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.002</td>\n",
       "      <td>3.044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ar.L1</th>\n",
       "      <td>0.7969</td>\n",
       "      <td>0.009</td>\n",
       "      <td>93.728</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.780</td>\n",
       "      <td>0.814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sigma2</th>\n",
       "      <td>0.9886</td>\n",
       "      <td>0.020</td>\n",
       "      <td>49.941</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.950</td>\n",
       "      <td>1.027</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           coef      std err       z      P>|z|     [0.025     0.975] \n",
       "                                                                      \n",
       "const       9.7741      0.069    141.201     0.0      9.638      9.910\n",
       "x1          3.0231      0.011    277.140     0.0      3.002      3.044\n",
       "ar.L1       0.7969      0.009     93.728     0.0      0.780      0.814\n",
       "sigma2      0.9886      0.020     49.941     0.0      0.950      1.027"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print_params(arima_exog_res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "553c24db-4156-4867-b711-f0e1369c9382",
   "metadata": {},
   "source": [
    "### `exog` in `AutoReg`\n",
    "\n",
    "When using `AutoReg` to estimate a model using OLS, the model differs from both `SARIMAX` and `ARIMA`. The `AutoReg` specification with exogenous variables is \n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "Y_t & = \\phi + \\rho Y_{t-1} + X_{t}\\beta + \\eta_t \\\\\n",
    "\\eta_t & \\sim WN(0,\\sigma^2) \\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "This specification is not equivalent to the specification estimated in `SARIMAX` and `ARIMA`. Here the difference is non-trivial, and naive estimation on the same time series results in different parameter values, even in large samples (and the limit). Estimating this model changes the parameter estimates on the AR(1) coefficient."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4259b7e0-3624-4724-bdbf-eba073a5efb6",
   "metadata": {},
   "source": [
    "#### `AutoReg`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3af7fcc8-6e85-4d76-b2c8-e57a782c0884",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:39.365149Z",
     "iopub.status.busy": "2024-05-25T05:25:39.364084Z",
     "iopub.status.idle": "2024-05-25T05:25:39.414747Z",
     "shell.execute_reply": "2024-05-25T05:25:39.414161Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coef</th>\n",
       "      <th>std err</th>\n",
       "      <th>z</th>\n",
       "      <th>P&gt;|z|</th>\n",
       "      <th>[0.025</th>\n",
       "      <th>0.975]</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>const</th>\n",
       "      <td>7.9714</td>\n",
       "      <td>0.064</td>\n",
       "      <td>124.525</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.846</td>\n",
       "      <td>8.097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y.L1</th>\n",
       "      <td>0.1838</td>\n",
       "      <td>0.006</td>\n",
       "      <td>29.890</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.172</td>\n",
       "      <td>0.196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>x1</th>\n",
       "      <td>3.0311</td>\n",
       "      <td>0.021</td>\n",
       "      <td>142.513</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.989</td>\n",
       "      <td>3.073</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          coef      std err       z      P>|z|     [0.025     0.975] \n",
       "                                                                     \n",
       "const      7.9714      0.064    124.525     0.0      7.846      8.097\n",
       "y.L1       0.1838      0.006     29.890     0.0      0.172      0.196\n",
       "x1         3.0311      0.021    142.513     0.0      2.989      3.073"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autoreg_exog_res = AutoReg(y, 1, exog=x, trend=\"c\").fit()\n",
    "print_params(autoreg_exog_res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "170b7189-8efc-4b7e-9243-46e5ee6043cb",
   "metadata": {},
   "source": [
    "The key difference can be seen by writing the model in lag operator notation.\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "(1-\\phi L ) Y_t & = X_{t}\\beta + \\eta_t \\Rightarrow \\\\\n",
    "Y_t & = (1-\\phi L )^{-1}\\left(X_{t}\\beta + \\eta_t\\right) \\\\\n",
    "Y_t & = \\sum_{i=0}^{\\infty} \\phi^i \\left(X_{t-i}\\beta + \\eta_{t-i}\\right)\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where it is is assumed that $|\\phi|<1$.  Here we see that $Y_t$ depends on all lagged values of $X_t$ and $\\eta_t$.  This differs from the specification estimated by `SARIMAX` and `ARIMA`, which can be seen to be\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "Y_t - X_t \\beta & = \\delta + \\rho (Y_{t-1} - X_{t-1}\\beta) + \\eta_t \\\\\n",
    "\\left(1-\\rho L \\right)\\left(Y_t - X_t  \\beta\\right) & = \\delta +  \\eta_t \\\\\n",
    "Y_t - X_t  \\beta & = \\frac{\\delta}{1-\\rho} +  \\left(1-\\rho L \\right)^{-1}\\eta_t \\\\\n",
    "Y_t - X_t  \\beta & = \\frac{\\delta}{1-\\rho} +  \\sum_{i=0}^\\infty \\rho^i \\eta_{t-i} \\\\\n",
    "Y_t  & = \\frac{\\delta}{1-\\rho} + X_t  \\beta +  \\sum_{i=0}^\\infty \\rho^i \\eta_{t-i} \\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "In this specification, $Y_t$ only depends on $X_t$ and no other lags."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "869a050c-ea1b-42df-aac3-a14722c109e9",
   "metadata": {},
   "source": [
    "### Using the correct DGP with `AutoReg`\n",
    "\n",
    "Simulating the process that is estimated in `AutoReg` shows that the parameters are recovered from the true model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "faa9c3a2-aa68-4a9c-ade2-edf4df7798c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:39.418896Z",
     "iopub.status.busy": "2024-05-25T05:25:39.417829Z",
     "iopub.status.idle": "2024-05-25T05:25:39.451611Z",
     "shell.execute_reply": "2024-05-25T05:25:39.451010Z"
    }
   },
   "outputs": [],
   "source": [
    "y = beta + eta\n",
    "epsilon = eta.copy()\n",
    "for i in range(1, eta.shape[0]):\n",
    "    y[i] = beta * (1 - rho) + rho * y[i - 1] + 3 * full_x[i] + eta[i]\n",
    "y = y[200:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c37ad9d-dad8-4a51-adba-88b60667698c",
   "metadata": {},
   "source": [
    "#### `AutoReg` with correct DGP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2734e0db-39ab-4233-90b2-7c60ba48483a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:39.455697Z",
     "iopub.status.busy": "2024-05-25T05:25:39.454592Z",
     "iopub.status.idle": "2024-05-25T05:25:39.510118Z",
     "shell.execute_reply": "2024-05-25T05:25:39.509517Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coef</th>\n",
       "      <th>std err</th>\n",
       "      <th>z</th>\n",
       "      <th>P&gt;|z|</th>\n",
       "      <th>[0.025</th>\n",
       "      <th>0.975]</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>const</th>\n",
       "      <td>1.9870</td>\n",
       "      <td>0.030</td>\n",
       "      <td>66.526</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.928</td>\n",
       "      <td>2.046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y.L1</th>\n",
       "      <td>0.7968</td>\n",
       "      <td>0.003</td>\n",
       "      <td>300.382</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.792</td>\n",
       "      <td>0.802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>x1</th>\n",
       "      <td>3.0263</td>\n",
       "      <td>0.014</td>\n",
       "      <td>217.034</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.999</td>\n",
       "      <td>3.054</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          coef      std err       z      P>|z|     [0.025     0.975] \n",
       "                                                                     \n",
       "const      1.9870      0.030     66.526     0.0      1.928      2.046\n",
       "y.L1       0.7968      0.003    300.382     0.0      0.792      0.802\n",
       "x1         3.0263      0.014    217.034     0.0      2.999      3.054"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autoreg_alt_exog_res = AutoReg(y, 1, exog=x, trend=\"c\").fit()\n",
    "print_params(autoreg_alt_exog_res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a51863e-6799-402b-96a2-b1212ea86216",
   "metadata": {},
   "source": [
    "## Reconstructing residuals, fitted values and forecasts in `SARIMAX` and `ARIMA`\n",
    "\n",
    "In models that contain only autoregressive terms, trends and exogenous variables, fitted values and forecasts can be easily reconstructed once the maximum lag length in the model has been reached.  In practice, this means after $(P+D)s+p+d$ periods. Earlier predictions and residuals are harder to reconstruct since the model builds the best prediction for $Y_t|Y_{t-1},Y_{t-2},...$.  When the number of lags of $Y$ is less than the autoregressive order, then the expression for the optimal prediction differs from the model.  For example, when predicting the very first value, $Y_1$, there is no information available from the history of $Y$, and so the best prediction is the unconditional mean. In the case of an AR(1), the second prediction will follow the model, so that when using `ARIMA`, the prediction is\n",
    "\n",
    "$$\n",
    "Y_2 = \\hat{\\delta} + \\hat{\\rho} \\left(Y_1 - \\hat{\\delta}\\right)\n",
    "$$\n",
    "\n",
    "since `ARIMA` treats both exogenous and trend terms as regression with ARMA errors.\n",
    "\n",
    "This can be seen in the next set of cells."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0c17c510-0e76-41a2-a6a0-4ac9fa705136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:39.514263Z",
     "iopub.status.busy": "2024-05-25T05:25:39.513230Z",
     "iopub.status.idle": "2024-05-25T05:25:40.123665Z",
     "shell.execute_reply": "2024-05-25T05:25:40.123018Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coef</th>\n",
       "      <th>std err</th>\n",
       "      <th>z</th>\n",
       "      <th>P&gt;|z|</th>\n",
       "      <th>[0.025</th>\n",
       "      <th>0.975]</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>const</th>\n",
       "      <td>9.9346</td>\n",
       "      <td>0.222</td>\n",
       "      <td>44.667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.499</td>\n",
       "      <td>10.371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ar.L1</th>\n",
       "      <td>0.7957</td>\n",
       "      <td>0.009</td>\n",
       "      <td>92.515</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.779</td>\n",
       "      <td>0.813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sigma2</th>\n",
       "      <td>10.3015</td>\n",
       "      <td>0.204</td>\n",
       "      <td>50.496</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.902</td>\n",
       "      <td>10.701</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           coef      std err       z      P>|z|     [0.025     0.975] \n",
       "                                                                      \n",
       "const       9.9346      0.222     44.667     0.0      9.499     10.371\n",
       "ar.L1       0.7957      0.009     92.515     0.0      0.779      0.813\n",
       "sigma2     10.3015      0.204     50.496     0.0      9.902     10.701"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arima_res = ARIMA(y, order=(1, 0, 0), trend=\"c\").fit()\n",
    "print_params(arima_res.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7198b7b8-e564-4284-8d68-7b4b7a3fd914",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:40.127955Z",
     "iopub.status.busy": "2024-05-25T05:25:40.126868Z",
     "iopub.status.idle": "2024-05-25T05:25:40.143595Z",
     "shell.execute_reply": "2024-05-25T05:25:40.143008Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9.93458658, 10.91088035, 11.80415747])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arima_res.predict(0, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d887b51b-f689-4dd1-874c-5bc95010bdd8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:40.147551Z",
     "iopub.status.busy": "2024-05-25T05:25:40.146491Z",
     "iopub.status.idle": "2024-05-25T05:25:40.153501Z",
     "shell.execute_reply": "2024-05-25T05:25:40.152932Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.910880346250012"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delta_hat, rho_hat = arima_res.params[:2]\n",
    "delta_hat + rho_hat * (y[0] - delta_hat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "646b941f-5f5b-40c4-be15-a7a1f54af5af",
   "metadata": {},
   "source": [
    "`SARIMAX` treats trend terms differently, and so the one-step forecast from a model estimated using `SARIMAX` is\n",
    "\n",
    "$$\n",
    "Y_2 = \\hat\\delta + \\hat\\rho Y_1\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "76e37005-93f3-4b5b-8a63-de67f7f1f8a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:40.156571Z",
     "iopub.status.busy": "2024-05-25T05:25:40.156348Z",
     "iopub.status.idle": "2024-05-25T05:25:40.797620Z",
     "shell.execute_reply": "2024-05-25T05:25:40.796850Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RUNNING THE L-BFGS-B CODE\n",
      "\n",
      "           * * *\n",
      "\n",
      "Machine precision = 2.220D-16\n",
      " N =            3     M =           10\n",
      "\n",
      "At X0         0 variables are exactly at the bounds\n",
      "\n",
      "At iterate    0    f=  2.58518D+00    |proj g|=  5.99456D-05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " This problem is unconstrained.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "           * * *\n",
      "\n",
      "Tit   = total number of iterations\n",
      "Tnf   = total number of function evaluations\n",
      "Tnint = total number of segments explored during Cauchy searches\n",
      "Skip  = number of BFGS updates skipped\n",
      "Nact  = number of active bounds at final generalized Cauchy point\n",
      "Projg = norm of the final projected gradient\n",
      "F     = final function value\n",
      "\n",
      "           * * *\n",
      "\n",
      "   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n",
      "    3      3      5      1     0     0   3.347D-05   2.585D+00\n",
      "  F =   2.5851830060985752     \n",
      "\n",
      "CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coef</th>\n",
       "      <th>std err</th>\n",
       "      <th>z</th>\n",
       "      <th>P&gt;|z|</th>\n",
       "      <th>[0.025</th>\n",
       "      <th>0.975]</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>intercept</th>\n",
       "      <td>2.0283</td>\n",
       "      <td>0.097</td>\n",
       "      <td>20.841</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.838</td>\n",
       "      <td>2.219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ar.L1</th>\n",
       "      <td>0.7959</td>\n",
       "      <td>0.009</td>\n",
       "      <td>92.536</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.779</td>\n",
       "      <td>0.813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sigma2</th>\n",
       "      <td>10.3007</td>\n",
       "      <td>0.204</td>\n",
       "      <td>50.500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.901</td>\n",
       "      <td>10.700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              coef      std err       z      P>|z|     [0.025     0.975] \n",
       "                                                                         \n",
       "intercept      2.0283      0.097     20.841     0.0      1.838      2.219\n",
       "ar.L1          0.7959      0.009     92.536     0.0      0.779      0.813\n",
       "sigma2        10.3007      0.204     50.500     0.0      9.901     10.700"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sarima_res = SARIMAX(y, order=(1, 0, 0), trend=\"c\").fit()\n",
    "print_params(sarima_res.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "35546219-1730-41ed-be61-06e8fc7487b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:40.800832Z",
     "iopub.status.busy": "2024-05-25T05:25:40.800571Z",
     "iopub.status.idle": "2024-05-25T05:25:40.806456Z",
     "shell.execute_reply": "2024-05-25T05:25:40.805706Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9.93588659, 10.91128867, 11.80469658])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sarima_res.predict(0, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "52620a07-ab3c-4a9c-b1b2-b6976ed335bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:40.809464Z",
     "iopub.status.busy": "2024-05-25T05:25:40.809028Z",
     "iopub.status.idle": "2024-05-25T05:25:40.823621Z",
     "shell.execute_reply": "2024-05-25T05:25:40.823011Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.911288670367867"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delta_hat, rho_hat = sarima_res.params[:2]\n",
    "delta_hat + rho_hat * y[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71873544-677a-4061-87ed-76c095cc37f0",
   "metadata": {},
   "source": [
    "### Prediction with MA components\n",
    "\n",
    "When a model contains a MA component, the prediction is more complicated since errors are never directly observable.  The prediction is still $Y_t|Y_{t-1},Y_{t-2},...$, and when the MA component is invertible, then the optimal prediction can be represented as a $t$-lag AR process. When $t$ is large, this should be very close to the prediction as if the errors were observable. For short lags, this can differ markedly.\n",
    "\n",
    "In the next cell we simulate an MA(1) process, and fit an MA model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c4db1fb2-135e-43cf-a55f-852698ca9540",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:40.826938Z",
     "iopub.status.busy": "2024-05-25T05:25:40.826515Z",
     "iopub.status.idle": "2024-05-25T05:25:44.890954Z",
     "shell.execute_reply": "2024-05-25T05:25:44.890314Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coef</th>\n",
       "      <th>std err</th>\n",
       "      <th>z</th>\n",
       "      <th>P&gt;|z|</th>\n",
       "      <th>[0.025</th>\n",
       "      <th>0.975]</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>const</th>\n",
       "      <td>9.9185</td>\n",
       "      <td>0.025</td>\n",
       "      <td>391.129</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.869</td>\n",
       "      <td>9.968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ma.L1</th>\n",
       "      <td>0.8025</td>\n",
       "      <td>0.009</td>\n",
       "      <td>93.864</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.786</td>\n",
       "      <td>0.819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sigma2</th>\n",
       "      <td>0.9904</td>\n",
       "      <td>0.020</td>\n",
       "      <td>49.925</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.951</td>\n",
       "      <td>1.029</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           coef      std err       z      P>|z|     [0.025     0.975] \n",
       "                                                                      \n",
       "const       9.9185      0.025    391.129     0.0      9.869      9.968\n",
       "ma.L1       0.8025      0.009     93.864     0.0      0.786      0.819\n",
       "sigma2      0.9904      0.020     49.925     0.0      0.951      1.029"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rho = 0.8\n",
    "beta = 10\n",
    "epsilon = eta.copy()\n",
    "for i in range(1, eta.shape[0]):\n",
    "    epsilon[i] = rho * eta[i - 1] + eta[i]\n",
    "y = beta + epsilon\n",
    "y = y[200:]\n",
    "\n",
    "ma_res = ARIMA(y, order=(0, 0, 1), trend=\"c\").fit()\n",
    "print_params(ma_res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21826604-ee43-47c1-82e5-cd2b6728a36c",
   "metadata": {},
   "source": [
    "We start by looking at predictions near the beginning of the sample corresponding `y[1]`, ..., `y[5]`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ed868e49-e12e-44fd-bf09-37b1b33cf3f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:44.894326Z",
     "iopub.status.busy": "2024-05-25T05:25:44.894093Z",
     "iopub.status.idle": "2024-05-25T05:25:44.901211Z",
     "shell.execute_reply": "2024-05-25T05:25:44.900595Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 8.57011015,  9.19907188,  8.96971353,  9.78987115, 11.11984478])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ma_res.predict(1, 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e2c410e-c03f-45bd-957d-272f71dd49e7",
   "metadata": {},
   "source": [
    "and the corresponding residuals that are needed to produce the \"direct\" forecasts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8356c92c-6686-41e0-93fc-3f5c0983fd89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:44.905076Z",
     "iopub.status.busy": "2024-05-25T05:25:44.903898Z",
     "iopub.status.idle": "2024-05-25T05:25:44.919582Z",
     "shell.execute_reply": "2024-05-25T05:25:44.919008Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-2.7621904 , -1.12255005, -1.33557621, -0.17206944,  1.5634041 ])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ma_res.resid[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9092d6a2-2de2-46f2-9965-6ecc471d7661",
   "metadata": {},
   "source": [
    "Using the model parameters, we can produce the \"direct\" forecasts using the MA(1) specification\n",
    "\n",
    "$$\n",
    "\\hat Y_t = \\hat\\delta + \\hat\\rho \\hat\\epsilon_{t-1}\n",
    "$$\n",
    "\n",
    "We see that these are not especially close to the actual model predictions for the initial forecasts, but that the gap quickly reduces."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ea2373ad-533f-44b9-9597-7a34a1eeb4be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:44.922690Z",
     "iopub.status.busy": "2024-05-25T05:25:44.922276Z",
     "iopub.status.idle": "2024-05-25T05:25:44.929232Z",
     "shell.execute_reply": "2024-05-25T05:25:44.928649Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7.70168405,  9.01756049,  8.84659855,  9.7803589 , 11.17314527])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delta_hat, rho_hat = ma_res.params[:2]\n",
    "direct = delta_hat + rho_hat * ma_res.resid[:5]\n",
    "direct"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eab3797d-d51e-41af-b452-6a64deb9bc9c",
   "metadata": {},
   "source": [
    "The difference is nearly a standard deviation for the first but declines as the index increases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e469678d-2791-4344-ac0d-00e0937db050",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:44.932139Z",
     "iopub.status.busy": "2024-05-25T05:25:44.931925Z",
     "iopub.status.idle": "2024-05-25T05:25:44.938608Z",
     "shell.execute_reply": "2024-05-25T05:25:44.938047Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.8684261 ,  0.18151139,  0.12311499,  0.00951225, -0.05330049])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ma_res.predict(1, 5) - direct"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b45bf944-392a-432f-a89a-4d0d9c19f30d",
   "metadata": {},
   "source": [
    "We next look at the end of the sample and the final three predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c5e38740-78fb-450c-a20a-2ce04f7bff9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:44.941596Z",
     "iopub.status.busy": "2024-05-25T05:25:44.941192Z",
     "iopub.status.idle": "2024-05-25T05:25:44.951684Z",
     "shell.execute_reply": "2024-05-25T05:25:44.951085Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9.79692804, 10.51272714, 10.55855562])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t = y.shape[0]\n",
    "ma_res.predict(t - 3, t - 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "77418292-c7f0-4a0a-9ef0-050d4350aa51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:44.954704Z",
     "iopub.status.busy": "2024-05-25T05:25:44.954301Z",
     "iopub.status.idle": "2024-05-25T05:25:44.960881Z",
     "shell.execute_reply": "2024-05-25T05:25:44.960312Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.15142355,  0.74049384,  0.79759816])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ma_res.resid[-4:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e8d6e6ed-9575-46ed-a8f0-02e376ee3db9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:44.963843Z",
     "iopub.status.busy": "2024-05-25T05:25:44.963437Z",
     "iopub.status.idle": "2024-05-25T05:25:44.983584Z",
     "shell.execute_reply": "2024-05-25T05:25:44.983008Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9.79692804, 10.51272714, 10.55855562])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "direct = delta_hat + rho_hat * ma_res.resid[-4:-1]\n",
    "direct"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c64c4b6-3062-403d-90e8-2bbfd8923ae7",
   "metadata": {},
   "source": [
    "The \"direct\" forecasts are identical. This happens since the effect of the short sample has disappeared by the end of the sample (In practice it is negligible by observations 100 or so, and numerically absent by around observation 160)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0b61fde0-17fb-4678-9267-c624c49ee26e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:44.986565Z",
     "iopub.status.busy": "2024-05-25T05:25:44.986159Z",
     "iopub.status.idle": "2024-05-25T05:25:44.993179Z",
     "shell.execute_reply": "2024-05-25T05:25:44.992606Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0.])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ma_res.predict(t - 3, t - 1) - direct"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e7a2a2d-e7db-4b4a-8fb9-408ff21256d3",
   "metadata": {},
   "source": [
    "The same principle applies in more complicated model that include multiple lags or seasonal term - predictions in AR models are simple once the effective lag length has been reached, while predictions in models that contains MA components are only simple once the maximum root of the MA lag polynomial is sufficiently small so that the residuals are close to the true residuals. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c2e2caa-bd34-4f9c-8272-e8fcb389ef03",
   "metadata": {},
   "source": [
    "### Prediction differences in `SARIMAX` and `ARIMA`\n",
    "\n",
    "The formulas used to make predictions from `SARIMAX` and `ARIMA` models differ in one key aspect - `ARIMA` treats all trend terms, e.g, the intercept or time trend, as part of the exogenous regressors.  For example, an AR(1) model with an intercept and linear time trend estimated using `ARIMA` has the specification\n",
    "\n",
    "$$\n",
    "\\begin{align*}\n",
    "Y_t - \\delta_0 - \\delta_1 t & = \\epsilon_t \\\\\n",
    "\\epsilon_t & = \\rho \\epsilon_{t-1} + \\eta_t\n",
    "\\end{align*}\n",
    "$$\n",
    "\n",
    "When the same model is estimated using `SARIMAX`, the specification is \n",
    "\n",
    "$$\n",
    "\\begin{align*}\n",
    "Y_t & = \\epsilon_t \\\\\n",
    "\\epsilon_t & =  \\delta_0 + \\delta_1 t  + \\rho \\epsilon_{t-1} + \\eta_t\n",
    "\\end{align*}\n",
    "$$\n",
    "\n",
    "The differences are more apparent when the model contains exogenous regressors, $X_t$.  The `ARIMA` specification is\n",
    "\n",
    "$$\n",
    "\\begin{align*}\n",
    "Y_t - \\delta_0 - \\delta_1 t - X_t \\beta & = \\epsilon_t \\\\\n",
    "\\epsilon_t & = \\rho \\epsilon_{t-1} + \\eta_t \\\\\n",
    "           & = \\rho \\left(Y_{t-1} - \\delta_0 - \\delta_1 (t-1) - X_{t-1} \\beta\\right) + \\eta_t\n",
    "\\end{align*}\n",
    "$$\n",
    "\n",
    "while the `SARIMAX` specification is \n",
    "\n",
    "$$\n",
    "\\begin{align*}\n",
    "Y_t & =  X_t \\beta + \\epsilon_t \\\\\n",
    "\\epsilon_t & =  \\delta_0 + \\delta_1 t  + \\rho \\epsilon_{t-1} + \\eta_t \\\\\n",
    "           & = \\delta_0 + \\delta_1 t  + \\rho \\left(Y_{t-1} - X_{t-1}\\beta\\right) + \\eta_t\n",
    "\\end{align*}\n",
    "$$\n",
    "\n",
    "The key difference between these two is that the intercept and the trend are effectively equivalent to exogenous regressions in `ARIMA` while they are more like standard ARMA terms in `SARIMAX`.\n",
    "\n",
    "The next cell simulates an ARX with a time trend using the specification in `ARIMA` and estimates the parameters using both estimators."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f9e9004b-35c0-4005-8520-358e2462514b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:44.996242Z",
     "iopub.status.busy": "2024-05-25T05:25:44.995828Z",
     "iopub.status.idle": "2024-05-25T05:25:45.014524Z",
     "shell.execute_reply": "2024-05-25T05:25:45.013959Z"
    }
   },
   "outputs": [],
   "source": [
    "rho = 0.8\n",
    "beta = 2\n",
    "delta0 = 10\n",
    "delta1 = 0.5\n",
    "epsilon = eta.copy()\n",
    "for i in range(1, eta.shape[0]):\n",
    "    epsilon[i] = rho * epsilon[i - 1] + eta[i]\n",
    "t = np.arange(epsilon.shape[0])\n",
    "y = delta0 + delta1 * t + beta * full_x + epsilon\n",
    "y = y[200:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c9a06c47-d73e-486b-9d36-0c27029e2920",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:25:45.017474Z",
     "iopub.status.busy": "2024-05-25T05:25:45.017258Z",
     "iopub.status.idle": "2024-05-25T05:26:01.968880Z",
     "shell.execute_reply": "2024-05-25T05:26:01.968158Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/scipy/optimize/_optimize.py:1292: OptimizeWarning: Desired error not necessarily achieved due to precision loss.\n",
      "  res = _minimize_bfgs(f, x0, args, fprime, callback=callback, **opts)\n",
      "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Current function value: 1.413691\n",
      "         Iterations: 43\n",
      "         Function evaluations: 72\n",
      "         Gradient evaluations: 62\n"
     ]
    }
   ],
   "source": [
    "start = np.array([110, delta1, beta, rho, 1])\n",
    "arx_res = ARIMA(y, exog=x, order=(1, 0, 0), trend=\"ct\").fit()\n",
    "mod = SARIMAX(y, exog=x, order=(1, 0, 0), trend=\"ct\")\n",
    "start[:2] *= 1 - rho\n",
    "sarimax_res = mod.fit(start_params=start, method=\"bfgs\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff71109f-b71a-4a45-9068-8a73969d4892",
   "metadata": {},
   "source": [
    "The two estimators fit similarly, although there is a small difference in the log-likelihood.  This is a numerical issue and should not materially affect the predictions. Importantly the two trend parameters, `const` and `x1` (unfortunately named for the time trend), differ between the two.  The other parameters are effectively identical."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "84ffc296-0c6c-4052-98db-b6c9420e9a92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:01.972326Z",
     "iopub.status.busy": "2024-05-25T05:26:01.971860Z",
     "iopub.status.idle": "2024-05-25T05:26:02.011384Z",
     "shell.execute_reply": "2024-05-25T05:26:02.010650Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   No. Observations:                 5000\n",
      "Model:                 ARIMA(1, 0, 0)   Log Likelihood               -7069.171\n",
      "Date:                Sat, 25 May 2024   AIC                          14148.343\n",
      "Time:                        05:26:01   BIC                          14180.928\n",
      "Sample:                             0   HQIC                         14159.763\n",
      "                               - 5000                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        109.2112      0.137    796.186      0.000     108.942     109.480\n",
      "x1             0.5000   4.78e-05   1.05e+04      0.000       0.500       0.500\n",
      "x2             2.0495      0.011    187.517      0.000       2.028       2.071\n",
      "ar.L1          0.7965      0.009     93.669      0.000       0.780       0.813\n",
      "sigma2         0.9897      0.020     49.854      0.000       0.951       1.029\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   0.33   Jarque-Bera (JB):                 0.15\n",
      "Prob(Q):                              0.57   Prob(JB):                         0.93\n",
      "Heteroskedasticity (H):               0.97   Skew:                            -0.01\n",
      "Prob(H) (two-sided):                  0.53   Kurtosis:                         3.00\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "print(arx_res.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b158f625-0d67-4fed-bd0e-fae961395b69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:02.020970Z",
     "iopub.status.busy": "2024-05-25T05:26:02.019401Z",
     "iopub.status.idle": "2024-05-25T05:26:02.084480Z",
     "shell.execute_reply": "2024-05-25T05:26:02.083835Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   No. Observations:                 5000\n",
      "Model:               SARIMAX(1, 0, 0)   Log Likelihood               -7068.457\n",
      "Date:                Sat, 25 May 2024   AIC                          14146.914\n",
      "Time:                        05:26:02   BIC                          14179.500\n",
      "Sample:                             0   HQIC                         14158.335\n",
      "                               - 5000                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "intercept     22.7438      0.929     24.481      0.000      20.923      24.565\n",
      "drift          0.1019      0.004     23.985      0.000       0.094       0.110\n",
      "x1             2.0230      0.011    185.290      0.000       2.002       2.044\n",
      "ar.L1          0.7963      0.008     93.745      0.000       0.780       0.813\n",
      "sigma2         0.9894      0.020     49.899      0.000       0.951       1.028\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   0.47   Jarque-Bera (JB):                 0.13\n",
      "Prob(Q):                              0.49   Prob(JB):                         0.94\n",
      "Heteroskedasticity (H):               0.97   Skew:                            -0.01\n",
      "Prob(H) (two-sided):                  0.47   Kurtosis:                         3.00\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "print(sarimax_res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6b2a9e4-3796-44f1-9476-bf2da357d8b3",
   "metadata": {},
   "source": [
    "## Initial residuals `SARIMAX` and `ARIMA`\n",
    "\n",
    "Residuals for observations before the maximal model order, which depends on the AR, MA, Seasonal AR, Seasonal MA and differencing parameters, are not reliable and should not be used for performance assessment. In general, in an ARIMA with orders $(p,d,q)\\times(P,D,Q,s)$, the formula for residuals that are less well behaved is:\n",
    "\n",
    "$$\n",
    "\\max((P+D)s+p+d,Qs+q)\n",
    "$$\n",
    "\n",
    "We can simulate some data from an ARIMA(1,0,0)(1,0,0,12) and examine the residuals."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "43f9387d-b431-4079-b98a-2a76f7e9595a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:02.088860Z",
     "iopub.status.busy": "2024-05-25T05:26:02.087793Z",
     "iopub.status.idle": "2024-05-25T05:26:02.128629Z",
     "shell.execute_reply": "2024-05-25T05:26:02.127875Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "rho = 0.8\n",
    "psi = -0.6\n",
    "beta = 20\n",
    "epsilon = eta.copy()\n",
    "for i in range(13, eta.shape[0]):\n",
    "    epsilon[i] = (\n",
    "        rho * epsilon[i - 1]\n",
    "        + psi * epsilon[i - 12]\n",
    "        - (rho * psi) * epsilon[i - 13]\n",
    "        + eta[i]\n",
    "    )\n",
    "y = beta + epsilon\n",
    "y = y[200:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8f3e2ca-8022-4940-b1a9-ed5d245c73c7",
   "metadata": {},
   "source": [
    "With a large sample, the parameter estimates are very close to the DGP parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3bcefc73-cfc4-4ae0-9af0-f55aa83bee99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:02.131829Z",
     "iopub.status.busy": "2024-05-25T05:26:02.131536Z",
     "iopub.status.idle": "2024-05-25T05:26:11.550678Z",
     "shell.execute_reply": "2024-05-25T05:26:11.550019Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                    SARIMAX Results                                     \n",
      "========================================================================================\n",
      "Dep. Variable:                                y   No. Observations:                 5000\n",
      "Model:             ARIMA(1, 0, 0)x(1, 0, 0, 12)   Log Likelihood               -7076.266\n",
      "Date:                          Sat, 25 May 2024   AIC                          14160.532\n",
      "Time:                                  05:26:11   BIC                          14186.600\n",
      "Sample:                                       0   HQIC                         14169.668\n",
      "                                         - 5000                                         \n",
      "Covariance Type:                            opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         19.8586      0.043    458.609      0.000      19.774      19.943\n",
      "ar.L1          0.7972      0.008     93.925      0.000       0.781       0.814\n",
      "ar.S.L12      -0.6044      0.011    -53.280      0.000      -0.627      -0.582\n",
      "sigma2         0.9914      0.020     49.899      0.000       0.952       1.030\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   0.50   Jarque-Bera (JB):                 0.11\n",
      "Prob(Q):                              0.48   Prob(JB):                         0.95\n",
      "Heteroskedasticity (H):               0.96   Skew:                            -0.01\n",
      "Prob(H) (two-sided):                  0.40   Kurtosis:                         2.99\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "res = ARIMA(y, order=(1, 0, 0), trend=\"c\", seasonal_order=(1, 0, 0, 12)).fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0eafd7c5-a796-40a1-b460-9a9163686c3b",
   "metadata": {},
   "source": [
    "We can first examine the initial 13 residuals by plotting against the actual shocks in the model.  While there is a correspondence, it is fairly weak and the correlation is much less than 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "9cc7fe30-4e40-468a-930e-14bf0aa0d929",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:11.555153Z",
     "iopub.status.busy": "2024-05-25T05:26:11.554032Z",
     "iopub.status.idle": "2024-05-25T05:26:12.085970Z",
     "shell.execute_reply": "2024-05-25T05:26:12.085318Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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853vzO/93u912n7jxo2ZMmVKtm/fnjVr1uTyyy8/4tkOHDiQl156KXV1dampqemyvv0aqxdeeMEpgRwx3xtK+N5QwveGEr43lDgevjdtbW3ZtWtX3vGOd2TAgMPfx69iR6g2btyYq666Kq2trZk8eXK+/vWvd9lmzJgxmT17dsfrF198Meecc05Gjx6drVu3dix/8MEH85d/+Ze5/PLLM3r06AwZMiTPP/98Hnnkkezbty/z5s3rUUwlyYABA3L66ae/6Xb19fXH7BeHo8f3hhK+N5TwvaGE7w0ljvXvzZsdmWpXsaDavn17x131HnzwwW63mTRpUqegOpQpU6bk5z//eZ599tn88Ic/zKuvvprhw4dnxowZue2223r8PCsAAIASFQuqyZMnH9FFXW80ZsyYbt8zadKkTJo0qbdGAwAAKFL1B/v2F4MHD878+fMzePDgao9CP+J7QwnfG0r43lDC94YSvjedVfSmFAAAAMcSR6gAAAAKCSoAAIBCggoAAKCQoAIAACgkqAAAAAoJqgJf+9rXctVVV+XMM89MXV1dhg4dmnPPPTf/+T//57z44ovVHo8+aN++fVm2bFluvPHGnHPOORk6dGjq6upy8cUXZ9GiRdm/f3+1R6SPeu6553LHHXdk2rRpOfXUU1NTU5PJkydXeyz6kGeeeSYzZszISSedlCFDhuSSSy7JQw89VO2x6MOWLl2aW265JRdeeGEGDx6cmpqa3H///dUeiz7sxRdfzF/91V9l6tSpeec735kTTzwxI0eOzNVXX52nn3662uNVndumF5g5c2Y2bdqU9773vWlsbExbW1uee+65rFq1Kg0NDXniiSdy7rnnVntM+pCNGzd2hNSVV16Zs88+O83NzVm+fHleeumlfPCDH8y3v/3t1NTUVHtU+pg777wzCxYsyIknnph3vetdWb9+fSZNmpTVq1dXezT6gFWrVmXatGmpra3NrFmzUldXl2XLlmXbtm255557Mnfu3GqPSB80ZsyYbNu2LcOHD8+QIUOybdu2fPnLX87s2bOrPRp91Gc+85ncfffdOfPMMzN58uSceuqp2bRpUx5++OG0tbXlgQceyHXXXVftMatGUBXYu3dvamtruyz/3//7f+fmm2/ONddck//zf/5PFSajr3rxxRfzrW99KzfeeGOGDBnSsXzPnj2ZPHlyfvzjH+ehhx7K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",
      "text/plain": [
       "<Figure size 1000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.rc(\"figure\", figsize=(10, 10))\n",
    "plt.rc(\"font\", size=14)\n",
    "\n",
    "_ = plt.scatter(res.resid[:13], eta[200 : 200 + 13])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1af117bd-a51c-496a-bf1d-0c08a88a8101",
   "metadata": {},
   "source": [
    "Looking at the next 24 residuals and shocks, we see there is nearly perfect correlation. This is expected in large samples once the less accurate residuals are ignored."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "12b89d33-1cf2-435a-9dc8-ef04d2d6f8ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:12.095240Z",
     "iopub.status.busy": "2024-05-25T05:26:12.089819Z",
     "iopub.status.idle": "2024-05-25T05:26:12.743813Z",
     "shell.execute_reply": "2024-05-25T05:26:12.743014Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "_ = plt.scatter(res.resid[13:37], eta[200 + 13 : 200 + 37])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4a381b2-fcc4-44ee-901c-109cdc02a1f1",
   "metadata": {},
   "source": [
    "Next, we simulate an ARIMA(1,1,0), and include a time trend."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "790f834c-8b13-4475-9a09-aea19ace79fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:12.747201Z",
     "iopub.status.busy": "2024-05-25T05:26:12.746864Z",
     "iopub.status.idle": "2024-05-25T05:26:12.774255Z",
     "shell.execute_reply": "2024-05-25T05:26:12.773652Z"
    }
   },
   "outputs": [],
   "source": [
    "rng = np.random.default_rng(20210819)\n",
    "eta = rng.standard_normal(5200)\n",
    "rho = 0.8\n",
    "beta = 20\n",
    "epsilon = eta.copy()\n",
    "for i in range(2, eta.shape[0]):\n",
    "    epsilon[i] = (1 + rho) * epsilon[i - 1] - rho * epsilon[i - 2] + eta[i]\n",
    "t = np.arange(epsilon.shape[0])\n",
    "y = beta + 2 * t + epsilon\n",
    "y = y[200:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5521dfb2-3bcc-4a28-b2df-f92e95fe4259",
   "metadata": {},
   "source": [
    "Again the parameter estimates are very close to the DGP parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3d56ebbb-2143-4582-8409-df1c9026a3df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:12.779166Z",
     "iopub.status.busy": "2024-05-25T05:26:12.777690Z",
     "iopub.status.idle": "2024-05-25T05:26:13.492837Z",
     "shell.execute_reply": "2024-05-25T05:26:13.492198Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   No. Observations:                 5000\n",
      "Model:                 ARIMA(1, 1, 0)   Log Likelihood               -7067.739\n",
      "Date:                Sat, 25 May 2024   AIC                          14141.479\n",
      "Time:                        05:26:13   BIC                          14161.030\n",
      "Sample:                             0   HQIC                         14148.331\n",
      "                               - 5000                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "x1             1.7747      0.069     25.642      0.000       1.639       1.910\n",
      "ar.L1          0.7968      0.009     93.658      0.000       0.780       0.813\n",
      "sigma2         0.9896      0.020     49.908      0.000       0.951       1.028\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   0.43   Jarque-Bera (JB):                 0.09\n",
      "Prob(Q):                              0.51   Prob(JB):                         0.96\n",
      "Heteroskedasticity (H):               0.97   Skew:                            -0.01\n",
      "Prob(H) (two-sided):                  0.47   Kurtosis:                         2.99\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "res = ARIMA(y, order=(1, 1, 0), trend=\"t\").fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9626a1d-b742-4a48-b2e5-e10be84e01c7",
   "metadata": {},
   "source": [
    "The residuals are not accurate, and the first residual is approximately 500.  The others are closer, although in this model the first 2 should usually be ignored."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "48a1b52b-6506-4e8d-aad5-4d8f80c65f79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:13.498315Z",
     "iopub.status.busy": "2024-05-25T05:26:13.496687Z",
     "iopub.status.idle": "2024-05-25T05:26:13.513133Z",
     "shell.execute_reply": "2024-05-25T05:26:13.512550Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5.08403002e+02, -1.58904197e+00, -1.54902446e+00,  1.04992617e-01,\n",
       "        1.33644383e+00])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.resid[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "138445dd-e028-4e29-958f-6ab9f4efe674",
   "metadata": {},
   "source": [
    "The reason why the first residual is so large is that the optimal prediction of this value is the mean of the difference, which is 1.77.  Once the first value is known, the second value makes use of the first value in its prediction and the prediction is substantially closer to the truth."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "11088c2a-9d7e-4d88-ac26-48a5b5df6867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:13.517866Z",
     "iopub.status.busy": "2024-05-25T05:26:13.516422Z",
     "iopub.status.idle": "2024-05-25T05:26:13.526480Z",
     "shell.execute_reply": "2024-05-25T05:26:13.525899Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  1.77472562, 511.95355128, 510.87392196, 508.85708934,\n",
       "       509.03356182, 511.85245439])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.predict(0, 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf626404-fbd8-42ab-b6b2-5ffcad3e7b51",
   "metadata": {},
   "source": [
    "It is worth noting that the results class contains two parameters than can be helpful in understanding which residuals are problematic, `loglikelihood_burn` and `nobs_diffuse`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "947f58ee-44bb-45d6-88c9-6757b0be1481",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-25T05:26:13.531258Z",
     "iopub.status.busy": "2024-05-25T05:26:13.529807Z",
     "iopub.status.idle": "2024-05-25T05:26:13.543220Z",
     "shell.execute_reply": "2024-05-25T05:26:13.542598Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 0)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.loglikelihood_burn, res.nobs_diffuse"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
