{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "75c277ac",
   "metadata": {},
   "source": [
    "## Multivariate Linear Model - MultivariateLS\n",
    "\n",
    "This notebooks illustrates some features for the multivariate linear model estimated by least squares. \n",
    "The example is based on the UCLA stats example in https://stats.oarc.ucla.edu/stata/dae/multivariate-regression-analysis/ .\n",
    "\n",
    "The model assumes that a multivariate dependent variable depends linearly on the same set of explanatory variables.\n",
    "\n",
    "Y = X * B + u\n",
    "\n",
    "where  \n",
    "- the dependent variable (endog) `Y` has shape (nobs, k_endog),  \n",
    "- the matrix of explanatory variables including constant (exog) `X` has shape (nobs, k_exog), and\n",
    "- the parameter matrix `B` has shape (k_exog, k_endog), i.e. coefficients for explanatory variables in rows and dependent variables in columns.\n",
    "- the disturbance term `u` has the same shape as `Y`, (nobs, k_endog), and is assumed to have mean zero and to be uncorrelated with the exog `X`.\n",
    "\n",
    "Estimation is by least squares. The parameter estimates with common explanatory variables for each dependent variables corresponds to separate OLS estimates for each `endog`. The main advantage of the multivariate model is that we can make inference "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e644acb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:09.151518Z",
     "iopub.status.busy": "2025-08-19T16:02:09.151292Z",
     "iopub.status.idle": "2025-08-19T16:02:12.171631Z",
     "shell.execute_reply": "2025-08-19T16:02:12.170968Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "from statsmodels.base.model import LikelihoodModel\n",
    "from statsmodels.regression.linear_model import OLS\n",
    "from statsmodels.multivariate.manova import MANOVA\n",
    "from statsmodels.multivariate.multivariate_ols import MultivariateLS\n",
    "\n",
    "import statsmodels.multivariate.tests.results as path\n",
    "dir_path = os.path.dirname(os.path.abspath(path.__file__))\n",
    "csv_path = os.path.join(dir_path, 'mvreg.csv')\n",
    "data_mvreg = pd.read_csv(csv_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e851e0ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.178560Z",
     "iopub.status.busy": "2025-08-19T16:02:12.178328Z",
     "iopub.status.idle": "2025-08-19T16:02:12.221065Z",
     "shell.execute_reply": "2025-08-19T16:02:12.220446Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>locus_of_control</th>\n",
       "      <th>self_concept</th>\n",
       "      <th>motivation</th>\n",
       "      <th>read</th>\n",
       "      <th>write</th>\n",
       "      <th>science</th>\n",
       "      <th>prog</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.143955</td>\n",
       "      <td>0.722641</td>\n",
       "      <td>0.368973</td>\n",
       "      <td>37.405548</td>\n",
       "      <td>39.032845</td>\n",
       "      <td>33.532822</td>\n",
       "      <td>academic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.504134</td>\n",
       "      <td>0.111364</td>\n",
       "      <td>0.520319</td>\n",
       "      <td>52.760784</td>\n",
       "      <td>51.995041</td>\n",
       "      <td>65.225044</td>\n",
       "      <td>academic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.628546</td>\n",
       "      <td>0.629934</td>\n",
       "      <td>0.436838</td>\n",
       "      <td>59.771915</td>\n",
       "      <td>54.651653</td>\n",
       "      <td>64.604500</td>\n",
       "      <td>academic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.368096</td>\n",
       "      <td>-0.138528</td>\n",
       "      <td>-0.004324</td>\n",
       "      <td>42.854324</td>\n",
       "      <td>41.121357</td>\n",
       "      <td>48.493809</td>\n",
       "      <td>vocational</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.280190</td>\n",
       "      <td>-0.452226</td>\n",
       "      <td>1.256924</td>\n",
       "      <td>54.756279</td>\n",
       "      <td>49.947208</td>\n",
       "      <td>50.381657</td>\n",
       "      <td>academic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   locus_of_control  self_concept  motivation       read      write  \\\n",
       "0         -1.143955      0.722641    0.368973  37.405548  39.032845   \n",
       "1          0.504134      0.111364    0.520319  52.760784  51.995041   \n",
       "2          1.628546      0.629934    0.436838  59.771915  54.651653   \n",
       "3          0.368096     -0.138528   -0.004324  42.854324  41.121357   \n",
       "4         -0.280190     -0.452226    1.256924  54.756279  49.947208   \n",
       "\n",
       "     science        prog  \n",
       "0  33.532822    academic  \n",
       "1  65.225044    academic  \n",
       "2  64.604500    academic  \n",
       "3  48.493809  vocational  \n",
       "4  50.381657    academic  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_mvreg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "68ec2582",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.225551Z",
     "iopub.status.busy": "2025-08-19T16:02:12.225318Z",
     "iopub.status.idle": "2025-08-19T16:02:12.314391Z",
     "shell.execute_reply": "2025-08-19T16:02:12.310964Z"
    }
   },
   "outputs": [],
   "source": [
    "formula = \"locus_of_control + self_concept + motivation ~ read + write + science + prog\"\n",
    "mod = MultivariateLS.from_formula(formula, data=data_mvreg)\n",
    "res = mod.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71687b33",
   "metadata": {},
   "source": [
    "### Multivariate hypothesis tests mv_test\n",
    "\n",
    "The `mv_test` method by default performs the hypothesis tests that each term in the formula has no effect on any of the dependent variables (`endog`). This is the same as the MANOVA test.  \n",
    "Note, MANOVA in statsmodels is implemented as test on coefficients in the multivariate model and is not restricted to categorical variables. In the current example, we have three continuous and one categorical explanatory variables, in addition to the constant.\n",
    "\n",
    "Consequently, using mv_test in MultivariateLS and in MANOVA produces the same results.\n",
    "However. MANOVA only provides the hypothesis tests as feature, while MultivariateLS provide the usual model results.\n",
    "\n",
    "More general versions of the mv_test are for hypothesis in the form `L B M = C`.\n",
    "Here `L` are restrictions corresponding to explanatory variables, `M` are restrictions corresponding to dependent (endog) variables and `C` is a matrix of constants for affine restrictions. See docstrings for details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6cb94da2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.320531Z",
     "iopub.status.busy": "2025-08-19T16:02:12.320297Z",
     "iopub.status.idle": "2025-08-19T16:02:12.422558Z",
     "shell.execute_reply": "2025-08-19T16:02:12.421957Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Num DF</th>\n",
       "      <th>Den DF</th>\n",
       "      <th>F Value</th>\n",
       "      <th>Pr &gt; F</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Effect</th>\n",
       "      <th>Statistic</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Intercept</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.848467</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>35.242876</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.151533</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>35.242876</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.178596</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>35.242876</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.178596</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>35.242876</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">prog</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.891438</td>\n",
       "      <td>6</td>\n",
       "      <td>1184.0</td>\n",
       "      <td>11.670765</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.108649</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1186.0</td>\n",
       "      <td>11.354963</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.121685</td>\n",
       "      <td>6</td>\n",
       "      <td>787.558061</td>\n",
       "      <td>11.996155</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.120878</td>\n",
       "      <td>3</td>\n",
       "      <td>593</td>\n",
       "      <td>23.893456</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">read</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.976425</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>4.764416</td>\n",
       "      <td>0.002727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.023575</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>4.764416</td>\n",
       "      <td>0.002727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.024144</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>4.764416</td>\n",
       "      <td>0.002727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.024144</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>4.764416</td>\n",
       "      <td>0.002727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">write</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.947394</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>10.957338</td>\n",
       "      <td>0.000001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.052606</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>10.957338</td>\n",
       "      <td>0.000001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.055527</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>10.957338</td>\n",
       "      <td>0.000001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.055527</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>10.957338</td>\n",
       "      <td>0.000001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">science</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.983405</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.016595</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.016875</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.016875</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     Value Num DF      Den DF    F Value  \\\n",
       "Effect    Statistic                                                        \n",
       "Intercept Wilks' lambda           0.848467      3       592.0  35.242876   \n",
       "          Pillai's trace          0.151533    3.0       592.0  35.242876   \n",
       "          Hotelling-Lawley trace  0.178596      3       592.0  35.242876   \n",
       "          Roy's greatest root     0.178596      3         592  35.242876   \n",
       "prog      Wilks' lambda           0.891438      6      1184.0  11.670765   \n",
       "          Pillai's trace          0.108649    6.0      1186.0  11.354963   \n",
       "          Hotelling-Lawley trace  0.121685      6  787.558061  11.996155   \n",
       "          Roy's greatest root     0.120878      3         593  23.893456   \n",
       "read      Wilks' lambda           0.976425      3       592.0   4.764416   \n",
       "          Pillai's trace          0.023575    3.0       592.0   4.764416   \n",
       "          Hotelling-Lawley trace  0.024144      3       592.0   4.764416   \n",
       "          Roy's greatest root     0.024144      3         592   4.764416   \n",
       "write     Wilks' lambda           0.947394      3       592.0  10.957338   \n",
       "          Pillai's trace          0.052606    3.0       592.0  10.957338   \n",
       "          Hotelling-Lawley trace  0.055527      3       592.0  10.957338   \n",
       "          Roy's greatest root     0.055527      3         592  10.957338   \n",
       "science   Wilks' lambda           0.983405      3       592.0   3.329911   \n",
       "          Pillai's trace          0.016595    3.0       592.0   3.329911   \n",
       "          Hotelling-Lawley trace  0.016875      3       592.0   3.329911   \n",
       "          Roy's greatest root     0.016875      3         592   3.329911   \n",
       "\n",
       "                                    Pr > F  \n",
       "Effect    Statistic                         \n",
       "Intercept Wilks' lambda                0.0  \n",
       "          Pillai's trace               0.0  \n",
       "          Hotelling-Lawley trace       0.0  \n",
       "          Roy's greatest root          0.0  \n",
       "prog      Wilks' lambda                0.0  \n",
       "          Pillai's trace               0.0  \n",
       "          Hotelling-Lawley trace       0.0  \n",
       "          Roy's greatest root          0.0  \n",
       "read      Wilks' lambda           0.002727  \n",
       "          Pillai's trace          0.002727  \n",
       "          Hotelling-Lawley trace  0.002727  \n",
       "          Roy's greatest root     0.002727  \n",
       "write     Wilks' lambda           0.000001  \n",
       "          Pillai's trace          0.000001  \n",
       "          Hotelling-Lawley trace  0.000001  \n",
       "          Roy's greatest root     0.000001  \n",
       "science   Wilks' lambda           0.019305  \n",
       "          Pillai's trace          0.019305  \n",
       "          Hotelling-Lawley trace  0.019305  \n",
       "          Roy's greatest root     0.019305  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mvt = res.mv_test()\n",
    "mvt.summary_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b999e805",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.429606Z",
     "iopub.status.busy": "2025-08-19T16:02:12.429385Z",
     "iopub.status.idle": "2025-08-19T16:02:12.569618Z",
     "shell.execute_reply": "2025-08-19T16:02:12.568960Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Num DF</th>\n",
       "      <th>Den DF</th>\n",
       "      <th>F Value</th>\n",
       "      <th>Pr &gt; F</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Effect</th>\n",
       "      <th>Statistic</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Intercept</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.848467</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>35.242876</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.151533</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>35.242876</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.178596</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>35.242876</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.178596</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>35.242876</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">prog</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.891438</td>\n",
       "      <td>6</td>\n",
       "      <td>1184.0</td>\n",
       "      <td>11.670765</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.108649</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1186.0</td>\n",
       "      <td>11.354963</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.121685</td>\n",
       "      <td>6</td>\n",
       "      <td>787.558061</td>\n",
       "      <td>11.996155</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.120878</td>\n",
       "      <td>3</td>\n",
       "      <td>593</td>\n",
       "      <td>23.893456</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">read</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.976425</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>4.764416</td>\n",
       "      <td>0.002727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.023575</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>4.764416</td>\n",
       "      <td>0.002727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.024144</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>4.764416</td>\n",
       "      <td>0.002727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.024144</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>4.764416</td>\n",
       "      <td>0.002727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">write</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.947394</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>10.957338</td>\n",
       "      <td>0.000001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.052606</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>10.957338</td>\n",
       "      <td>0.000001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.055527</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>10.957338</td>\n",
       "      <td>0.000001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.055527</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>10.957338</td>\n",
       "      <td>0.000001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">science</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.983405</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.016595</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.016875</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.016875</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     Value Num DF      Den DF    F Value  \\\n",
       "Effect    Statistic                                                        \n",
       "Intercept Wilks' lambda           0.848467      3       592.0  35.242876   \n",
       "          Pillai's trace          0.151533    3.0       592.0  35.242876   \n",
       "          Hotelling-Lawley trace  0.178596      3       592.0  35.242876   \n",
       "          Roy's greatest root     0.178596      3         592  35.242876   \n",
       "prog      Wilks' lambda           0.891438      6      1184.0  11.670765   \n",
       "          Pillai's trace          0.108649    6.0      1186.0  11.354963   \n",
       "          Hotelling-Lawley trace  0.121685      6  787.558061  11.996155   \n",
       "          Roy's greatest root     0.120878      3         593  23.893456   \n",
       "read      Wilks' lambda           0.976425      3       592.0   4.764416   \n",
       "          Pillai's trace          0.023575    3.0       592.0   4.764416   \n",
       "          Hotelling-Lawley trace  0.024144      3       592.0   4.764416   \n",
       "          Roy's greatest root     0.024144      3         592   4.764416   \n",
       "write     Wilks' lambda           0.947394      3       592.0  10.957338   \n",
       "          Pillai's trace          0.052606    3.0       592.0  10.957338   \n",
       "          Hotelling-Lawley trace  0.055527      3       592.0  10.957338   \n",
       "          Roy's greatest root     0.055527      3         592  10.957338   \n",
       "science   Wilks' lambda           0.983405      3       592.0   3.329911   \n",
       "          Pillai's trace          0.016595    3.0       592.0   3.329911   \n",
       "          Hotelling-Lawley trace  0.016875      3       592.0   3.329911   \n",
       "          Roy's greatest root     0.016875      3         592   3.329911   \n",
       "\n",
       "                                    Pr > F  \n",
       "Effect    Statistic                         \n",
       "Intercept Wilks' lambda                0.0  \n",
       "          Pillai's trace               0.0  \n",
       "          Hotelling-Lawley trace       0.0  \n",
       "          Roy's greatest root          0.0  \n",
       "prog      Wilks' lambda                0.0  \n",
       "          Pillai's trace               0.0  \n",
       "          Hotelling-Lawley trace       0.0  \n",
       "          Roy's greatest root          0.0  \n",
       "read      Wilks' lambda           0.002727  \n",
       "          Pillai's trace          0.002727  \n",
       "          Hotelling-Lawley trace  0.002727  \n",
       "          Roy's greatest root     0.002727  \n",
       "write     Wilks' lambda           0.000001  \n",
       "          Pillai's trace          0.000001  \n",
       "          Hotelling-Lawley trace  0.000001  \n",
       "          Roy's greatest root     0.000001  \n",
       "science   Wilks' lambda           0.019305  \n",
       "          Pillai's trace          0.019305  \n",
       "          Hotelling-Lawley trace  0.019305  \n",
       "          Roy's greatest root     0.019305  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "manova = MANOVA.from_formula(formula, data=data_mvreg)\n",
    "manova.mv_test().summary_frame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff1664a9",
   "metadata": {},
   "source": [
    "The core multivariate regression results are displayed by the `summary` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "015cd62b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.577707Z",
     "iopub.status.busy": "2025-08-19T16:02:12.577474Z",
     "iopub.status.idle": "2025-08-19T16:02:12.671713Z",
     "shell.execute_reply": "2025-08-19T16:02:12.670959Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                      MultivariateLS Regression Results                                       \n",
      "==============================================================================================================\n",
      "Dep. Variable:     ['locus_of_control', 'self_concept', 'motivation']   No. Observations:                  600\n",
      "Model:                                                 MultivariateLS   Df Residuals:                      594\n",
      "Method:                                                 Least Squares   Df Model:                           15\n",
      "Date:                                                Tue, 19 Aug 2025                                         \n",
      "Time:                                                        16:02:12                                         \n",
      "======================================================================================\n",
      "  locus_of_control       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept             -1.4970      0.157     -9.505      0.000      -1.806      -1.188\n",
      "prog[T.general]       -0.1278      0.064     -1.998      0.046      -0.253      -0.002\n",
      "prog[T.vocational]     0.1239      0.058      2.150      0.032       0.011       0.237\n",
      "read                   0.0125      0.004      3.363      0.001       0.005       0.020\n",
      "write                  0.0121      0.003      3.581      0.000       0.005       0.019\n",
      "science                0.0058      0.004      1.582      0.114      -0.001       0.013\n",
      "--------------------------------------------------------------------------------------\n",
      "      self_concept       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept             -0.0959      0.179     -0.536      0.592      -0.447       0.255\n",
      "prog[T.general]       -0.2765      0.073     -3.808      0.000      -0.419      -0.134\n",
      "prog[T.vocational]     0.1469      0.065      2.246      0.025       0.018       0.275\n",
      "read                   0.0013      0.004      0.310      0.757      -0.007       0.010\n",
      "write                 -0.0043      0.004     -1.115      0.265      -0.012       0.003\n",
      "science                0.0053      0.004      1.284      0.200      -0.003       0.013\n",
      "--------------------------------------------------------------------------------------\n",
      "        motivation       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept             -0.9505      0.198     -4.811      0.000      -1.339      -0.563\n",
      "prog[T.general]       -0.3603      0.080     -4.492      0.000      -0.518      -0.203\n",
      "prog[T.vocational]     0.2594      0.072      3.589      0.000       0.117       0.401\n",
      "read                   0.0097      0.005      2.074      0.038       0.001       0.019\n",
      "write                  0.0175      0.004      4.122      0.000       0.009       0.026\n",
      "science               -0.0090      0.005     -1.971      0.049      -0.018   -3.13e-05\n",
      "======================================================================================\n"
     ]
    }
   ],
   "source": [
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fb028ed",
   "metadata": {},
   "source": [
    "The the standard results attributes for the parameter estimates like `params`, `bse`, `tvalues` and `pvalues`, are two dimensional arrays or dataframes with explanatory variables (`exog`) in rows and dependend (`endog`) variables in columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d1295b73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.674389Z",
     "iopub.status.busy": "2025-08-19T16:02:12.674152Z",
     "iopub.status.idle": "2025-08-19T16:02:12.705141Z",
     "shell.execute_reply": "2025-08-19T16:02:12.704528Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>-1.496970</td>\n",
       "      <td>-0.095858</td>\n",
       "      <td>-0.950513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prog[T.general]</th>\n",
       "      <td>-0.127795</td>\n",
       "      <td>-0.276483</td>\n",
       "      <td>-0.360329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prog[T.vocational]</th>\n",
       "      <td>0.123875</td>\n",
       "      <td>0.146876</td>\n",
       "      <td>0.259367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>read</th>\n",
       "      <td>0.012505</td>\n",
       "      <td>0.001308</td>\n",
       "      <td>0.009674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>write</th>\n",
       "      <td>0.012145</td>\n",
       "      <td>-0.004293</td>\n",
       "      <td>0.017535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>science</th>\n",
       "      <td>0.005761</td>\n",
       "      <td>0.005306</td>\n",
       "      <td>-0.009001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           0         1         2\n",
       "Intercept          -1.496970 -0.095858 -0.950513\n",
       "prog[T.general]    -0.127795 -0.276483 -0.360329\n",
       "prog[T.vocational]  0.123875  0.146876  0.259367\n",
       "read                0.012505  0.001308  0.009674\n",
       "write               0.012145 -0.004293  0.017535\n",
       "science             0.005761  0.005306 -0.009001"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cbb9042d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.707507Z",
     "iopub.status.busy": "2025-08-19T16:02:12.707288Z",
     "iopub.status.idle": "2025-08-19T16:02:12.723530Z",
     "shell.execute_reply": "2025-08-19T16:02:12.722959Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>0.157499</td>\n",
       "      <td>0.178794</td>\n",
       "      <td>0.197563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prog[T.general]</th>\n",
       "      <td>0.063955</td>\n",
       "      <td>0.072602</td>\n",
       "      <td>0.080224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prog[T.vocational]</th>\n",
       "      <td>0.057607</td>\n",
       "      <td>0.065396</td>\n",
       "      <td>0.072261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>read</th>\n",
       "      <td>0.003718</td>\n",
       "      <td>0.004220</td>\n",
       "      <td>0.004664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>write</th>\n",
       "      <td>0.003391</td>\n",
       "      <td>0.003850</td>\n",
       "      <td>0.004254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>science</th>\n",
       "      <td>0.003641</td>\n",
       "      <td>0.004133</td>\n",
       "      <td>0.004567</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           0         1         2\n",
       "Intercept           0.157499  0.178794  0.197563\n",
       "prog[T.general]     0.063955  0.072602  0.080224\n",
       "prog[T.vocational]  0.057607  0.065396  0.072261\n",
       "read                0.003718  0.004220  0.004664\n",
       "write               0.003391  0.003850  0.004254\n",
       "science             0.003641  0.004133  0.004567"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.bse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b9929394",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.729070Z",
     "iopub.status.busy": "2025-08-19T16:02:12.725714Z",
     "iopub.status.idle": "2025-08-19T16:02:12.746280Z",
     "shell.execute_reply": "2025-08-19T16:02:12.745701Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Intercept</th>\n",
       "      <td>4.887129e-20</td>\n",
       "      <td>0.592066</td>\n",
       "      <td>0.000002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prog[T.general]</th>\n",
       "      <td>4.615006e-02</td>\n",
       "      <td>0.000155</td>\n",
       "      <td>0.000008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prog[T.vocational]</th>\n",
       "      <td>3.193055e-02</td>\n",
       "      <td>0.025075</td>\n",
       "      <td>0.000359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>read</th>\n",
       "      <td>8.192738e-04</td>\n",
       "      <td>0.756801</td>\n",
       "      <td>0.038481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>write</th>\n",
       "      <td>3.700449e-04</td>\n",
       "      <td>0.265214</td>\n",
       "      <td>0.000043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>science</th>\n",
       "      <td>1.141093e-01</td>\n",
       "      <td>0.199765</td>\n",
       "      <td>0.049209</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               0         1         2\n",
       "Intercept           4.887129e-20  0.592066  0.000002\n",
       "prog[T.general]     4.615006e-02  0.000155  0.000008\n",
       "prog[T.vocational]  3.193055e-02  0.025075  0.000359\n",
       "read                8.192738e-04  0.756801  0.038481\n",
       "write               3.700449e-04  0.265214  0.000043\n",
       "science             1.141093e-01  0.199765  0.049209"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.pvalues"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd52087a",
   "metadata": {},
   "source": [
    "### General MV and Wald tests \n",
    "\n",
    "The multivariate linear model allows for multivariate test in the `L B M` form as well as standard wald tests on linear combination of parameters.  \n",
    "\n",
    "The multivariate tests are based on eigenvalues or trace of the matrices. Wald tests are standard test base on the flattened (stacked) parameter array and their covariance, hypothesis are of the form `R b = c` where `b` is the column stacked parameter array. The tests are asymptotically equivalent under the model assumptions but differ in small samples.\n",
    "\n",
    "The linear restriction can be defined either as hypothesis matrices (numpy arrays) or as strings or list of strings.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a0a1d9f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.750610Z",
     "iopub.status.busy": "2025-08-19T16:02:12.750394Z",
     "iopub.status.idle": "2025-08-19T16:02:12.764315Z",
     "shell.execute_reply": "2025-08-19T16:02:12.763703Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['locus_of_control', 'self_concept', 'motivation'],\n",
       " ['Intercept',\n",
       "  'prog[T.general]',\n",
       "  'prog[T.vocational]',\n",
       "  'read',\n",
       "  'write',\n",
       "  'science'])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yn = res.model.endog_names\n",
    "xn = res.model.exog_names\n",
    "yn, xn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "02982602",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.766702Z",
     "iopub.status.busy": "2025-08-19T16:02:12.766484Z",
     "iopub.status.idle": "2025-08-19T16:02:12.816284Z",
     "shell.execute_reply": "2025-08-19T16:02:12.812551Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Num DF</th>\n",
       "      <th>Den DF</th>\n",
       "      <th>F Value</th>\n",
       "      <th>Pr &gt; F</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Effect</th>\n",
       "      <th>Statistic</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">coef</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.995803</td>\n",
       "      <td>1</td>\n",
       "      <td>594.0</td>\n",
       "      <td>2.50373</td>\n",
       "      <td>0.114109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.004197</td>\n",
       "      <td>1.0</td>\n",
       "      <td>594.0</td>\n",
       "      <td>2.50373</td>\n",
       "      <td>0.114109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.004215</td>\n",
       "      <td>1</td>\n",
       "      <td>594.0</td>\n",
       "      <td>2.50373</td>\n",
       "      <td>0.114109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.004215</td>\n",
       "      <td>1</td>\n",
       "      <td>594</td>\n",
       "      <td>2.50373</td>\n",
       "      <td>0.114109</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  Value Num DF Den DF  F Value    Pr > F\n",
       "Effect Statistic                                                        \n",
       "coef   Wilks' lambda           0.995803      1  594.0  2.50373  0.114109\n",
       "       Pillai's trace          0.004197    1.0  594.0  2.50373  0.114109\n",
       "       Hotelling-Lawley trace  0.004215      1  594.0  2.50373  0.114109\n",
       "       Roy's greatest root     0.004215      1    594  2.50373  0.114109"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# test for an individual coefficient\n",
    "\n",
    "mvt = res.mv_test(hypotheses=[(\"coef\", [\"science\"], [\"locus_of_control\"])])\n",
    "mvt.summary_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b31d01db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.821495Z",
     "iopub.status.busy": "2025-08-19T16:02:12.821278Z",
     "iopub.status.idle": "2025-08-19T16:02:12.844104Z",
     "shell.execute_reply": "2025-08-19T16:02:12.840957Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "                              Test for Constraints                             \n",
       " ==============================================================================\n",
       "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
       " ------------------------------------------------------------------------------\n",
       " c0             0.0058      0.004      1.582      0.114      -0.001       0.013\n",
       " ==============================================================================,\n",
       " array(0.11410929))"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tt = res.t_test(\"ylocus_of_control_science\")\n",
    "tt, tt.pvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c22a61e4",
   "metadata": {},
   "source": [
    "We can use either mv_test or wald_test for the joint hypothesis that an explanatory variable has no effect on any of the dependent variables, that is all coefficient for the explanatory variable are zero.\n",
    "\n",
    "In this example, the pvalues agree at 3 decimals."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "80b1e726",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.846334Z",
     "iopub.status.busy": "2025-08-19T16:02:12.846112Z",
     "iopub.status.idle": "2025-08-19T16:02:12.874559Z",
     "shell.execute_reply": "2025-08-19T16:02:12.873960Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "<F test: F=3.3411603250015216, p=0.01901163430173511, df_denom=594, df_num=3>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wt = res.wald_test([\"ylocus_of_control_science\", \"yself_concept_science\", \"ymotivation_science\"], scalar=True)\n",
    "wt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "12c0f058",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.879525Z",
     "iopub.status.busy": "2025-08-19T16:02:12.879301Z",
     "iopub.status.idle": "2025-08-19T16:02:12.931676Z",
     "shell.execute_reply": "2025-08-19T16:02:12.931050Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Num DF</th>\n",
       "      <th>Den DF</th>\n",
       "      <th>F Value</th>\n",
       "      <th>Pr &gt; F</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Effect</th>\n",
       "      <th>Statistic</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">science</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.983405</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.016595</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.016875</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.016875</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>3.329911</td>\n",
       "      <td>0.019305</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   Value Num DF Den DF   F Value    Pr > F\n",
       "Effect  Statistic                                                         \n",
       "science Wilks' lambda           0.983405      3  592.0  3.329911  0.019305\n",
       "        Pillai's trace          0.016595    3.0  592.0  3.329911  0.019305\n",
       "        Hotelling-Lawley trace  0.016875      3  592.0  3.329911  0.019305\n",
       "        Roy's greatest root     0.016875      3    592  3.329911  0.019305"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mvt = res.mv_test(hypotheses=[(\"science\", [\"science\"], yn)])\n",
    "mvt.summary_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "335d0361",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.933946Z",
     "iopub.status.busy": "2025-08-19T16:02:12.933701Z",
     "iopub.status.idle": "2025-08-19T16:02:12.971252Z",
     "shell.execute_reply": "2025-08-19T16:02:12.970601Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "                              Test for Constraints                             \n",
       " ==============================================================================\n",
       "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
       " ------------------------------------------------------------------------------\n",
       " c0             0.0058      0.004      1.582      0.114      -0.001       0.013\n",
       " c1             0.0053      0.004      1.284      0.200      -0.003       0.013\n",
       " c2            -0.0090      0.005     -1.971      0.049      -0.018   -3.13e-05\n",
       " ==============================================================================,\n",
       " array([0.11410929, 0.19976543, 0.0492095 ]))"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# t_test provides a vectorized results for each of the simple hypotheses\n",
    "\n",
    "tt = res.t_test([\"ylocus_of_control_science\", \"yself_concept_science\", \"ymotivation_science\"])\n",
    "tt, tt.pvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caf162f5",
   "metadata": {},
   "source": [
    "**Warning:** the naming pattern for the flattened parameter names used in `t_test` and `wald_test` might still change.\n",
    "\n",
    "The current pattern is `\"y{endog_name}_{exog_name}\"`.\n",
    "\n",
    "examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6ca87db4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.973748Z",
     "iopub.status.busy": "2025-08-19T16:02:12.973514Z",
     "iopub.status.idle": "2025-08-19T16:02:12.990544Z",
     "shell.execute_reply": "2025-08-19T16:02:12.989955Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ylocus_of_control_science', 'yself_concept_science', 'ymotivation_science']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[f\"y{endog_name}_{exog_name}\" for endog_name in yn for exog_name in [\"science\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f6f7418d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:12.992746Z",
     "iopub.status.busy": "2025-08-19T16:02:12.992524Z",
     "iopub.status.idle": "2025-08-19T16:02:13.008967Z",
     "shell.execute_reply": "2025-08-19T16:02:13.003342Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ylocus_of_control_prog[T.general]',\n",
       " 'ylocus_of_control_prog[T.vocational]',\n",
       " 'yself_concept_prog[T.general]',\n",
       " 'yself_concept_prog[T.vocational]',\n",
       " 'ymotivation_prog[T.general]',\n",
       " 'ymotivation_prog[T.vocational]']"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c = [f\"y{endog_name}_{exog_name}\" for endog_name in yn for exog_name in [\"prog[T.general]\", \"prog[T.vocational]\"]]\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d0d1529",
   "metadata": {},
   "source": [
    "The previous restriction corresponds to the MANOVA type test that the categorical variable \"prog\" has no effect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "960cb28e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.011269Z",
     "iopub.status.busy": "2025-08-19T16:02:13.011038Z",
     "iopub.status.idle": "2025-08-19T16:02:13.103292Z",
     "shell.execute_reply": "2025-08-19T16:02:13.102652Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Num DF</th>\n",
       "      <th>Den DF</th>\n",
       "      <th>F Value</th>\n",
       "      <th>Pr &gt; F</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Statistic</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.891438</td>\n",
       "      <td>6</td>\n",
       "      <td>1184.0</td>\n",
       "      <td>11.670765</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.108649</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1186.0</td>\n",
       "      <td>11.354963</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.121685</td>\n",
       "      <td>6</td>\n",
       "      <td>787.558061</td>\n",
       "      <td>11.996155</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.120878</td>\n",
       "      <td>3</td>\n",
       "      <td>593</td>\n",
       "      <td>23.893456</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           Value Num DF      Den DF    F Value Pr > F\n",
       "Statistic                                                            \n",
       "Wilks' lambda           0.891438      6      1184.0  11.670765    0.0\n",
       "Pillai's trace          0.108649    6.0      1186.0  11.354963    0.0\n",
       "Hotelling-Lawley trace  0.121685      6  787.558061  11.996155    0.0\n",
       "Roy's greatest root     0.120878      3         593  23.893456    0.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mant = manova.mv_test().summary_frame\n",
    "mant.loc[\"prog\"] #[\"Pr > F\"].to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c2b5ae70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.110562Z",
     "iopub.status.busy": "2025-08-19T16:02:13.110334Z",
     "iopub.status.idle": "2025-08-19T16:02:13.152318Z",
     "shell.execute_reply": "2025-08-19T16:02:13.151694Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "<F test: F=12.046814522691747, p=8.548081236477388e-13, df_denom=594, df_num=6>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.wald_test(c, scalar=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab386919",
   "metadata": {},
   "source": [
    "**Note:** The degrees of freedom differ across hypothesis test methods.\n",
    "The model can be considered as a multivariate model with nobs=600 in this case, or as a stacked model with \n",
    "nobs_total = nobs * k_endog = 1800.\n",
    "\n",
    "\n",
    "For within endog restriction, inference is based on the same covariance of the parameter estimates in MultivariateLS and OLS. The degrees of freedom in a single output OLS are df_resid = 600 - 6 = 594. Using the same degrees of freedom in MultivariateLS preserves the equivalence for the analysis of each endog. Using the total df_resid for hypothesis tests would make them more liberal.\n",
    "\n",
    "Asymptotic inference based on normal and chisquare distribution (`use_t=False`) is not affected by how df_resid are defined.\n",
    "\n",
    "It is not yet decided whether there will be additional options to choose different degrees of freedom in the Wald tests."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b0854ceb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.157536Z",
     "iopub.status.busy": "2025-08-19T16:02:13.157300Z",
     "iopub.status.idle": "2025-08-19T16:02:13.165110Z",
     "shell.execute_reply": "2025-08-19T16:02:13.164503Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "594"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.df_resid"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b5411b1",
   "metadata": {},
   "source": [
    "Both mv_test and wald_test can be used to test hypothesis on contrasts between coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8deb82c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.169153Z",
     "iopub.status.busy": "2025-08-19T16:02:13.167321Z",
     "iopub.status.idle": "2025-08-19T16:02:13.184111Z",
     "shell.execute_reply": "2025-08-19T16:02:13.183524Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ylocus_of_control_prog[T.general] - ylocus_of_control_prog[T.vocational]',\n",
       " 'yself_concept_prog[T.general] - yself_concept_prog[T.vocational]',\n",
       " 'ymotivation_prog[T.general] - ymotivation_prog[T.vocational]']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c = [f\"y{endog_name}_prog[T.general] - y{endog_name}_prog[T.vocational]\" for endog_name in yn]\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0e0ee5d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.186288Z",
     "iopub.status.busy": "2025-08-19T16:02:13.186068Z",
     "iopub.status.idle": "2025-08-19T16:02:13.217612Z",
     "shell.execute_reply": "2025-08-19T16:02:13.216961Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'statsmodels.stats.contrast.ContrastResults'>\n",
       "<F test: F=23.929409268979654, p=1.2456536486105104e-14, df_denom=594, df_num=3>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.wald_test(c, scalar=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cf983044",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.223291Z",
     "iopub.status.busy": "2025-08-19T16:02:13.222428Z",
     "iopub.status.idle": "2025-08-19T16:02:13.276875Z",
     "shell.execute_reply": "2025-08-19T16:02:13.275619Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Num DF</th>\n",
       "      <th>Den DF</th>\n",
       "      <th>F Value</th>\n",
       "      <th>Pr &gt; F</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Effect</th>\n",
       "      <th>Statistic</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">diff_prog</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.892176</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>23.848839</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.107824</td>\n",
       "      <td>3.0</td>\n",
       "      <td>592.0</td>\n",
       "      <td>23.848839</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.120856</td>\n",
       "      <td>3</td>\n",
       "      <td>592.0</td>\n",
       "      <td>23.848839</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.120856</td>\n",
       "      <td>3</td>\n",
       "      <td>592</td>\n",
       "      <td>23.848839</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     Value Num DF Den DF    F Value Pr > F\n",
       "Effect    Statistic                                                       \n",
       "diff_prog Wilks' lambda           0.892176      3  592.0  23.848839    0.0\n",
       "          Pillai's trace          0.107824    3.0  592.0  23.848839    0.0\n",
       "          Hotelling-Lawley trace  0.120856      3  592.0  23.848839    0.0\n",
       "          Roy's greatest root     0.120856      3    592  23.848839    0.0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mvt = res.mv_test(hypotheses=[(\"diff_prog\", [\"prog[T.general] - prog[T.vocational]\"], yn)])\n",
    "mvt.summary_frame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1569e45",
   "metadata": {},
   "source": [
    "Example: hypothesis that coefficients are the same across endog equations.\n",
    "\n",
    "We can test that the difference between the parameters of the later two equation with the first equation are zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "75ec5fe9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.284568Z",
     "iopub.status.busy": "2025-08-19T16:02:13.284325Z",
     "iopub.status.idle": "2025-08-19T16:02:13.342512Z",
     "shell.execute_reply": "2025-08-19T16:02:13.341889Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Num DF</th>\n",
       "      <th>Den DF</th>\n",
       "      <th>F Value</th>\n",
       "      <th>Pr &gt; F</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Effect</th>\n",
       "      <th>Statistic</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">diff_prog</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.867039</td>\n",
       "      <td>12</td>\n",
       "      <td>1186.0</td>\n",
       "      <td>7.307879</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.13714</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1188.0</td>\n",
       "      <td>7.28819</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.14853</td>\n",
       "      <td>12</td>\n",
       "      <td>919.36321</td>\n",
       "      <td>7.331042</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.100625</td>\n",
       "      <td>6</td>\n",
       "      <td>594</td>\n",
       "      <td>9.961898</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     Value Num DF     Den DF   F Value Pr > F\n",
       "Effect    Statistic                                                          \n",
       "diff_prog Wilks' lambda           0.867039     12     1186.0  7.307879    0.0\n",
       "          Pillai's trace           0.13714   12.0     1188.0   7.28819    0.0\n",
       "          Hotelling-Lawley trace   0.14853     12  919.36321  7.331042    0.0\n",
       "          Roy's greatest root     0.100625      6        594  9.961898    0.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mvt = res.mv_test(hypotheses=[(\"diff_prog\", xn, [\"self_concept - locus_of_control\", \"motivation - locus_of_control\"])])\n",
    "mvt.summary_frame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a0b8193",
   "metadata": {},
   "source": [
    "In a similar hypothesis test, we can test that equation have the same slope coefficients but can have different constants."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1c8aa712",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.349488Z",
     "iopub.status.busy": "2025-08-19T16:02:13.349251Z",
     "iopub.status.idle": "2025-08-19T16:02:13.363026Z",
     "shell.execute_reply": "2025-08-19T16:02:13.362046Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['prog[T.general]', 'prog[T.vocational]', 'read', 'write', 'science']"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xn[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "04315196",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.365311Z",
     "iopub.status.busy": "2025-08-19T16:02:13.365089Z",
     "iopub.status.idle": "2025-08-19T16:02:13.423867Z",
     "shell.execute_reply": "2025-08-19T16:02:13.423233Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Value</th>\n",
       "      <th>Num DF</th>\n",
       "      <th>Den DF</th>\n",
       "      <th>F Value</th>\n",
       "      <th>Pr &gt; F</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Effect</th>\n",
       "      <th>Statistic</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">diff_prog</th>\n",
       "      <th>Wilks' lambda</th>\n",
       "      <td>0.879133</td>\n",
       "      <td>10</td>\n",
       "      <td>1186.0</td>\n",
       "      <td>7.890322</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pillai's trace</th>\n",
       "      <td>0.124212</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1188.0</td>\n",
       "      <td>7.866738</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hotelling-Lawley trace</th>\n",
       "      <td>0.133679</td>\n",
       "      <td>10</td>\n",
       "      <td>886.75443</td>\n",
       "      <td>7.918284</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roy's greatest root</th>\n",
       "      <td>0.092581</td>\n",
       "      <td>5</td>\n",
       "      <td>594</td>\n",
       "      <td>10.998679</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     Value Num DF     Den DF    F Value Pr > F\n",
       "Effect    Statistic                                                           \n",
       "diff_prog Wilks' lambda           0.879133     10     1186.0   7.890322    0.0\n",
       "          Pillai's trace          0.124212   10.0     1188.0   7.866738    0.0\n",
       "          Hotelling-Lawley trace  0.133679     10  886.75443   7.918284    0.0\n",
       "          Roy's greatest root     0.092581      5        594  10.998679    0.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mvt = res.mv_test(hypotheses=[(\"diff_prog\", xn[1:], [\"self_concept - locus_of_control\", \"motivation - locus_of_control\"])])\n",
    "mvt.summary_frame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c55852a",
   "metadata": {},
   "source": [
    "### Prediction\n",
    "\n",
    "\n",
    "The regression model and its results instance have methods for prediction and residuals.\n",
    "\n",
    "Note, because the parameter estimates are the same as in the OLS estimate for individual endog, the predictions will also be the same between the MultivariateLS model and the set of individual OLS models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ba92e621",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.428773Z",
     "iopub.status.busy": "2025-08-19T16:02:13.428543Z",
     "iopub.status.idle": "2025-08-19T16:02:13.460973Z",
     "shell.execute_reply": "2025-08-19T16:02:13.455523Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>locus_of_control</th>\n",
       "      <th>self_concept</th>\n",
       "      <th>motivation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.781981</td>\n",
       "      <td>0.759249</td>\n",
       "      <td>0.575027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.334075</td>\n",
       "      <td>0.015388</td>\n",
       "      <td>0.635811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.342126</td>\n",
       "      <td>0.539488</td>\n",
       "      <td>0.432337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.426497</td>\n",
       "      <td>-0.326337</td>\n",
       "      <td>-0.012298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.364810</td>\n",
       "      <td>-0.480846</td>\n",
       "      <td>1.255411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>595</th>\n",
       "      <td>-1.849566</td>\n",
       "      <td>0.920851</td>\n",
       "      <td>-0.318799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>-1.278212</td>\n",
       "      <td>-1.080592</td>\n",
       "      <td>-0.031575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>597</th>\n",
       "      <td>-1.060668</td>\n",
       "      <td>-1.065596</td>\n",
       "      <td>-1.577958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>598</th>\n",
       "      <td>-0.661946</td>\n",
       "      <td>0.368192</td>\n",
       "      <td>0.132774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>599</th>\n",
       "      <td>-0.129760</td>\n",
       "      <td>0.702698</td>\n",
       "      <td>1.020835</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>600 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     locus_of_control  self_concept  motivation\n",
       "0           -0.781981      0.759249    0.575027\n",
       "1            0.334075      0.015388    0.635811\n",
       "2            1.342126      0.539488    0.432337\n",
       "3            0.426497     -0.326337   -0.012298\n",
       "4           -0.364810     -0.480846    1.255411\n",
       "..                ...           ...         ...\n",
       "595         -1.849566      0.920851   -0.318799\n",
       "596         -1.278212     -1.080592   -0.031575\n",
       "597         -1.060668     -1.065596   -1.577958\n",
       "598         -0.661946      0.368192    0.132774\n",
       "599         -0.129760      0.702698    1.020835\n",
       "\n",
       "[600 rows x 3 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.resid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "aa8885f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.463119Z",
     "iopub.status.busy": "2025-08-19T16:02:13.462880Z",
     "iopub.status.idle": "2025-08-19T16:02:13.474102Z",
     "shell.execute_reply": "2025-08-19T16:02:13.473492Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.36197321, -0.03660735, -0.2060539 ],\n",
       "       [ 0.17005867,  0.09597616, -0.11549243],\n",
       "       [ 0.28641963,  0.09044546,  0.00450077],\n",
       "       ...,\n",
       "       [ 0.6252098 , -0.23716973,  0.11864199],\n",
       "       [-0.3024846 , -0.29586741, -0.47584179],\n",
       "       [ 0.77574136,  0.2878978 ,  0.42480766]], shape=(600, 3))"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.predict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "bda82cf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.479435Z",
     "iopub.status.busy": "2025-08-19T16:02:13.479217Z",
     "iopub.status.idle": "2025-08-19T16:02:13.521637Z",
     "shell.execute_reply": "2025-08-19T16:02:13.521016Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.361973</td>\n",
       "      <td>-0.036607</td>\n",
       "      <td>-0.206054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.170059</td>\n",
       "      <td>0.095976</td>\n",
       "      <td>-0.115492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.286420</td>\n",
       "      <td>0.090445</td>\n",
       "      <td>0.004501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.058400</td>\n",
       "      <td>0.187809</td>\n",
       "      <td>0.007974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.084621</td>\n",
       "      <td>0.028620</td>\n",
       "      <td>0.001513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>595</th>\n",
       "      <td>0.185458</td>\n",
       "      <td>0.036897</td>\n",
       "      <td>0.034498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>0.330408</td>\n",
       "      <td>0.097329</td>\n",
       "      <td>0.489407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>597</th>\n",
       "      <td>0.625210</td>\n",
       "      <td>-0.237170</td>\n",
       "      <td>0.118642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>598</th>\n",
       "      <td>-0.302485</td>\n",
       "      <td>-0.295867</td>\n",
       "      <td>-0.475842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>599</th>\n",
       "      <td>0.775741</td>\n",
       "      <td>0.287898</td>\n",
       "      <td>0.424808</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>600 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0         1         2\n",
       "0   -0.361973 -0.036607 -0.206054\n",
       "1    0.170059  0.095976 -0.115492\n",
       "2    0.286420  0.090445  0.004501\n",
       "3   -0.058400  0.187809  0.007974\n",
       "4    0.084621  0.028620  0.001513\n",
       "..        ...       ...       ...\n",
       "595  0.185458  0.036897  0.034498\n",
       "596  0.330408  0.097329  0.489407\n",
       "597  0.625210 -0.237170  0.118642\n",
       "598 -0.302485 -0.295867 -0.475842\n",
       "599  0.775741  0.287898  0.424808\n",
       "\n",
       "[600 rows x 3 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.predict(data_mvreg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2b0fec2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.526554Z",
     "iopub.status.busy": "2025-08-19T16:02:13.526330Z",
     "iopub.status.idle": "2025-08-19T16:02:13.550536Z",
     "shell.execute_reply": "2025-08-19T16:02:13.549945Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>locus_of_control</th>\n",
       "      <th>self_concept</th>\n",
       "      <th>motivation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.361973</td>\n",
       "      <td>-0.036607</td>\n",
       "      <td>-0.206054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.170059</td>\n",
       "      <td>0.095976</td>\n",
       "      <td>-0.115492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.286420</td>\n",
       "      <td>0.090445</td>\n",
       "      <td>0.004501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.058400</td>\n",
       "      <td>0.187809</td>\n",
       "      <td>0.007974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.084621</td>\n",
       "      <td>0.028620</td>\n",
       "      <td>0.001513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>595</th>\n",
       "      <td>0.185458</td>\n",
       "      <td>0.036897</td>\n",
       "      <td>0.034498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>0.330408</td>\n",
       "      <td>0.097329</td>\n",
       "      <td>0.489407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>597</th>\n",
       "      <td>0.625210</td>\n",
       "      <td>-0.237170</td>\n",
       "      <td>0.118642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>598</th>\n",
       "      <td>-0.302485</td>\n",
       "      <td>-0.295867</td>\n",
       "      <td>-0.475842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>599</th>\n",
       "      <td>0.775741</td>\n",
       "      <td>0.287898</td>\n",
       "      <td>0.424808</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>600 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     locus_of_control  self_concept  motivation\n",
       "0           -0.361973     -0.036607   -0.206054\n",
       "1            0.170059      0.095976   -0.115492\n",
       "2            0.286420      0.090445    0.004501\n",
       "3           -0.058400      0.187809    0.007974\n",
       "4            0.084621      0.028620    0.001513\n",
       "..                ...           ...         ...\n",
       "595          0.185458      0.036897    0.034498\n",
       "596          0.330408      0.097329    0.489407\n",
       "597          0.625210     -0.237170    0.118642\n",
       "598         -0.302485     -0.295867   -0.475842\n",
       "599          0.775741      0.287898    0.424808\n",
       "\n",
       "[600 rows x 3 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.fittedvalues"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa6d30de",
   "metadata": {},
   "source": [
    "The predict methods can take user provided data for the explanatory variables, but currently are not able to automatically create sets of explanatory variables for interesting effects.\n",
    "\n",
    "In the following, we construct at dataframe that we can use to predict the conditional expectation of the dependent variables for each level of the categorical variable \"prog\" at the sample means of the continuous variables. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7ae189fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.558495Z",
     "iopub.status.busy": "2025-08-19T16:02:13.558279Z",
     "iopub.status.idle": "2025-08-19T16:02:13.588830Z",
     "shell.execute_reply": "2025-08-19T16:02:13.588260Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prog</th>\n",
       "      <th>read</th>\n",
       "      <th>write</th>\n",
       "      <th>science</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>academic</td>\n",
       "      <td>51.901833</td>\n",
       "      <td>52.384833</td>\n",
       "      <td>51.763333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>vocational</td>\n",
       "      <td>51.901833</td>\n",
       "      <td>52.384833</td>\n",
       "      <td>51.763333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>general</td>\n",
       "      <td>51.901833</td>\n",
       "      <td>52.384833</td>\n",
       "      <td>51.763333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         prog       read      write    science\n",
       "0    academic  51.901833  52.384833  51.763333\n",
       "1  vocational  51.901833  52.384833  51.763333\n",
       "2     general  51.901833  52.384833  51.763333"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_exog = data_mvreg[['read', 'write', 'science', 'prog']]\n",
    "\n",
    "ex = pd.DataFrame(data_exog[\"prog\"].unique(), columns=[\"prog\"])\n",
    "mean_ex = data_mvreg[['read', 'write', 'science']].mean()\n",
    "\n",
    "ex.loc[:, ['read', 'write', 'science']] = mean_ex.values\n",
    "ex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "773618e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.596501Z",
     "iopub.status.busy": "2025-08-19T16:02:13.596284Z",
     "iopub.status.idle": "2025-08-19T16:02:13.637501Z",
     "shell.execute_reply": "2025-08-19T16:02:13.636863Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "predicted mean by 'prog':\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>locus_of_control</th>\n",
       "      <th>self_concept</th>\n",
       "      <th>motivation</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prog</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>academic</th>\n",
       "      <td>0.086493</td>\n",
       "      <td>0.021752</td>\n",
       "      <td>0.004209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>vocational</th>\n",
       "      <td>0.210368</td>\n",
       "      <td>0.168628</td>\n",
       "      <td>0.263575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>general</th>\n",
       "      <td>-0.041303</td>\n",
       "      <td>-0.254731</td>\n",
       "      <td>-0.356121</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            locus_of_control  self_concept  motivation\n",
       "prog                                                  \n",
       "academic            0.086493      0.021752    0.004209\n",
       "vocational          0.210368      0.168628    0.263575\n",
       "general            -0.041303     -0.254731   -0.356121"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = res.predict(ex)\n",
    "\n",
    "pred.index = ex[\"prog\"]\n",
    "pred.columns = res.fittedvalues.columns\n",
    "print(\"predicted mean by 'prog':\")\n",
    "pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69a05b73",
   "metadata": {},
   "source": [
    "## Outlier-Influence\n",
    "\n",
    "This is currently in draft version.  \n",
    "`resid_distance` is a one dimensional residual measure based on Mahalanobis distance for each sample observation. \n",
    "The hat matrix in the MultivariateLS model is the same as in OLS, the diagonal of the hat matrix is temporarily attached as `results._hat_matrix_diag`.\n",
    "\n",
    "Note, individual components of the multivariate dependent variable can be analyzed with OLS and are available in the corresponding post-estimation methods like `OLSInfluence`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d69a12c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.642739Z",
     "iopub.status.busy": "2025-08-19T16:02:13.642514Z",
     "iopub.status.idle": "2025-08-19T16:02:13.656324Z",
     "shell.execute_reply": "2025-08-19T16:02:13.655705Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3.74332128, 0.95395412, 5.15221877, 0.82580531, 4.5260778 ])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.resid_distance[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1f885722",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.660791Z",
     "iopub.status.busy": "2025-08-19T16:02:13.660572Z",
     "iopub.status.idle": "2025-08-19T16:02:13.674111Z",
     "shell.execute_reply": "2025-08-19T16:02:13.670709Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.36844484, 0.05748939, 0.06050103],\n",
       "       [0.05748939, 0.4748153 , 0.13103368],\n",
       "       [0.06050103, 0.13103368, 0.57973305]])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.cov_resid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "542b5eb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:13.676397Z",
     "iopub.status.busy": "2025-08-19T16:02:13.675989Z",
     "iopub.status.idle": "2025-08-19T16:02:15.172473Z",
     "shell.execute_reply": "2025-08-19T16:02:15.171735Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3d21fc8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:15.180182Z",
     "iopub.status.busy": "2025-08-19T16:02:15.175070Z",
     "iopub.status.idle": "2025-08-19T16:02:15.653680Z",
     "shell.execute_reply": "2025-08-19T16:02:15.652887Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fa84c7c6320>]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(res.resid_distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "adff83a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:15.661851Z",
     "iopub.status.busy": "2025-08-19T16:02:15.661506Z",
     "iopub.status.idle": "2025-08-19T16:02:16.157896Z",
     "shell.execute_reply": "2025-08-19T16:02:16.157235Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fa80f6febc0>]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(res._hat_matrix_diag)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b56d845f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-19T16:02:16.166633Z",
     "iopub.status.busy": "2025-08-19T16:02:16.166367Z",
     "iopub.status.idle": "2025-08-19T16:02:16.603297Z",
     "shell.execute_reply": "2025-08-19T16:02:16.600721Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fa80f5ac520>]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(res._hat_matrix_diag, res.resid_distance, \".\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
