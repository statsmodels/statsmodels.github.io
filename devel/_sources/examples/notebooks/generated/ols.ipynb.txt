{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ordinary Least Squares"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:17.167882Z",
     "iopub.status.busy": "2024-05-14T16:30:17.167662Z",
     "iopub.status.idle": "2024-05-14T16:30:18.743785Z",
     "shell.execute_reply": "2024-05-14T16:30:18.743110Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:18.747164Z",
     "iopub.status.busy": "2024-05-14T16:30:18.746692Z",
     "iopub.status.idle": "2024-05-14T16:30:21.548511Z",
     "shell.execute_reply": "2024-05-14T16:30:21.547724Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "\n",
    "np.random.seed(9876789)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OLS estimation\n",
    "\n",
    "Artificial data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:21.552320Z",
     "iopub.status.busy": "2024-05-14T16:30:21.551743Z",
     "iopub.status.idle": "2024-05-14T16:30:21.555979Z",
     "shell.execute_reply": "2024-05-14T16:30:21.555401Z"
    }
   },
   "outputs": [],
   "source": [
    "nsample = 100\n",
    "x = np.linspace(0, 10, 100)\n",
    "X = np.column_stack((x, x ** 2))\n",
    "beta = np.array([1, 0.1, 10])\n",
    "e = np.random.normal(size=nsample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our model needs an intercept so we add a column of 1s:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:21.558876Z",
     "iopub.status.busy": "2024-05-14T16:30:21.558446Z",
     "iopub.status.idle": "2024-05-14T16:30:21.563679Z",
     "shell.execute_reply": "2024-05-14T16:30:21.563113Z"
    }
   },
   "outputs": [],
   "source": [
    "X = sm.add_constant(X)\n",
    "y = np.dot(X, beta) + e"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit and summary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:21.566364Z",
     "iopub.status.busy": "2024-05-14T16:30:21.565942Z",
     "iopub.status.idle": "2024-05-14T16:30:21.607014Z",
     "shell.execute_reply": "2024-05-14T16:30:21.606429Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       1.000\n",
      "Model:                            OLS   Adj. R-squared:                  1.000\n",
      "Method:                 Least Squares   F-statistic:                 4.020e+06\n",
      "Date:                Tue, 14 May 2024   Prob (F-statistic):          2.83e-239\n",
      "Time:                        16:30:21   Log-Likelihood:                -146.51\n",
      "No. Observations:                 100   AIC:                             299.0\n",
      "Df Residuals:                      97   BIC:                             306.8\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          1.3423      0.313      4.292      0.000       0.722       1.963\n",
      "x1            -0.0402      0.145     -0.278      0.781      -0.327       0.247\n",
      "x2            10.0103      0.014    715.745      0.000       9.982      10.038\n",
      "==============================================================================\n",
      "Omnibus:                        2.042   Durbin-Watson:                   2.274\n",
      "Prob(Omnibus):                  0.360   Jarque-Bera (JB):                1.875\n",
      "Skew:                           0.234   Prob(JB):                        0.392\n",
      "Kurtosis:                       2.519   Cond. No.                         144.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "model = sm.OLS(y, X)\n",
    "results = model.fit()\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Quantities of interest can be extracted directly from the fitted model. Type ``dir(results)`` for a full list. Here are some examples:  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:21.611322Z",
     "iopub.status.busy": "2024-05-14T16:30:21.610223Z",
     "iopub.status.idle": "2024-05-14T16:30:21.619980Z",
     "shell.execute_reply": "2024-05-14T16:30:21.619391Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameters:  [ 1.34233516 -0.04024948 10.01025357]\n",
      "R2:  0.9999879365025871\n"
     ]
    }
   ],
   "source": [
    "print(\"Parameters: \", results.params)\n",
    "print(\"R2: \", results.rsquared)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OLS non-linear curve but linear in parameters\n",
    "\n",
    "We simulate artificial data with a non-linear relationship between x and y:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:21.624584Z",
     "iopub.status.busy": "2024-05-14T16:30:21.622936Z",
     "iopub.status.idle": "2024-05-14T16:30:21.640222Z",
     "shell.execute_reply": "2024-05-14T16:30:21.639645Z"
    }
   },
   "outputs": [],
   "source": [
    "nsample = 50\n",
    "sig = 0.5\n",
    "x = np.linspace(0, 20, nsample)\n",
    "X = np.column_stack((x, np.sin(x), (x - 5) ** 2, np.ones(nsample)))\n",
    "beta = [0.5, 0.5, -0.02, 5.0]\n",
    "\n",
    "y_true = np.dot(X, beta)\n",
    "y = y_true + sig * np.random.normal(size=nsample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit and summary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:21.644236Z",
     "iopub.status.busy": "2024-05-14T16:30:21.643193Z",
     "iopub.status.idle": "2024-05-14T16:30:21.680730Z",
     "shell.execute_reply": "2024-05-14T16:30:21.680146Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.933\n",
      "Model:                            OLS   Adj. R-squared:                  0.928\n",
      "Method:                 Least Squares   F-statistic:                     211.8\n",
      "Date:                Tue, 14 May 2024   Prob (F-statistic):           6.30e-27\n",
      "Time:                        16:30:21   Log-Likelihood:                -34.438\n",
      "No. Observations:                  50   AIC:                             76.88\n",
      "Df Residuals:                      46   BIC:                             84.52\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "x1             0.4687      0.026     17.751      0.000       0.416       0.522\n",
      "x2             0.4836      0.104      4.659      0.000       0.275       0.693\n",
      "x3            -0.0174      0.002     -7.507      0.000      -0.022      -0.013\n",
      "const          5.2058      0.171     30.405      0.000       4.861       5.550\n",
      "==============================================================================\n",
      "Omnibus:                        0.655   Durbin-Watson:                   2.896\n",
      "Prob(Omnibus):                  0.721   Jarque-Bera (JB):                0.360\n",
      "Skew:                           0.207   Prob(JB):                        0.835\n",
      "Kurtosis:                       3.026   Cond. No.                         221.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "res = sm.OLS(y, X).fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Extract other quantities of interest:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:21.684724Z",
     "iopub.status.busy": "2024-05-14T16:30:21.683684Z",
     "iopub.status.idle": "2024-05-14T16:30:21.691339Z",
     "shell.execute_reply": "2024-05-14T16:30:21.690743Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameters:  [ 0.46872448  0.48360119 -0.01740479  5.20584496]\n",
      "Standard errors:  [0.02640602 0.10380518 0.00231847 0.17121765]\n",
      "Predicted values:  [ 4.77072516  5.22213464  5.63620761  5.98658823  6.25643234  6.44117491\n",
      "  6.54928009  6.60085051  6.62432454  6.6518039   6.71377946  6.83412169\n",
      "  7.02615877  7.29048685  7.61487206  7.97626054  8.34456611  8.68761335\n",
      "  8.97642389  9.18997755  9.31866582  9.36587056  9.34740836  9.28893189\n",
      "  9.22171529  9.17751587  9.1833565   9.25708583  9.40444579  9.61812821\n",
      "  9.87897556 10.15912843 10.42660281 10.65054491 10.8063004  10.87946503\n",
      " 10.86825119 10.78378163 10.64826203 10.49133265 10.34519853 10.23933827\n",
      " 10.19566084 10.22490593 10.32487947 10.48081414 10.66779556 10.85485568\n",
      " 11.01006072 11.10575781]\n"
     ]
    }
   ],
   "source": [
    "print(\"Parameters: \", res.params)\n",
    "print(\"Standard errors: \", res.bse)\n",
    "print(\"Predicted values: \", res.predict())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Draw a plot to compare the true relationship to OLS predictions. Confidence intervals around the predictions are built using the ``wls_prediction_std`` command."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:21.695290Z",
     "iopub.status.busy": "2024-05-14T16:30:21.694238Z",
     "iopub.status.idle": "2024-05-14T16:30:22.459290Z",
     "shell.execute_reply": "2024-05-14T16:30:22.458634Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f391a6a1c60>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAApsAAAH5CAYAAADORvWoAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAACkJElEQVR4nOzdd3iT5dfA8W8SRlktmxYKWIZsBUQURVkioOL4oSKKyFB4UXCggigIyBJciChLVBDFLUNlKSgiyJBN2ZRRaFmFltWVPO8fhzSd0JHkSdrzua5cJE/SPHfSlp7c933OsRiGYaCUUkoppZQHWM0egFJKKaWUyr802FRKKaWUUh6jwaZSSimllPIYDTaVUkoppZTHaLCplFJKKaU8RoNNpZRSSinlMRpsKqWUUkopjylk9gDSczgcHD9+nFKlSmGxWMwejlJKKaWUSscwDM6fP0/lypWxWq8+d+lzwebx48epWrWq2cNQSimllFLXcPToUUJDQ6/6GJ8LNkuVKgXI4AMDA00ejVJKKaWUSi8uLo6qVaumxG1X43PBpnPpPDAwUINNpZRSSikflp0tj5ogpJRSSimlPEaDTaWUUkop5TEabCqllFJKKY/xuT2b2WW320lKSjJ7GH6ncOHC2Gw2s4ehlFJKqQLC74JNwzCIjo7m3LlzZg/Fb5UuXZrg4GCtY6qUUkopj/O7YNMZaFasWJHixYtrwJQDhmFw6dIlTp48CUBISIjJI1JKKaVUfudXwabdbk8JNMuVK2f2cPxSsWLFADh58iQVK1bUJXWllFJKeZRfJQg592gWL17c5JH4N+f7p3telVJKKeVpfhVsOunSed7o+6eUUkopb/HLYFMppZRSSvkHDTaVUkoppZTHFNhg0+4wWHvgDAu2HGPtgTPYHYbXx9C6dWtefPFFr59XKaWUUspb/Cob3V2W7Ihi1KJwomLjU46FBAUwonN9Ojb0zXJAf/75J23atOHs2bOULl3a7OEopZRSSmVLgZvZXLIjiv5zN6UJNAGiY+PpP3cTS3ZEmTQypZRSSqn8p0AFm3aHwahF4WS2YO48NmpRuEeW1C9evEiPHj0oWbIkISEhvPfee2nu//LLL2nWrBmlSpUiODiYxx9/PKX4+qFDh2jTpg0AZcqUwWKx0LNnTwCWLFlCy5YtKV26NOXKleO+++7jwIEDbh+/UkoppVRuFKhgc31ETIYZzdQMICo2nvURMW4/96uvvspff/3FggULWLZsGX/++SebNm1KuT8pKYnRo0ezdetW5s+fz6FDh1ICyqpVq/Ljjz8CsGfPHqKiovjwww8BCWIHDRrExo0b+eOPP7BarTz00EM4HA63vwallFJKqZwqUHs2T57POtDMzeOy68KFC8yaNYu5c+fSrl07AGbPnk1oaGjKY3r37p1yvUaNGkyePJmbb76ZCxcuULJkScqWLQtAxYoV0+zZ7NKlS5pzffbZZ1SoUIHw8HAaNmzo1tehlFJKKZVTBWpms2KpALc+LrsOHDhAYmIit9xyS8qxsmXLUqdOnZTb//33H507d6ZatWqUKlWKVq1aAXDkyJGrPve+ffvo1q0bNWrUIDAwkOuuuy5bX6eUUkqpfOLYMXj3XTC8X1knOwpUsNk8rCwhQQFk1T/HgmSlNw8r681hcfHiRTp06EBgYCBfffUVGzZs4OeffwYgMTHxql/buXNnYmJimDlzJuvWrWPdunXZ+jqllFJK+blDh6B/f6hRA159FZYvN3tEmSpQwabNamFE5/oAGQJO5+0Rnetjs7q3nWPNmjUpXLhwSiAIcPbsWfbu3QvA7t27OXPmDG+//TZ33HEHdevWTUkOcipSpAgAdrs95diZM2fYs2cPw4YNo127dtSrV4+zZ8+6dexKKaWU8jH79kGvXlCrFkybBomJcMcdEBho9sgyVaCCTYCODUOY2r0pwUFpl8qDgwKY2r2pR+pslixZkj59+vDqq6+yYsUKduzYQc+ePbFa5e2vVq0aRYoU4aOPPuLgwYMsXLiQ0aNHp3mO6tWrY7FY+OWXXzh16hQXLlygTJkylCtXjhkzZrB//35WrFjBoEGD3D5+pZRSSvmQP/6AL74Aux3at4e//oJVq+DWW80eWaYKVIKQU8eGIbSvH8z6iBhOno+nYilZOnf3jGZq77zzDhcuXKBz586UKlWKl19+mdjYWAAqVKjAF198weuvv87kyZNp2rQp7777Lvfff3/K11epUoVRo0bx2muv0atXL3r06MEXX3zBN998w/PPP0/Dhg2pU6cOkydPpnXr1h57HUoppZTysv/+g7g4uFIGkZ494d9/ZQk9VT6Ir7IYhm/tJo2LiyMoKIjY2FgC000Hx8fHExERQVhYGAEB7k3iKUj0fVRKKaX8wJo1MGYMLF4M118P4eFgs5k9KuDq8Vp6BXJmUymllFLKZ12+DIMGyX5MAKsVmjeH8+fBD1tWa7CplFJKKeUrdu6Exx6DHTvkdu/eMHSoJAP5qRwnCK1atYrOnTtTuXJlLBYL8+fPT7kvKSmJIUOG0KhRI0qUKEHlypXp0aMHx48fd+eYlVJKKaXyn7174eabJdCsWBGWLoVZs/w60IRcBJsXL17kxhtv5OOPP85w36VLl9i0aRPDhw9n06ZN/PTTT+zZsydNootSSimllMpE7drQuTPcfTds2yb/5gM5Xkbv1KkTnTp1yvS+oKAglqcrKDplyhSaN2/OkSNHqFatWu5GqZRSSimVH61fL0FmmTJgscDnn0NAgOzTzCc8/kpiY2OxWCxp+nmnlpCQQFxcXJqLUkoppVS+5nDAhAlw223wzDOuVpPFi+erQBM8HGzGx8czZMgQunXrlmVa/Pjx4wkKCkq5VK1a1ZNDUkoppZQyV3Q0dOwIr70mhdkLFZIuQPmUx4LNpKQkHn30UQzDYOrUqVk+bujQocTGxqZcjh496qkhKaWUKqDsDoO1B86wYMsx1h44g93hgRLThiGBg1JXs3Qp3Hij9DEvVgw+/RTmzYOiRc0emcd4pPSRM9A8fPgwK1asuGqxz6JFi1I0H7/BSimlzLVkRxSjFoUTFRufciwkKIARnevnrUXxxYsQGwuVK7tuBwbK3rty5TJebrsNHn7Y9fUOR75bLlVXYbfD8OEwfrzcbtQIvv0W6tUzd1xe4PafcmeguW/fPn7//XfKlSvn7lP4HYvFctXLyJEjzR6iUkrlS0t2RNF/7qY0gSZAdGw8/eduYsmOqJw94enTksDxwANQvjwMGeK678wZmd2MiYF9+6Sd4K+/wpw58MEHsGSJ67GJiVC/Pgwc6KqnqPK3mBiYPVuuP/ssrFtXIAJNyMXM5oULF9i/f3/K7YiICLZs2ULZsmUJCQnh4YcfZtOmTfzyyy/Y7Xaio6MBKFu2LEWKFHHfyP1IVJTrP7Nvv/2WN998kz179qQcK1myZMp1wzCw2+0UKqT19pVSKi/sDoNRi8LJbMHcACzAqEXhtK8fjM1qyfqJDh+G+fPh55/h779lRtJp1y4JMC0WCA2FqCgJOlNfYmLk35tvdn3d4sWwZ49cpkyBFi2gXz945BFJEFH5T4UKsGgR7N4Njz9u9mi8Ksczmxs3bqRJkyY0adIEgEGDBtGkSRPefPNNjh07xsKFC4mMjKRx48aEhISkXNasWeP2wfuL4ODglEtQUBAWiyXl9u7duylVqhSLFy/mpptuomjRoqxevZqePXvy4IMPpnmeF198kdatW6fcdjgcjB8/nrCwMIoVK8aNN97IDz/84N0Xp5RSPmp9REyGGc3UDCAqNp71ETFXf6L774cXX4S//pJAs3FjGDkStm6FDRsk0ATpWR0cDA0awJ13wkMPwdNPw+DBknWcegm9c2dYtgy6dJHkkLVroWdPqFIFnn9eAlzl/zZskA8pTk2bFrhAE3Ixs9m6dWsMI+uN1Ve7zxMMAy5d8uopUxQv7vo/Jq9ee+013n33XWrUqEGZMmWy9TXjx49n7ty5TJs2jdq1a7Nq1Sq6d+9OhQoVaNWqlXsGppRSfurk+awDzas+butWuOEG13/wXbpIP+oHH5RLWFjeB2e1Qvv2comOlqX5mTMhIgI++khK4Sj/9v330KOHXF+9Gm66ydzxmMjv12ovXYJUq9BedeEClCjhnud66623aN++fbYfn5CQwLhx4/j9999p0aIFADVq1GD16tVMnz5dg02lVIFXsVRAzh6XkAAjRsDEiRLwPfecHB8+HN5800OjRGZDhw6V/Z+//w5//inJI04DB0KRIjBsmCQfKd9mGDB2rPzcANxzjxRtL8D8PtjML5o1a5ajx+/fv59Lly5lCFATExNTtjgopVRB1jysLCFBAUTHxme6b9MCBAcF0DysrCTpdO8us5ogezFTHuimJaxrsVqlPWHqFoUxMTLjmZAAX34pgfBTT3lvTCpn4uNl68RXX8ntF1+Ed9+VLRYFmN8Hm8WLywyjWed2lxLppkitVmuGLQlJSUkp1y9cedG//vorVapUSfM4LSWllFJgs1oY0bk+/eduwgJpAk5nqDbi3rrYJn0gM4uJiZJhPmOG7Lf0BaVLw48/yr7P8HDo1QtmzYJPPkk7+6nMd/Kk/NysWSPB5ccfS9KX8v9g02Jx31K2L6lQoQI70pXD2LJlC4ULFwagfv36FC1alCNHjuiSuVJKZaFjwxCmdm+aoc5mcFAA45sF0vrFJ2HlSjl4771SYDs42KTRZsJqlXG1bw+TJsGoUbL/r0kTeOEFSVQqVcrsUSqQDwFr1sgHhO+/h7vuMntEPsPvg838qm3btrzzzjvMmTOHFi1aMHfuXHbs2JGyRF6qVCleeeUVXnrpJRwOBy1btiQ2NpZ//vmHwMBAnnrqKZNfgVJK+YaODUNoXz+Y9RExnDwfT8VSsnRu27AeVq2SZaoPPpCkHF9dni5SRGY3H3sMXnoJfvpJltdfflmDTV8xeLCUvnr2Wahb1+zR+BQNNn1Uhw4dGD58OIMHDyY+Pp7evXvTo0cPtm/fnvKY0aNHU6FCBcaPH8/BgwcpXbo0TZs25fXXXzdx5Eop5XtsVgstapaD5GQpNQRwyy0yk9myJdSqZe4As6taNVlWX7xYCsw7uxeBBDoheeiIpHLGMGDuXKmNGhAgS+eTJ5s9Kp9kMbxdq+ga4uLiCAoKIjY2NkOby/j4eCIiIggLCyMgIHtZhiojfR+VUgXS779D376wcCE0bGj2aNxr6VKpBzpkiOw/LVbM7BHlb5cvy37ML7+UhK3PP/fdWXEPuVq8lp42ZVVKKZX//fwzdOokdSxHjzZ7NO63YIEkOI0eLUXlly41e0T517Fj0KqVBJo2mxRqV1elwaZSSqn87aef4NFHZQn9scfgiy/MHpH7ffyxLK+HhkpA3bGj7EGNizN7ZPnLmjXQrJl0BipbVrpAPf98gZvVzCkNNpVSSuVfP/4IXbtKoPnEE7LHLj8uMVss8L//SX3Q55+XY59+KtsFVqwwd2z5xaxZ0Lq1dHxq1Ag2boS2bc0elV/QYFMppVT+9MMPrkCze3eYPTv/F9cuWRI+/FC6ENWoAUePSmF4lTdnzki2eVKStC9ds8Y9bUsLCM1GV0oplf8YhhQ+t9vhySclgSO/B5qptWoF27bBd9/Bww+7jsfEyPKvyply5eS9XLsW3njDK8vmdoeRsVyX1T+X6zXYVEoplf9YLJJ1PmUKvPpqwQo0nUqUkI5DTidPyrL6I4/AhAkyC6qytmWLlJdyFmdv104uXrBkR1SGRgQhQQGM6Fyfjg39r7yVLqMrpZTKP8LDXddLloTXXiuYgWZmfvkFTp2SGd8bbpCldpW577+H22+XWeG9e7166iU7oug/d1OaQBMgOjae/nM3sWRHlFfH4w4abCqllMofvv1WgqgxY8weiW/q3VtqjVarJhnrbdpIMtHFi2aPzHfEx8vezEcfhUuXpPB/hQpeO73dYTBqUTiZFUB3Hhu1KBy7w6dKpF+TBptKKaX83zffwOOPyx7Ngwdlz6bKqF072L5ditsDfPSRBOi//WbuuHzBv/9Kzcx33pHbr7wCv/4KZcp4bQjrI2IyzGimZgBRsfGsj/CvpC8NNpVSSvm3efOkrJHDIbN3n36qdQ+vJjAQpk+Xwu9Vq0pwvnix2aMyj2FI56Xbb5fSUZUqSROAd95xtTb1kpPnsw40c/M4X6HBphcdPXqU3r17U7lyZYoUKUL16tV54YUXOHPmTMpjWrduzYsvvpjlc/z111+0bduWsmXLUrx4cWrXrs1TTz1FYmKiF16BUkr5mK+/lrJGDgf06QMzZ4JV/7Rly913w86dMHw4vPWW6/ixY7KEXFBYLDIj7nBI5YLwcHjwQVOGUrFU9lpIZ/dxvkJ/I73k4MGDNGvWjH379jFv3jz279/PtGnT+OOPP2jRogUx2aiDFh4eTseOHWnWrBmrVq1i+/btfPTRRxQpUgS73e6FV6GUUj7k558lOHA44OmnYcYMDTRzqlQpCTSdS8WGIe9pvXrSeSm/bke4eBEiI12333oLliyBOXNMLQ3VPKwsIUEBZDUvb0Gy0puH+Vf5qoL9WxkZCStXpv2B85DnnnuOIkWKsGzZMlq1akW1atXo1KkTv//+O8eOHeONN9645nMsW7aM4OBgJk6cSMOGDalZsyYdO3Zk5syZFMuPHTGUUupqDhxwzWhOn66BpjtERcn7euSIFC/v0AF27zZ7VO61cqV0AHr0UZnRBCheXF6ryWxWCyM61wfIEHA6b4/oXN/v6m3mn9/MixezvsTHZ3zsJ59A9erSaqp6dbl98SJcvpy9582BmJgYli5dyrPPPpshKAwODuaJJ57g22+/xbjGJ8jg4GCioqJYtWpVjs6vlFL50iuvSCvGadM00HSXypVl3+Lw4VC0KCxfLoHZ4MFw/rzZo8ub8+ehf3/5ux8RIRNNR46YPaoMOjYMYWr3pgQHpV0qDw4KYGr3pn5ZZzP/FHW/WnHae+6RjDKn8uXTBqAOBzz3nFxatUpbe+y666Soa3o5WFrYt28fhmFQr169TO+vV68eZ8+e5dSpU1d9nkceeYSlS5fSqlUrgoODufXWW2nXrh09evQgMDAw2+NRSim/FRcngaXz//w2bcwdT35UvLgsKz/1FLz0EixaJMkyc+fCH3/IEru/WbYMnnnGFVz26wcTJ0qylA/q2DCE9vWD800HoYL5UdCkPSjXmrm8FpvNxueff05kZCQTJ06kSpUqjBs3jgYNGhAV5X9FXpVSKkeSkqT7zZ13ShKL8qyaNaUL0y+/yPXSpaFWLdf9SUmmDS3b4uLgjjtkifzIEZlA+uMPmQ330UDTyWa10KJmOR5oXIUWNcv5baAJ+SnYvHAh68uPP6Z97LZtGZdcbDbYsydj+YdDhzJ/zhyoVasWFouFXbt2ZXr/rl27KFOmDBWyWTi2SpUqPPnkk0yZMoWdO3cSHx/PtGnTcjQmpZTyK4YBAwfKDNWePXDihNkjKjjuvRd27JAZzsKF5dilSxAWJolZGzeaO770Um91CwyExEQpYTRwoNQYbdvWvLEVUPkn2CxRIutLQLoSAddfL1mLzhZmNptsLr/+ekifaJPVc+ZAuXLlaN++PZ988gmX0+0JjY6O5quvvqJr165YclEXrkyZMoSEhHBRO0AopfKz99+X/6ctFil31LSp2SMqWAICZHbT6ddfZXZ51iy4+WZo1kyum/W3yDBgzRop7B8aCmfPuu6bPh0OH4bJk7UfvEnyT7CZU336yKzlypXyb58+Hj3dlClTSEhIoEOHDqxatYqjR4+yZMkS2rdvT5UqVRg7dmzKY0+dOsWWLVvSXE6cOMH06dPp378/y5Yt48CBA+zcuZMhQ4awc+dOOnfu7NHxK6WUaebPh1dflevvvQcPPGDqcBTSM/zvv6WYfpEi8N9/MstZubLMIB496p1xXL4Mn38uwe7tt0uB/3Pn0nZEatxYxqXMY/iY2NhYAzBiY2Mz3Hf58mUjPDzcuHz5sgkjy7tDhw4ZTz31lFGpUiWjcOHCRtWqVY2BAwcap0+fTnlMq1atDKQjVZrL6NGjjU2bNhndu3c3wsLCjKJFixrlypUz7rzzTmPhwoU5Goe/v49KqQJkwwbDKFbMMMAwnn3WMBwOs0ek0jt1yjAmTjSMmjXl+wSGsXev6/79+w3jzBn3nvPyZcMYPNgwypZ1nTMgwDB69zaM//5z77lUpq4Wr6VnMQzfqtgaFxdHUFAQsbGxGTKs4+PjiYiIICwsjID0S+Mq2/R9VEr5BcOAm26CzZuhUydJVvFy+0CVAw4H/P679Bh/803X8VtvhXXrpBLM9dfLpU4d+bduXahfP+3zGAZER0u9z/37XZd69WDECHlMYqJkzdvtkvTz7LPSqrRcOa+9XF9idxhez1y/WryWnv7WKqWU8k0Wiyyhv/aaZA9roOnbrFZpgXn33WmPO/dxnj4tlzVrXPeFhUlvdpBgtVkz2Ls3872ft93mCjaLFJHg8r77JIHJmYNRAC3ZEcWoReFExbpKOoYEBTCic32fqcmpv7lKKaV8V7VqkhCk/Nf27VLFZd8+CSSdlz17JNh0slolsefiRblevbqUWqpZU/5t2DDt886Y4d3X4YOW7Iii/9xNpF+ijo6Np//cTT5TBF6DTaWUUr7DMKQz0O23w//+Z/ZolLuULAlNmsjlar75Rvq0X3edzF6qLNkdBqMWhWcINEGSPSzAqEXhtK8fbHqNzoKbja6UUsr3TJokZY4efdS1vKoKjltukb2cGmhe0/qImDRL5+kZQFRsPOsjYrw3qCz45cymj+U0+R19/5RSPumXX+Dll+X6xIlQo4a548kmM5IzlDp5PutAMzeP8yS/CjYLX+lccOnSJYqlL76usu3SpUuA6/1USinTbd8O3brJMnrfvtKT2w/4Q3KGyp8qlspeNZnsPs6T/CrYtNlslC5dmpMnTwJQvHjxXHXdKagMw+DSpUucPHmS0qVLYyvA2XtKKR9y8iR07ixJJG3bwpQpkonu4/wlOUPlT83DyhISFEB0bDwGEBx3mrCzx4koU5nowPJYgOAgmWk3m18FmwDBwcEAKQGnyrnSpUunvI9KKWWqhAR46CFpJ1irFnz/vav/tg/zp+QMlT/ZrBZGdK5P/7mb6Lp1KeOWTsFmGNgtFl7vMJDvbrybEZ3r+8TPn98FmxaLhZCQECpWrEhSUpLZw/E7hQsX1hlNpZTvsNmkt3Z4uOzZLGv+LEx25CQ5o0XNglloXHlex7BAFieupc6Sj3CGlDbDYNzSKXR8uQdtfGRm3e+CTSebzaZBk1JK+btChSQDffBgv+pf7U/JGSofCg+HqVNhzhzqxsVluNtmOGhT6LwJA8uc3wabSiml/Nh//0GjRq4SN34UaIJ/JWcoPxYZKcXwa9eG0FA5duyYFLh3VpapXh2OHHHdBlkxqFXL++PNgtbZVEop5V2bN8Odd0pbw9hYs0eTK87kjKx2w1mQrHRfSM5QfmrWLAkk27aVTlqzZsnxKlWgUyd48EFYulTq0c6c6WrZabPB9Omu4NQHWAwfK7qYk8buSiml/ExUFDRvLjM2d98Nv/7qtz3PndnoQJpEIWcAqtnoKtciIyXQdDhcx2w2OHRIgki7PWM/+MhI2L9fZjS9EGjmJF7TmU2llFLecfmyzMZERkLduvDtt34baAJ0bBjC1O5NCQ5Ku1QeHBSggabKveRkGD06baAJEmDu3y/XM8tZCQ2F1q19akbTyX9/y5VSSvkPw4DevWH9esk4X7QISpc2e1R51rFhCO3rB2sHIeUe4eHQq5f8nqR3jX2YDgfs3ClboX2NBptKKaU8b/Ro+OYbmcn88UefSl7IK5vVouWNVN5dvAh33AExMRAUJPVnv/zStWSeyT5Mw4CtW2HePPn1OnpULlWqmPQasqDBplJKKc86dQref1+uT5smS31KqbRKlIBRo2DxYldgOXp0pvsw9+51BZi7d7ueomRJ2LbN94JNTRBSSinlebt2ydL54MFmj8RtDAO2bIHffoP/FkRS9Mg+zgfXxlI1lEqVyHCpWFH+LVsWLMcyKWmjCpakJJg4EVq2hFat5JjDIa1aM2nXeuSIbHOeN08KOjgVLQr33QfdusE990CxYt4Zfk7iNZ3ZVEop5RmpM2br1ZOLnzt3DpYvl8mnxYshOhp6M4vv6YsNB/YTVoZvfYsv6MUFSnKBkhjpcnGfsc5iqkMeb1itWGbMgD59zHlByrucdTOTk+G112DTJqhRA3bskCjRmvZn5eRJ6eD6zTewerXruM0mxRy6dYMHHgBfn5vTmU2llFLud/iwTLN8/LFfL5s798Q5g8s1aySGdqpdLJLdl6tjxZHlc1y2FqdNjSPsPVOO4mcjOUI1rKmKJdmxseDDQ9zbL5SiRT35apSpZs2Cvn3TZpmXKQOTJ8MTT6SZzbx4Ed56S3afJCfLMYtFytN26wZdukD58l4efzo5idc02FRKKeVep07J0uDevdCkCWzcmGHGxtcdPgwfD40kYtk+1p6pzTFCsWLnNtbQp+x87jF+Zddna2lRbAtFOrbN+AQWS9qOLpcvQ0AASctWUrhDxse/zRBmlHudx/oG8n//JzW8VT6SWd1MiwU2bICbbko5ZBiwYAE8/7wk+gA0ayYBZteuvrUXU5fRlVJKmeP8eZnR3LsXqlaVv5x+FGg6HNJyOvzlWUxOkKVuBxZ2lbmdGkl7KHbhFMTIYyte/A2atZLXl774dkSETD1duCDvyZUpy9XWQFpZLFjTzfO8xgSePzOZn8b/jxpvz+Hezlaeew7uugusx7O/v9PuMLQMUx547P37+++MdTMNQ342rjh0CAYOhF9+kdvVq8OUKbIf099psKmUUso9EhKkaPvGjRJoLVsmAaef2LdPtk4e/DuSw1f2YAJYMWhw9sqGudKloXNneZ133y3pvzNmQL9+aUvUOF93sWJQoQJwpePQ79E80mEg45ZOoZDhwG6xsrxWc2qfiaRmTCTXlz2DPcbKwoWwcCG8X3YML5wdgdVwSFB7lf2dS3ZEMWpROFGx8SnHQoICGNG5vtcLzPtj0OvR969ly4zHrtTNTEyE996TxPPLl6FwYXjlFRg2DIoXz9tpfYUuoyullMo7u13W+X78UQKwlStl/c8P2O3wwQcwfDjEx0OngJX8Fp/J0vi778r6ZuHCGe+7RqtAu8Og5YQVKYFMcNxprjt3nEOlKxMdWB6LYdD6whE+7dGMvYHNmToVdsxax4pLt6Z5HsNmw+JsWZiKs3Vm+j/oZrTO9KWgN7s88v7Fx8tspjNi/PhjeOGFNB9K/qzZh2eflWININubP/nEP3LptF2lUkop7/rkEwk0ixSB+fP9JtDcuRNuuw1efRWqx+/msxpjmL6idsalf5tNgunMAk24ZqvA9RExaYKv6MDy/FvtBqIDJcvDsFhYWao668vXpF49yRlZPGh5huex2O0cWbEvzTG7w2DUovAMgRK4eraPWhSO3ZG3uSW7w2DtgTMs2HKMtQfOZPp8zqAt9WsFiI6Np//cTSzZEZWnMXiCR96/yEjJ5unTx7V397nnZK185UpObTjEk3/2oU0bCTQrVpT67StW+EegmVMabCqllMq7fv3g8cfhq6+gXbtcPUV2ghl3SUqSZcsmTWDjejvDAt5hR6HG9Do4nKonNspytbNsUxbdW3Li5Pn4az8o3eOK9uuZ6X7XE08NYdaAzSQlye30gWx6BhAVG8/6iJicDDmNJTuiaDlhBd1m/ssL32yh28x/aTlhRZrg0VtBr7u5/f37+29J+tmwAZYulWyzK+whoUzd1Zrr24Yyd67kCPXvL4XZu3fPtLxmvqB7NpVSSuVdkSISaOaSN5deN22SNu1bt0IddrOgdE/qnFsnd3bsCDfdhL1KKFvqNOfy7t0Uq1uXxrc1xJaHc1YsFZDzx4WGptkPalgsJFOIm40N1Pm4Fa3/imTyF4GctOU8kM2JrJaYnbOVziXmnARtvtTeMzcfBDJlGDLD/+KLUq/ohhvg55/huusAmezs1s1VL7NpU0lGa94892P3FzqzqZRSKnfmzpU9aOmzbHPIW0uv8fHw+uvyx337Vjsjir/DzsKNJdAMDJQ6iL/9xpLYQrScsIIuvxyh+/7idPnlSIZZvJxqHlaWkKAAspq4siDBdfOwsmnv6NMnZenVcuQIhQ4dIOLWbkwu9hprdgTSvDl8/0lZSLj2bGF2A97UcjJb6bagzcty9UEgtchImcF87DEYMEACza5dpShrjRoALFkCjRtLoFmqlGyTWL++YASaoMGmUkqp3Pj1V+jZU/5qfv11rp/GW0uvJ0/Cg80iWTt+JcH2SP4J7crIS4OxJSXIbOaOHdC7N0t2Rnsk8LVZLYzoXB8gQ8DpvD2ic/3MM7ZT7Qe1VKtK2Nqv6RsxlMcekzj/2Mx/WTL5FVr8uxeQ5KMWh7cRHHc65fkzDWSzISezlXkO2kyS6w8CIB9QqleXn6HvvpN18IkTpadkiRIkJ0tWeadOcOaMzGZu3iwljmx5mSr3MxpsKqWUypl//oFHHpGs2u7dZa9mLnljv+Hx4zD5xln8urM6K2nLUUt1bv1flTSzmVSt6vHAt2PDEKZ2b0pwUNpgKzgoIMfZzhUrWZg3T9rNjyo6jrqOPcz7axCLJr3CP9N6Me+b1/lnWi+6bl0GXCWQvYaczFbmKWgzUa4/CERGZuwIZLHIWrnFQlSU1EkdO1buevZZ+dWpWdMjL8On6Z5NpZRS2bd0KTz8sBQEvPde+OyzPBVt9/TS6+HD8ESrSP6KdtXNtBgOKUOzZQs0bJjyWG/sOezYMIT29YPdVoPyvvsgbt8P/N55NK22TqJRwu6U+2yGwbilU+j4cg/a5HLfa05mK51BW/+5m7BAmqD9mrO3JnN+EEi/bzg4q33DhgF//ZVxC4nDAfv3s2JvKN26yYx6yZIwc6asshdUGmwqpZTKns8/h2eekRnNtm1l2TCrUkDZ5Mml1/37ZZiNj/6XEmimsNvh9Ok0h7y159Bmtbg1QSawahB3bXmXPW80os64nmnPZThoU+h85l+YDc7ZyujY+ExnfC1IQOacrcxx0OZDsv1BID5epim//TZD9yjDZmPSolq8/IHEo40awfffQ506Xn4xPkaDTaWUUtd29KjUaLHb4YknZEazSJE8P21Og5nsCg+XJczkqJO8X/g1SEr3gCvdW1Lz1z2HTnX6t8N424olVfDjwMqxorXIbR+n3MxWunv21puu+UEgMhK6dJHsHqsVevSQApl2O4bNxgd1pvPy+1Iiq08f+OgjaSJV0OmeTaWUUtdWtSrMng1Dh8ofVzcEmpDHxJksbN4MrVqBJeoY64reSa2k3bI/07ncn0XdTH/dc5giNBRLqvqgDiw8w3QadQrlp5+QGblcyM1eU2fQ9kDjKrSoWc4vAs1rctbPXL8eypSRFPPPP4dDh9g6aSU3lz/Ey+F9KF5cflU+/VQDTSdtV6mUUipzFy5AVBTUru3xU7mrzua6dZIYXPpcBKuLtKNKYoQEyn/8IX/5r9JS0jmO/nM3AZnP4nmz7WOuXWmdGRlQi0cHhbJ2LZQhhn2lmhL4Uh8KD3stV9sf/LHfuVsYhhTEfOGFtPUza9QgKdnghdcvMf394jjsFurVM/j+ewsNGpg9aM/LSbymwaZSSqmMoqMlAejkSfj3X6hSxeOnzGsws2qVDLnchUOsK3IHlRIjJfX3jz+kPE02+WNv76wkJUnP90sTJjOZFwCIb9CUgG9mp0mOUlfxzTeSYQ6S5fPpp1CiBN+tjqbf04U4t0dajpZoEEn9h/fz1sN1/O7nJDc02FRKqSwU2NmZnNi9WwoDHjoE5cvLcuFNN5k9qqtatgwefFCS5Du2uswi7qPQySj4/XeoXDnHz5fffk6WLDb4+dF5jL8wgLKcxW4rjG30KAmiIiJk9joP7TjzlchI2LfP9Z4kJcE990CHDvDyy2CxMOnr07zSvzj2uOJgs1P2rp2UvPEozh8Rv5gBzyMNNpVSKhP5acbKY1avhvvvh7NnZbl58eIMiTS+ZuFCKfuZmCgxwQ8/QDH7BYk8K1Qwe3g+4/hxGNAlip7/9uN+FgGyVcACsp91xgzJainIZs1y1c5M/Z5cuW0YMOlDg5dfMTDsVgqVuUiFB/+jSEVXxr8zqW31kLZ+/QHlWjTYVEqpdLLq7+xXe/E87YcfpEh7QgLccotUDPfxYO3bb2XIzZP/YWC93/nf5jcpUjT//oHPq+RkGP2WQezoD/mAl9ImQ9lsMptdUGc4IyNlu0Xq2pmp3pPYWIk7f/xR7ipeJ4pynbZhLZqc6dPNe+ZWn+oB7245ide09JFSKt+7VmcYC9IZpn394Hw9E3FVP/4Ijz4qyRD33y/t9ooXN3tUV/Xjj/Bqt0gGGt8yzjqMgF3xMK+6tNFUmSpUCEa9ZWFT0I1YXkl3p90uWygKarCZWZF2ux3272fL6VAeeUTyywoVMijVOpxSTQ9hucp/F+nrsea3rRk5ocGmUirf80ZnGL93113QoAHceaf0O/fxxs1r18Lyx2ZxyHgGKwY4gPr1JWBW19S0a22MwWlrctqxkTRyPAFffw3vvAPlCsjvgsMh2eavvprhLsNmY976WvR+Uyb8q1eH4e/HMXr9oWs+bep6rAV9C4/W2VRK+bf4eGk7+M8/0pswKX31bu91hvErSUmyPy35yhJgUJC8h1Om+HygeeAA9Ls3kk+SrwSaTnv2QEzue6gXKFdqchpXvtfJ2BjDGxT5Z6XUjqxbF+bMkZnu/OzIEWjXDgYMkD2+11+fUo/VsNmYdfN0nhgSSkKCtAbdtAl6PhiYo3qszi086T/wRsfG03/uJpbsiPLgC/QNGmwqpfyD3e4KjECWeevVk8bDTZpAy5Zw3XVQtKhkHy9dmvLQqmej6bjnH248vocKF2KkN3YmfLUzjNutXg1Nm8LTT0uPcKfAQK66LugDzpyRJKAWZ39NG2hCypKnyqY+fbAcOgQrV3Lwj0MsaDKK2/mHbTSSVp5PPSWB2N69Zo/UcwoVkg+rxYtLu59du+DwYQ59vpK2YYd45t8+2GwwYQIsWABly+asEcG1tvCAbOGxO/J3UK/L6Eop32O3w59/yh+B7dthxw7pPzh/Ptx9tzzGYpH9ZSDdPEqXhmPHJCU5KirNfsPG4f8ybf74lNsJtkJsDbme1dc14e/rmrA9pDYVypTw3c4w7nL6NAwZIq0mQZZJfTwBKLWEBHjoIYjaG8dYy3Ay/AXPpAWluobQUAgN5XqknOrIkS24+e3/eMH4gFGWkRRbuVIafL/xhvzsnDqVtiyQPzp9Wkp6gXwwnTdPXk/NmhgGfLE8lAEDQrl0CUJCpMzmnXemfYrs9oDXLTxCg02llO8wDJmRHDxYgsz0duxwBZtt28pjGzaUvwgWi+y9OnVK+njXrZvyZdYyZTh7401cPniYShdiKGpPpnlkOM0jwxm0+it6PPoWj/d4WjbrJyZKdxUfn+HLEYdDlkYHD3YtMz/9NLz9tt/sy3M4oFcv6RgYGBhIwsvjYdZb8gHDbs+yBaXKviJFYNw4uOeewvToMZjvIx7hE56lU+ISHHO+xFqxIjz3XMayQP4gMlK2WaxdKz/3334rHQBAWk4hE7j9+8OKFXK4XTv4+muoWDHzp8xOD3jdwiO09JFSynesWQO33y7Xg4KgfXuZVWnUSILKGjXytJ9wyY4oxszfTqEjh2hxZDt3RGzi5qg9bF6xnrub1ZAHvfKKpDm3by+Xdu1k7cyfvfCCJP2AvJdTp7reZz8xbBiMHSurnosXSz4TycnS6egaLShVzp0/Dy++CJ99ZvAI31O9uoWJRx9Lk1DkN6WSUtfOdHrsMZnRRGbM335bAu3EROlqOmKE/FeQ1+3Law+codvMf6/5OH8sk6R1NpVS/uPyZfnfHWRm8557JKv4jTc8EuRlKD9yXRlstlTb15s1g//+c922WORYx45yufXWlAQCv7F9u6wDDhsGzz+fq77YZvrsM+jTx+B1xtFgUl8ef8F/lv793fz58Mwz0PD0SlbSNuMDRo6UnytfTSpbtQpat06b6GSxSJBcrRp//gn/938y6QnSJOiTT+RzrTvYHQYtJ6wgOjY+032b/lwAXoNNpZTvO3sWxo+XjNedO13Luc4lOrNcuCB/oJYvl8vOna77goOlDYtziT0uTpJqfMXFi9Ja8scfZYxffeW678IFSabyM8uXy+ePEcnDGMZY2R6xdaus+SqviI6GIU9E8tmK6tjIJLmuZk146SWpb1qihNfHl6WRI2HUqEzvip2/khfnt+aLL+R2cDBMmiSVs9y9g8aZjQ5ptxn7e0MJDTaVUr4rIUEyoMeMkYATJAt0wABzx5WV48el8fbSpVCpkvxFAgmKK1eWBBvnrGfLlpIN701xcfDLLxJgLl4sM8UgwdjJk7Id4Rp8tdj09u3ylj4aN5OZ9JWDs2ZB797mDiyfyMn33TDgr6dm0fLLfhTCTjI21pXpRHP7GgrHXdkHXLYsDBwoa9AWS8Ye454WGyv7d50rIkuXpuzHTM1htXFj4CF2nAvFYpGZzXHjJMfQU/JjnU0NNpVSvsfhkLTON96QJSyQfZgTJ8ofBH9LyNmzR0ovpf4vtHhxaNMGbrpJ1uNuu82zY3jjDXj3Xdlo5hQWBl26yKV582vOEvvqH8Hjx2XHQoOji1lEZwphhzffzHKmSuVMbr/vZ7ZG8u3Y/by3oBYHE0MpzkUm1p9Nn7j3CYg8IFOD336bdY9xd0kdyF64IPVhZ8+WD63jr1SecDik9u6KFdCvH9jt2LHRl+l8Rh8aNZKcshYt3Desq/HVD3W5pcGmUsq3XLggmZ+rVsntypVlZrNHD9/d65UdZ87A77/L0vWSJbLe6DRypMzwgBSOHjBA9qLWqyf/1q0LpUplfE6HQ7Iz4uIy/hsVJYkNzrItkydL8k+dOq4As0mTbAfuvtov/sIFaNUKHJs2s9pyJyWMC/Kz8sUX/vehxAe54/seGSm/ws6+AFbsvN1iIV0G16RGs7IZe4xbrRL0tWyZ9e98dmdCM0v4cbrzTimblurnJCYGPh8dyZIp+9mVXIuYYqGMHCkr/362fdmnaLCplPIthiFZBt9+C0OHSpqrj/fdzjHDkHXfP/6QfZ6PPy7lmQB+/VXaj6RXtarUVRk9Gjp1kmM//ggPP5z1eWbOlLJFIPUCT5yQ4DWHQZgzcSGrGoBmJS4kJ8ODD8K2X4+w3norwY4oqQjw22+6T9MN3P19379fPld9/bX8ClitMPaulby2LJNkIpDf+0aNoHFjePllCSwh40zotGnyAfXQISll1rWrPC4yEqpVy9jZqH17qQPati1YLNjtsvvl88+lGLtz8r9TJ9nFExZ2zZemrkGDTaWU77HbZYavIP4vf/gwLFok3UnCw+XfEydc96cOIJcvl1qihQrJfstSpSQJKTBQbj/1FDzySJ6H5KslWYb3imT1F/ugcGEWV+pFQOkA6XiUjb2n+ZG7l1499X3fsQOGD5fs9SpEcphMkokCAqS9rNP27bKVJjISo1o1LKnCEYN03XliY+V3YOVK14e41FauhNat2btXAsw5c2QrhlOTJvI59+GHdXLcXXISr2lRd6WUZ+zZAx9+KEu9hQrJ0llBDDRBlhTTJ0DFxEjQee4c3Hij63ibNpLkU7SoR/8q+mKx6T+fnMXIuX2x4cBItmJ5+T2JDgpooOmJ/bSe+r43bAg//wzr18OwYaH0XT6D6UgykR0bP7SfTrH+PWlVeR9Bh7ZKd7A6dQBYv+xfmqeb97IADqsVa7Vq0obWWfmhdm2Z+Uy1hG7YbHyzoRYfD4N//nE9R7ly8MQT0gygceMcvRzlZhpsKqXcb/NmSZA5dUoyQ8eMMXtEvqds2cwLqxcqJBcPy24feG/1i1/7fSR3XAk0Aelf/8orV99SkI9lta8yOjae/nM35Xo/rae/782by/L1n3/24dHBHYjZsJ/91OLY8lBYDhZLXRo3rkvr1l1pvRgSykXz/saL/IMlTa97u8VKq74zGfZcp7SvMzQUZszA6NcPi92O3WJjgG060wbLHk+rVZbKe/WSnSveLg6hMqfL6Eop9/rnH9lrFRsLTZtK4owf9d8uKHyp2PTBg/BS45UsOJ/18mhB4sn9tN7+vkdFwV9/Sc7On3+6iqe7TmhQuEIczxSbyodH3qCQ4SAZK4PqjmROmccIMAJoc10oZ89aiImRBYGzZ6F4TCQ1uRLIEkqdOhJgPvmk5B8qz9M9m0opcyxbBg89BJcuwR13yD7FAroE6g98odh0XJxUiLp150w+ddbSdPKXdohu5un9tGZ+31MHn4uX2zly0JWZXoVIaqUKIK+lVCnJG+rdW8pkZbXrJL+VHPIVumdTKeV9P/4I3bpBUpKsY/3wQ/7LOM9nOjYMYWr3phn2BQZ7qc6m3Q7du0PhnZuZbHnxSlaIRTKNbTYpgljAAk3w/H5aM7/vISFSveuxx2DBlmie+3QXCUfLEn+kHCePl+aUrTHWgESKBxzDViwJa0ASXVpU4M5GpSlbljSXcuWuvePEV+vIFjQabCql8i4mRqYXkpIkU3ruXC1T4yc6Ngyhff1gU2Z+hg2D9Yui2cj9FDcuwV13SWb+oUNQq1aBDDTBO/tpzfy+O1UsFUChkgkUqhdFiXpRWT7u6WfK0qJmzp/fU/teVc7luAHxqlWr6Ny5M5UrV8ZisTB//vw09xuGwZtvvklISAjFihXjrrvuYt++fe4ar1LKF5UtKzOZ/fvDvHkaaPoZm9VCi5rleKBxFVrULOeVgOOrr+CDt+OZz4OEEimZyd99J5nHrVsX2EAToHlYWUKCAsjqu2BBZueah5XN03nM+L6n5snXaXcYjFoUnum+VOexUYvCsTt8aidhvpXjYPPixYvceOONfPzxx5neP3HiRCZPnsy0adNYt24dJUqUoEOHDsTHe698hlLKCwxDNmA5tW8Pn3zi3x2BlFesXy+dC5/kS25lHZQpI/t7y5Qxe2g+wWa1MKJzfYAMgZjz9ojO9f1+36EnX+f6iJgsE6xAAs6o2HjWR8Tk+LlVzuU42OzUqRNjxozhoYceynCfYRhMmjSJYcOG8cADD3DDDTcwZ84cjh8/nmEGVCnl5959F264AXbvNnskyo8cOyYdghIS4MR9T+OYMFFmxZ2dZBTg2lcZHJR2qTw4KCBfLf966nX6Yh3ZgsytezYjIiKIjo7mrrvuSjkWFBTELbfcwtq1a3nssccyfE1CQgIJCQkpt+Pi4tw5JKWUJ/zxB7z2mhRWXrlS+nwrdQ2XL0ugGRUFDRrA3K8sWANfNXtYPssX9lV6gydep6/VkfUYw5AC+d99B4sXw5o1PpmY6dZgMzo6GoBKlSqlOV6pUqWU+9IbP348o0aNcucwlFKedOSIpJI6HNCzJ/zf/5k9IuUHDEOWzu0bN/FjkYk0+XomgYGl8vScBaGkjXNfZX7n7tfp3A96rXqied33aorUAeb338OBA677Fi+GLl1MG1pWTM9GHzp0KIMGDUq5HRcXR9WqVU0ckVIqS/Hx0tHl9GlpNvzJJ9poWGXL22/DynlRbOB+QhOPwcwK8NFHuX4+LWmjrsa5H7T/3E1YyLyeqF/uez1/Xppl7N/vOhYQII00HnlEOrf5oBzv2bya4OBgAE6cOJHm+IkTJ1LuS69o0aIEBgamuSilfNQLL8CGDZLI8eOPUKyY2SNSfmDhQhj9+uUrmefHJPN89OhcP5+zpE36BBBnSZslO7Iuo6MKjnyx73XbNpgzx3W7VCkoXVoCzC5d4JtvpC3wDz9IhfuSJU0b6tW4dWYzLCyM4OBg/vjjDxpf6XofFxfHunXr6N+/vztPpZTytnnzYMYMmcmcNw/CwswekfID27fDq48dZRFPcQvr5YPKL7/IH8xcuFZJGwtS0qZ9/WD/m7VSbue3+16PHoWXX5Zl8iJF4IEHXN3Y5s6FKlV8NrDMTI6DzQsXLrA/1fRtREQEW7ZsoWzZslSrVo0XX3yRMWPGULt2bcLCwhg+fDiVK1fmwQcfdOe4lVLeds89cP/9cPPNPrtUo3xLZCTMvnMWuy4/gxVDgsE+faRgey7lpKRNQdjrqK7Nr/a9JiTA++/DmDHS9tdqlSXys2ddwWadOuaOMRdyHGxu3LiRNm3apNx27rd86qmn+OKLLxg8eDAXL16kb9++nDt3jpYtW7JkyRICAvw840upgi4oCH7+2exRqGzwhcSZc+eg512RLDsngSZc2Sv3wQeyHSOXRdu1pI3Kt5YuhYEDwdkIp2VLmDIFbrzR3HG5QY6DzdatW2MYWVfct1gsvPXWW7z11lt5GphSygfY7bBgATz0kCyfW926zVt5gC8kziQkyI8Me/alBJop7HZJbshlsFlgStqogiU6WpbKExIgOBjeeQeeeCLfJGCano2ulPJhI0bA2LHQty9Mn272aNQ1+EIvaIcDevWCP/+E64vXxoi3YnE4XA+w2fK0jO6TJW0SEuQFHzgAhQvLpUgR+feWW6BaNXncmTMya1W4sCR4XH+9XFcFk93u6rgWHAzDhkFMDIwcCfksWVqDTaVU5hYskEAToFUrc8eirslXEmdefx3+mXeYlrbjDP+5BZajM6BfP9cf1unT89T33OdK2nzzjXwYO38+8/u//toVbP71V9oaiGXKyD7oLl2k3atuNys4Fi2Cl16CL7+EFi3k2LBh5o7JgzTYVEpltHcv9Ogh159/Hh5/3Kun94U9h/7GFxJnPv4YZk44wz90oJb1MIUsC6WSe4cOsnReq1aeAk0nZ0mb9NsFgj29XeDYManj1LixK0CoUUMCzZAQmcV0OCApCRIT5d/UZf8CAuTxiYkQGytJH7Nny6VkSck87tjRM2NXvuHgQfk/9ddf5fa4cRJ45nMabCql0rpwAf73P4iLkw3q777r1dP7wp5Db3B3QG124szPP8PgAZdYTmfqsgeCq0K9enJnaKhbgszUvFLSxjAgPBzmz5eZ/g0b5Hjv3q5gs1kzWLdO/r3WnuZ77pELyEzv6tXw009yiYyERo1cj122TPbxde4sM6DK/333nXz4unBBtk+89BIMH272qLxCg02llIthwNNPw86dMiPz3Xde3VPmC3sOvcETAbWZiTNr18KT3ZKZx2PcxlqMMmWwLFni9gAzPY+VtDEMaVrw+uuuzGCQZI0WLaB5c9cxqzXt7eyy2WR7SqtWkqEfHi61E53ee08CzkKFoG1baRHbvbvu8cQPVz4SEuCVVySzHOCOO6Rmcd265o7LiyzG1VLLTRAXF0dQUBCxsbHaTUgpb/vvP/nDabXCypUys+kldodBywkrslwKdiZ+rB7S1rf/sFxDVgG18xXlNqB2vn/XSpxx9/u3dy/c1sJgXEw/+jITIyAAy++/w+23u+0cXnfpkiTvHDsGRYvCXXfBgw/KLGOlSt4Zw7hxsh90+3bXsTp1YMIE2eeZT7KUc8ovVz5mz4aePeX666/DqFHyIcLP5SRe0zomSimXm26C33+HqVO9GmhCzvYc+qtrJfGAJPHYHTmfA3AmzoArcHXyVOLMiROyxfC5mLck0LRascyb55+BpsMhM5oAxYvDJ5/IEufp09Lx6OmnvRdoggQl27ZJND9uHFSoAHv2SNDbp4/3xuFD/LZNaY8eUqLh118l6TIfBJo5pcGmUiqtNm3kD6uXmb3n0Bs8HVB7sxf0hQvS2ORQhIMWxbcBYPn4YwmG/E14uCxtzp7tOnb//fDWW+a3BKxdG4YOlQSr11+XJKMHHjB3TCbw5Ac1t0tKgrffdlUosFjgs89c+3ULoIIXXiulMpo7VzJpa9c2bQgFoVi3NwJqbyTOJCdD166y66J8eSs1//4ODiyR6NOfJCTA+PEyc5iUJMvmTzzhm/siAwNlVmzgwLQzrB9/LPU9hw2Dsl6sLeplvlBtIVuOHpVfjrVrZQvEV1+ZNxYfosGmUgXdtm2SXWuzwZYtpvXd9cli3W7mrYDak72g7XYY8kQkgb+tolbRO5j7S1Vq17VBXT8LNP/5B555BnbtktudO0vg5ouBZmqpSymdPy9L/WfPwuefS8D53HP5sl6nX6x8LFkiSVxnzkh734cfNm8sPkaX0ZUqyJKSZON6UpLUQrz+etOGYsaeQ29zBtRZvQILkuzgqwF1YiJ82mIWE7+rzjyeYG9CNW7ZOsPsYeVMbCz07y97knftklnC776T0kZVq5o9upwpWVKKxjdqJM3oX3lFyk19/bXsQc1HfHrlIzlZAv1OnSTQbNoUNm260rNVgQabShVsb78NmzfL8tu0aaZnuHpzz6EZ/DmgvngRet8dydMb+mJDAhkLwLPPSo1IfxEe7mq92qePBJyPPGL6z36uWCySobV5M8yaBZUrw6FDshWgTRspIJ5P+OwHtRMnpPuTs9vas8/KrHmNGt4dh4/T0kdKFVTbtkkh6qQk2Vfk5S5BV+N3dfRyyN/Kt8TEwH33QdO1HzGF5zM+YOVKaN3a6+PKtfHj4dZbJSDLTy5elJqd48fLftS1a+Hmm80elds4s9Eh8zalpnwgPX5cZjIvXoSZM6UeagGRk3hNg02lCqKkJEkI2rxZsod/+sk/Z3b8mL8E1FFRcPfdELpjMT/xP4qRbk+czSazaR4u4J5rhgEffSQ/584e5fndwYPSh71XL9exS5ekpJOf88kPav/+C6VLF6gi7aDBplLqWqZOleWesmVd3YKUSufAAVkhvCViHnPoQWGSoWFDWXq22yXQnD7dd+s+Ohzw8sswaZIkvm3alC8CrhzbuVNmnseNk7Jmfv7B0tQPapcvw4ABssf90Ue9c04flZN4TbPRlSqInn4aTp2SP8AaaKpMbNsmf0+jo+GOkPIUOm2Brt2lXuCJE1L3sVYt353RTEqSKgtz58rtfv0KZqAJkmV/+jT07SttOGfO9L9kqFQ8WW3hqg4fhv/9Tz60/PCDTPmXLu39cfghndlUSuWKvywDq5z75x/Zo3nuHNxwAyxdCsHH/oMmTaSVqa+7dElmnX79VWZfP/tMurgUVHY7fPghvPEGxMdLzc5Jk6QShZ/PcnrN8uXQrZtkm5cvL61E27Uze1Sm0mV0pVTm/voLWrSAIkXy9DQ+uW9KucXixfDo/5IZGT+EjU36MnVFHf+avDl3Tmpmrl4t9Sa/+05uK9i9WwLMdevk9j33yCxn5cqmDsunGYb0o3/jDdmW0ayZzA4XlP2/V6G90ZVSGW3dCnfdJdmpZ8/m+mn8tj+xuqZ58+CRzvHMiX+El3mfr852onSxBLOHlTPPPSeBZlAQLFumgWZqdevKezNhgnzg/O03+aarzNntUhZr6FAJNHv3hr//1kAzFzTYVKogcBZvT06GmjVzvc/Ir/oTqxyZMy6Srx9fxHJ7Gx5iPkbRolg/eB+KFjV7aDnz7rtw220yi3/HHWaPxvcUKgSDB8u+w7594cUXXff51kKn+Ww2uO466So1fTp8+mm+7M7kDbqMrlRBMGoUjByZ5+zztQfO0G3mv9d83LxnbjW3P7HKtjNnYMH9s3hqjatYuxEQgGXJEmjVyuTRZVNMTNq+4IahexFzKj5eMtafflqqCxTk9+/iRShRQq4nJ0sjgBtuMHdMPkiz0ZVSLlu2wJgxcn3KlDxln/tSf+KTJ2H9erkcXBVJqeh9XAipjaVqKBUqkOZSvrzrelCQ5/6O+lPSlGHICuqEgZFsinEFmgCWxESZAfcHq1fD/fdLAsyTT8qxghwo5dbMmbKXc906+PZbuX3ddWaPyrtiYuD552HPHimIX6iQXDTQzDMNNpXKz1Ivnz/0UJ67W5jVn/jiRVn1cwaX69ZJFRKA3sxiNhIs2fdY6csM3ifruo+FCsGN5SLpWHMfNTrU5taHQ6lXL+/xiT8lTR06JO3BlyyB1uxLE2gCsj9t/37fLWvktGKFpM1fviwZ50884R/Z8r7o2Wfl/4s33oDff5d6qm+/LccLwnv666/wzDPSxcBqlb2Z+a3DlIl0GV2p/GzsWBg2DMqVk+XzSpXy9HR2h0HLCSuIjo3PdN+mBeljvnpI2zzN6F26JJMra9dKcLljh+zVT60Cp+hVeQlvH38KS6rROCxWxvU9zP74UGJOJBF28A8iLlRg/7nyHL5Unsf4hhnO4BQJTheH9KFtW6lk0q5dzvf/O5Om0r8nprbRy0RyMkyeDMOHQ9KlRCxFijDx+Uief786FkeqgNPXuwKBJLzdcQecPw/33itZ5wW1jqY77dsnS+mrVsntO+6Qvuu1a5s7Lk+JjYWXXoLPP5fbderA7NnSYU1dlZY+UkqJPXukmHXfvm7rfe7J/sSGIUHm4MHgOBpJbfaxj9pEEUJIFRvNm0P7WgfpOactxU4czvqJnL26jx3LEDAZqcYKkIyN6zjEMVyPq1nTFXi2aSPL71lxBuDps/Od3BWA59XmzTJxc/S/E0ziRSqXTyR49Y/UqYMEE/36eaQrkEe2Fhw+LCW8oqJkX+mSJZq44U4Oh3QZGzJElhU6d4aFC80elfstWyY/55GRsrQxaBCMHg3Fipk9Mr+gwaZSysX5K+7GfWyeWDLeuFESY//5BwbyIZN4CSsGBpB4y50U/fcveWBCApQqJUt+NWpIH+jUrFYJRkJDpd9ily7SPeXUKUhMzPTcm99fycKomyn1/WfMOdKabY4GGFeKdVQhkntq7aPOfbVp9UQoTZumXVX09aSpS5ckN+yD9xw85fiMdy2vUto4h2G1Ytm+HerXlwdGRrq9K5BHthacOQMtW0rNyAYNZM+mXxUC9SOHDsms36RJUL262aNxL8OQqgX//iufLr/4Qn6uVLZpsKlUQXf2LJQp49FTuGvGKjoaXn9d/q8valxmVKHRvJo8ngzPdPSoKwjasAGuv16yfbI7K2cYMtPboIHM3Dg5l4x37ZL2c0BiqXLsqtSKyFNF6Rj7bZol9yWV+3DffTLZ064dLNtzjBe+2XLN1/nhY415oHGVHL8/ebF8ubw1RSN2MZ1+3MnfckfTppIA0rSpx87tsa0FH3wgM1ChobLPwpeX+vOjgQNl5u/VV68+5e+rUlcq2L0bpk2T7UbO7HOVbRpsKlWQnTghAVW3blK82Uf3scXHy4TJ2LFw4QJ05Rs+Lj6YcpeOZv4FzqXxzORkVi6r4PSvv2D8eJkpu3gx0y9Nv+RerBjcdFsi4YV3U7zmSWwlsy6A7q2ZzdOn4ZdfYOWXkUSt2ElHljKAKRQhSX4WxoyRgKFQ7vJDs/Mhw6NbCwwD3nlH9mk2aJCr16ByadMmuOkmuV68uBTQf+UVqFjR3HFlx8WL8NprULKk/J6rPNNgU6mCrFs36dvbpIlk1+QyqPAUw4Cff5a/URERcuyWW+CnWq9S+at3pTTTiRNpC0y7O2HlasFpUpKs6c+aJZd01k9YyfrViVz+az3z4u5hC41TltyLhJylVtVt1C21naPXBXGyfFmv7NmMiIAFC2D+fEmi7emYlZIElbJH9d574eOP87Qcmt1lcbdvLTAMmY222XI1buUmhiFdh0aOlN8RkKDz2WdlptMXg874eKnxNXasbKux2SQJKizM7JH5PQ02lSqofvtNggqrVQJN5yyEj9i6VfZl/vkn1GcnFStAn/cb8PjjYI09Kx06BgyAr7/2WMJKtkVGSmCW2ZL74MEpbf4ulKzE0kId+PbcvVRCkm+cy+79S0zm67AHePK+UvS4P4gbb3TPRLNhSPnU+fMlyNy6FUoRxz38Rje+5j5+TVvOyGqVcVetmutz5mRZfMEWN28tGDsW1qyRjHNd7jSfYcDixRJ0btggx4oVk/9/slp98LZjxyTJafp0me4H+WA5a1bKdhmVNxpsKlUQXbggtfEOH5Y9be+9Z/aIUtjtMLZ/JH99uo9zRikG2KbxlONzjNtaYvv7z8yTlzyQsJJjWS25f/UVfP+91CNMteSeeaZ7BMeQIM9mk5XfZs1clxo15OntdilNlP6S+vjlfZHs+Hkfc9fVZv3xUCpyggdYwP/4mXaWPyhsJGX9Wq62DeEacros7taZzc8/l57UIAF+HmvFKjcyDKkEMHKkTK9HRLg+DDgc5tXn/O03eOAB+aUBqWX23HPyuxwUZM6Y8iENNpUqiF5+Gd5/X2bjdu70mRmgpCT4vOUs+qxPt6wLkik+e7bPjDVTVwt6ExJkj+fixRJ8HjmS4cujKzbiXGIJ1iU0Zs3lxmymCTtoyGWKUwVXeafUpZcy05tZaeqDRlhqUMM4gDX1XGOdOpK1NG1a5jOyuQzacxo8uq0e6+LFkollt8t+O91r55sMQxL4nAVqHQ64/Xa49VZZXq9c2bPnT0yE48ddHY9iY+VnvUkTeOEFCTx9bDtRfqDBplIFzcaNsvHR4ZBP9Z06mT0iQGKxZ++PZMay6hm71Pz8Mzz4oCnj8oislt2tVom4U3FYrJwtXIkyidFYMWTJ3TKNWywbKGpJJMCSQFFLolxIoCTnaZK4Lk1gmRK033yzdId66CGoW1fudHPdzNwsi+e5HuuGDTITe+mStKGcPVvbUPqL33+H9u1dt+vVk7qoLVpIuaG6dd0z63nypPxsT50qAe2GDa6fkagoCDG/kUJ+pr3RlSpojh2DwEAJMn0k0Lx0SeKf4GV/ZAw0If/VRgwNhRkz0gZ5U6fCnXdKRfUtW+SyeTPWkycplxiV8qU2HMyw9s/YJukqLCB7GB95JOOdffpAhw5u24aQmzalHRuGMLV70wwJRcHZqbO5f7/sPb50SfbXzZqlgaY/adcOli6Ft96Swrm7dsnls8/k/nfflZUYkO9xcrL8/5Ve+hrBK1ZIIBsZKTOpa9fKJ1rnY6OiXLOoGmj6FJ3ZVCq/iI6WAMcHat/FxUnL6r//hoYB+9gWf33aupn+0A4xt66119Qw4Mcfsw4Sr78eihSBokVd/54/L4lTJrWUzMuyeI7rsTockti2ZYvUAf3zTynir/zTqVNSOH3tWlf/2SVLpA0mSDJg9+6ymbl5cwkeIyNdl127XJnjw4ZJslhqzZvLUvnDD8vvi/IandlUqiAKDjZ7BADExEDHjrKiFRQE03+rjeW/ydKJJPWybn4MNEFe19Vem8Uie9ms1ozB48iRWX9tkSIZl8a99B7arBZGdK5P/7mbsJD5sviIzvUzDSJtVkvO6otarVKVYOBA+OknDTT9XYUKsu+2c2e5nZycdpZ69275ALZjh1zSi4x0BZt33CEfuqpWlZ/9+vWhcWOPvwSVdzqzqZS/Mgx4+mnZ9+j8j9xkJ07IVq0W26dzfbGjtFk9xtWkxheyy31JbvZVmvweeqT9ZFZSd3pR+Vt0tMx+btokHy5CQ10BZZUqULiw2SNUmdAEIaUKgq+/hieekGXWgwc9n/F5DUePwl3tDB7dN4bRvCkHly+Hu+4ydVw+zQ8DcHe1Kc1g8mSZ8W3ePO/PpZTyOF1GVyq/O3NGqqMDDB9ueqB54ADc1dbBoCMvMJAprnG1a2fquHzetZbcfVCOl8Wz48cfZd9dQICU7apRw73Pr5QylQabSvmjV1+VjfcNGsh1E+3aBZ3aJTI+6im68Y0cnDxZ9twpdS2bN0tpI5BtBRpoKpXvaLCplL9ZsUK6qlgsMHOmqRmYO5dGMubRbXwRN4HWrMIoVAjLnDnSn12pa4mKgvvvh8uXpVTTu++aPSKllAdosKmUP7l0SWZ/APr3lyLJJjk8YhZ13+rLvCs1NI0iRbAsXChBg1LXEh8vhVgjI6XI97ffapcXpfIpkxqXKqVyZf58SSipXBnGjTNtGGe3RxL6Vt80xdotycmyrK/UtRiGZN6vWwdly8KiRdqzWql8TD9GKuVPHn9cOm0ULWraH2eHA97vvYPR6bsCORwSCPtZwosyQUICXLggM5k//CDZ+EqpfEuDTaX8zX33mXr6MaMNGm+c4erN7WSzadCgsicgAH7+WSr/33KL2aNRSnmYLqMr5Q++/hqOHzd7FCxdCrEjP6ALP2NYLNLtBfJ/VyDlHtHRrn7XVqsGmkoVEBpsKuXr/vsPevSQ/ZCRkaYN4/BhmPHIciYipZaskybJwZUrpUf3tbrfqIItOloKtvfsKclBSqkCQ5fRlfJliYnQq5e0NOzQwbSZw/h4eOG+A3x2vis2HCQ/2ZNCAwdK+SWdzVTX4sw8P3pUkoLi42UpXSlVIOjMplK+bPx42L4dypeHjz4ybRhDnj3PmB0PUJazJNzYnEIzpmrfapU9hgHPPCO9r8uUkczz0qXNHpVSyos02FTKV23bBmPGyPUpU6BCBVOGMXs2NPx8EA3ZSXyZYIr+9rPOSqnsGzsW5s6Vfb3ffw+1a5s9IqWUl+kyulK+KDlZls+Tk+HBB+HRR00Zxtat8H//B+V5kw5Vw6n27bum92FXfmTuXBg+XK5/9BG0a2fueJRSptBgUylfNHUqbNoky46ffGLKkvW5c9Cli2yva9SpKqGLVoOtYC2d2x0G6yNiOHk+noqlAmgeVhabtWC9B7l2+rR8UgEYPFg6XimlCiQNNpXyRb17S4H0Zs0gJMTrp3c44I2Hwml4YC/J1R9k7lywFrBAc8mOKEYtCicq1pU5HRIUwIjO9enY0PvfE79TvjwsWCBtKMePN3s0SikTWQzDWfTMN8TFxREUFERsbCyBgYFmD0epAumDN89y3+jm1GY/ESNnEzaih9lD8qolO6LoP3cT6f9zdIbbU7s31YBTKVWg5SRe0wQhpXzJli0yrWiiP5bZaTD6MWqzn/PlqhP2bCdTx+NtdofBqEXhGQJNIOXYqEXh2B0+9TndN5w/LyWOdu0yeyRKKR+iwaZSvmLfPmjRAlq3lg2TJojaEEls5ye4m2Uk2IpRcvl807LgzbI+IibN0nl6BhAVG8/6iBjvDcofJCXBI4/A/Pnwv/9JbVillEKDTaV8g8MBTz8t2ThFi0JQkPeHMHMWlZpX43+J3wJg6/kkliaNvT4Os508n73uNtl9XIFgGPDss9LPtHhx+PJLKXWklFJosKmUb5g6FVatghIlYOZM72efR0ZCv75YUy0eF/pilqntMc1SsVT2aohm93EFwrhx8Omn0u/8m28ksU0ppa7QYFMps0VEwJAhcn3CBLjuOq8P4dif+7Aa6faK2u2SEV/ANA8rS0hQAFmF+xYkK715WFlvDgu7w2DtgTMs2HKMtQfO+M6e0blzYdgwuf7RR9C5s7njUUr5HC19pJSZkpLg8cfh4kW4805TahE6HPDix7X5Bis2UgWcNhvUquX18ZjNZrUwonN9+s/dhAXSJAo5A9ARnet7td6mz5Zh+vtvKdMF8OqrspSulFLp6MymUmYaMUJ6RgcFwRdfyDKkl02fDj/8G8qAIjMwnPvsbDa5IzTU6+PxBR0bhjC1e1OCg9IulQcHBXi97JGzDFP6pKXo2Hj6z93Ekh1RXhtLBg0awK23Soert982bxxKKZ+mM5tKmemJJ2DhQnjrLQgL8/rpjxxIIumFoQTzMnUn9sHSpYMsndeqVWADTaeODUNoXz/Y1A5C1yrDZEHKMLWvH2xOZ6OyZWHZMrluwgclpZR/0GBTKTM1aACbN0Phwl4/tWHAqg5jeT7pPR4MWEiV/rugSGiBDzJTs1kttKhZzrTz56QMk9fGeeIE/PSTa8tHgCZKKaWuToNNpbwtORl27IDGjeW2CYEmwG9vbeSxA2MAsI0dja2IlqrxNT5XhunoUbjrLti7VxLIBgzwznmVUn5N1z2U8rbRo6U0zIcfmjaE6EPx1HqrB4WwE97oUaoM6mraWFTWfKoM0/790LKlBJrVqkGHDp4/p1IqX9BgUylvWrFCgk27HSpVMm0Y6+8eRh3HLk4XqkTtZZ94/Hw+W7bHx/lMGaYdO+COO+DIEbj+eli9GmrX9uw5lVL5hi6jK+UtJ05IQpBhSLegxx4zZRh/jv6b+/a9D0DcuzMpH+zZvX4+W7bHD/hEGaYNG6BjR4iJgRtukIQgEz8oKaX8j8UwDJ+aYoiLiyMoKIjY2FgCAwPNHo5S7uFwyLLj779LUtD69dLWz8PsDiNNNnWtoLLsrNKB1onL+e+GXty09TOPnt9Ztif9fzLO0MjbZYT8lWkB+6lTUpkgLg5uuQUWL4YyZTx3PqWU38hJvKYzm0p5w9tvS6BZrBh8951XAs3MApSLy5pyOfEn3i83jqeWD/Ho+X2+bI8fMa0MU4UKsu1jwQKYPx9KlfLs+ZRS+ZIGm0p52o4dMHy4XP/4Y6hf3+OnzGxG8fKBCpzeHAIYXJw0iKIVgzw6Bp8s2+PHvFqGKTkZCl358/D88/Dcc1LoXymlckEThJTytAYNYNIk6NMHevb0+Okym1EsFXuZhxatx4KDwGYRfHd0q8eTdHyubI/KntmzZcn87FnXMQ00lVJ5oMGmUp5mscDAgfDpp3LdwzKbURz67TymJQxkZpE+BN2xN2VG0ZN8qmyPyp6PP5YPRJs2wYwZZo9GKZVPaLCplKf89pskVnhZ+pnC/61YzeNnf8KOhZ/uvA1rEXumj3M3nynbo7Jn/HhXkfYXXoBXXzV3PEqpfEODTaU8Yf16eOABaNpUMnq9KPVMYa9/F/DehrcBCe4aFNqR6eM8wVm2x3nu1LxWtkdd24kT8Oij8Prrcnv4cPjgA+11rpRyG/3fRCl3O34cHnlEkiyaNoXy5b16eueMYkjcad78a2ZKYGfFYNzSKYTEnc50RtEThdc7NgxhavemBAelDWyDgwLcV/bIbodt2+Dff9MeP3UKzp+X+1Xm1q6FevXg++9lX+Z778Fbb3llu4dSquDQbHSl3OncOSmAfeSIdFiZOdPrf7idM4qben2bYUaxkOGg+rnj9Hz27jQzip6s4+j2sj3nz8O6dfDPP7BmjQSZcXHSSvHvv12Pa9RIZu0AAgKgZEkoUUIuVarA0qUaVDVoIO/LddfBrFnQpInZI1JK5UMabCrlLpcvQ+fOsH07BAdLMBPk2fJCWelQpwI3bFuS4bjdYqVf77tpkyqAzKrwenRsPP3nbnLLDKRbyvYYBrRqJUGmw5H2vlKloGHDtMfi49Nej4+H06flduXKaQPNO+6QmpK33y6Xpk2hSJG8jdcX2e3w448y826xQGAg/PEHhIW5Sh0ppZSb6f8uSrlDcrK0n1y9WgLMpUvlD7hJ5n1fiPcTf+JTyzPcYNmO1WHHsNqwTJtGm7tuSnmczxZe/+8/eP99OHkSli+XYxaLBEQOB1SvDrfd5goOGzXKWJ7n7FkJMC9cgIsX5eK8XrGi63EnT8r3DeDnn+XfgAC4+WZ57k6d4M47Pf+aPS08XMpvOWeCn35ajmuPc6WUh2mwqZQ7nDwpM5pFi8LChdJD2iSxsTBoEJygGb+O3kzjpyJh/34stWphCQ1N81ifK7x++DC88QZ89ZXr2JkzUO7KuSdPhtKlIdXrSN+SM2WJ3mKRjk3FismsZVbKlJHl93/+cS3Nnzkjx/7+W647g02HA3btksL8/rIEn5goHazGjIGkJJkFLlzY7FEppQoQDTaVcofKlSVI2b7d3FmwpCSmDDzIiRN1uP56eOUVoGhomuAsNZ8pvH7unJTe+fBDSEiQY927Q69eaVskplsqd8te08KFZb9ny5Zy2zBgzx5X8Hnffa7HbtokM57Vq8O998qlTRsJaH3R+vUym7njShWC++6DqVOz/HlQSilP0GBTqbw4cgSqVZPrwcFyMdHxV97n1S+HE8N4Ok55maJFr/54nyi8vmUL3HWXzCCCBG/vvAM33XTVL/PYXlOLBerWlUufPmnv271bZq8PH4ZPPpFLsWLQrp0Enl26XH0W1Zu++w66dZPZ2AoVZFa4a1f/mZFVSuUbWvpIqdz6+muoVQvmzjV7JAA49h2g3EcjKUISNW8uR/v21/4anyi8Xr++7HOtVw9++UUSVq4RaF5rrynIXlO3t+Ts3h1iYmDRIujXT2YIL1+WcffvL/sinQ4cgP37ZabU006ehM8+k5lMp+rVJdDs3l3G9dhjGmgqpUyhwaZSubF0KTz1lOyB27jR7NGAYRD1wP9R1IjnT1tbHvjpqWx9mSmF19etgx495L0DyfpetkxqZd57b7YCopzsNXW74sVlOXraNJnZ3roVxo6F9u0laclp4kRJvqlQQV7XW2/Jz03qnuO5ZRiyd3TCBEliCg6WWdiZM12Puflm2Qbw5Zder/WqlFKp6TK6Ujm1fr0slyYnyzLl+++bPSLOT/2SKrt+5zIBHBw8ndah2Q8OnYXX0+99DHZTnc0UEREwdCh8+63cvvVWePZZuV6zZo6eymf2mloskgx2ww2uDjxOCQkSSJ85I61Lf/vNdV+dOrB5s2uv54YNkiXvDLQtFtf1okWheXO5npgo51m4EPbtS3u+m25Km5hmtaYNfpVSyiQabCqVE7t3wz33SGBw993wxRd5buuXZTZ1dp06hWXQIACmVxrBc6Nq5XgMbi+8nt7KlfDgg1Jyx2KBnj2lnWcu+cRe02v54guYPl1mPtetk5JD69bJ8npyctqkoj59JLksM1WqQGSkXC9SRJbs9+2T623bwv33S31XTfpRSvkoDTaVyq7ISOjQQWaqbr5ZimPnsfC3O7KpT/V4mQoJZ9jKDdz8zcu5rmrjlsLrmfnmG9lykJgILVpINvSNN+bpKZ17TaNj4zPdt2lBZmY9utc0O5yzks2bw8CBcuzUKTh2LO3jataUANS5v9MwXJdKldI+dtQoqSnaoUPaTH2llPJRGmwqlV2ffy579K6/Hn79Vdr85YE7sqmTkwy+2taIPpRk/j0zGdHax+onzpwJffvK9Ycflv2DAXmfbXTuNe0/dxMWSPMeemyvqbtUqJAxY91ZTD47unZ173iUUsrDNEFIqewaNkxqQS5blufyNu7Kpp46zcJLx1+lUeAR+n/ePE9j8og77oCyZeGFF2SvphsCTSfnXtPgoLTPGRwU4JYWm0oppdzDYhjurctht9sZOXIkc+fOJTo6msqVK9OzZ0+GDRuGJRtZpnFxcQQFBREbG0tgYKA7h6ZUzi1bJku/bl6uXHvgDN1m/nvNx8175tYsl7ajjzuoU89KXJyUe+zf361DzD3DSJtRfuxYxl7kbpTnPa9KKaVyLCfxmttnNidMmMDUqVOZMmUKu3btYsKECUycOJGPPvrI3adSynMMQ9r7deggdQodDrc+fZ6zqTdvJqn+jTSKW02zZq6VatOdPSuJU3/84TpWpYpH6zs695o+0LgKLWqW00BTKaV8jNv3bK5Zs4YHHniAe++9F4DrrruOefPmsT51seFUEhISSHC2p0MiZaVMdfGitEn8/nu5XbWqBJt5zDpPLU/Z1IcPc+n+x6gau5eBfETNqS2x2dw2tNw7cgQ6dZIC4nv2SMb0tVoYKaWUyvfcPrN522238ccff7B3714Atm7dyurVq+nUqVOmjx8/fjxBQUEpl6pVq7p7SEpl3+HD0iP7+++lZ/aMGTBlChRy7+eyXHfumTULIyyM4pF7MQDbbbfQrJlbh5Y727bJdoPwcJnJ/OUXDTSVUkoBHtiz6XA4eP3115k4cSI2mw273c7YsWMZOnRopo/PbGazatWqumdTed+qVZIxfeqUJAD99JMEnh7izEaHzLOpMyS5REa6WhBeYdhsWA4dMrfG4ooV8NBDUkOzQQNYvFhmg5VSSuVbpu7Z/O677/jqq6/4+uuv2bRpE7Nnz+bdd99l9uzZmT6+aNGiBAYGprko5XWJiVIL8tQpaNJEWlB6MNCEXGRT792bYe+oxW6X/ttmmTcPOnaUQPPOO+HvvzXQVEoplYbb92y++uqrvPbaazz22GMANGrUiMOHDzN+/Hieeip7/ZqV8roiReC772TJfOpU6X/tBTnq3LNlS4ZDhs2GpVbOOwa5zbJl0uP8kUdgzhy3ljZSSimVP7g92Lx06RLWdIkUNpsNh5uzeZXKs1OnJIBr315u33wzZDED70nZ7dyz/at/aAQ4sGDFINliZeIDL9L0nI2OZq2iz5ghPc6fecatCVRKKaXyD7cHm507d2bs2LFUq1aNBg0asHnzZt5//3169+7t7lMplTtJSfDpp9L2LzYWVq+Gm24ye1RX9fP6aB7Z+yWd6c6+xmVoWG8th0pX5kRgechmtyG3OXsWSpeWckaFC0O/ft45r1JKKb/k9gSh8+fPM3z4cH7++WdOnjxJ5cqV6datG2+++SZFstFHWou6K49xOCTLfNgw1z7HOnUkEah+fXPHdhV2h0HV1keI+rs6tqBLVO7zF9bCrpUCZx/w1UPaer7GZGws3Hab9PqeNk0zzpVSqoDKSbzm9pnNUqVKMWnSJCZNmuTup1Yq937/HYYMgU2S/U3FivDmm7L8m40PQaY5e5Y9vYdz6e+3ACjXfkeaQBMkkz0qNp71ETHZWo7PteRkeOwxKW907hzExECItoRUSil1dW4PNpXyOWfPSmmeCxegZEkYPBheekmu+zjjlVepP38WP7KL+6+fS7Gap7J8bHa7EuXaK6/AkiVQrBgsXKiBplJKqWzRYFPlT5GRrtqTZcrA66/DiRPwxhtSQ9Mf/PEHls9mATCy0HDKtAu/6sOz25UoV6ZPhw8/lOtz5vj8HlellFK+Q9NHVf4SHQ3PPgthYWn7cw8dCpMm+U+gefEi9j7S8HwKz3G0Q2UKB2Y+c5lltyF3WbECBgyQ62PGSOF7pZRSKps02FT+7+RJKVn08MNQo4bUyUxOliVff/Xmm9gOH+QIVZnXaDwfjykFkKG9pfP2iM71PZMcdPEidOsm7+fjj8sMsVJKKZUDuoyu/Fd8PLRtC//+C6mLKtxyC0yYAK1amTe2vFi/HmPSJCzA/zGdDz4tRfPGpbAVasqoReFExbpmOIODAhjRub7nyh6VKAFffw3vvQezZkm5I6WUUioHNNhU/uHyZVnO3b8fXnhBjgUEQEKCBJpNm8J998G990pxdj8OihxDhmJ1OPiS7oQ924nmzeV4jroNuVO7dnJRSimlcsHtdTbzSutsKi5dggMHJLDcv1/6bf/+uwScRYrA6dNQSpaV+e8/CA6GKlXMHbMbvTf0NMXefpMpFd5izd7ylC5twiDGjYMuXaQOqVJKKZWOqXU2lcqWs2ddAeWBA1KKyNmP/KWXpA1ielWryuzlxYuuYDOfZUXv3w9vfFCeBD7h6w8xJ9D8+GPJ2n/vPdi3D8p6KPFIKaVUgaDBpnIfw5AgMipKssJbtHAFkF9+KUk80dFw/Lg8LrX774dGjeR6rVoSZdWqJZcbbpDl8UaN/Hp5/KoOH8aY9w0jfnuchISq3HWX1E/3uuXLXdsUBg/WQFMppVSeabCpcu+vv+Dnn2HLFjh4UALJpCTX/Vu2wI03yvVjx9KWIgJZ/q5VC2rWTNvFZ9AgePVVT4/ed8yaBc88g8Uw+JKhlCo0k5c/6eP9uPrYMejaFex26NFDgk2llFIqjzTYVFcXFwdbt0rguHkzjBgB1avLfWvWuAp9p1a2rASSiYmuY/fdJ0XWg4Plct11WXfwsdnc/Sp8V2Qk9O2bkk1vxeATez+sxToAod4bh8MBvXrJjPNNN8k2hvw6i6yUUsqrNNhUaSUnwy+/SLmbTZtkP2Vq99zjCjbbtYMXX4TGjaFuXWlfWKkSFC2a8XkbNpSLSmv3bgn0UrEadtm8GerFYPPjj2UJPSAA5s7N/HuolFJK5YIGmyqtzz6Dfv3SHqtaVQLKJk2gXj3X8ebNSanLo3Lnt98yHrPZZHuBtxgG/PijXH/nHfngoJRSSrmJlj4q6Navl+Lod94pt2NjJbB89FG4+27Zc1m+vKlDzLf++QfjzjuxOBzYsWLDIYHm9OnQp493x5KUJLPZPXro8rlSSqlr0tJH6uri4+Hbb2HKFNi4UQqib9woQUZQkCydW7WTqUclJsKTT2JxOJjDk0yqMI6VM/cTdFMt7y6fOxUuDE895f3zKqWUyvc0oihIDh2C116TYKZnTwkwixSBBg2kYLqTBpqeV6QIW57/jD9pxXN8zOjPQwl6oLV3A801a2Do0LSJXEoppZSb6cxmQfH885IE4kxGqVYN/u//4OmnoUIFc8dWAMXFwUMftuYQf/L001JG1KsuXIAnn5SSVYUKwejRXh6AUkqpgkKnsAqKTp0kEeSuu6Q25oEDMqulgaZ37d8P+/YxaJBMNF93Hbz/vgnjGDRIAs1q1eCVV0wYgFJKqYJCZzbzK8OQaCYsTG536gRHj+arHuJ+JzERunYlOXwPkfE/YLF0ZPZsV+dNr1m0CGbOlD26c+bIPl2llFLKQ3RmMz+KjZVOME2bSsDppIGmuYYNg02biEsoynYaMWiQqwiA15w8KVsnAF5+GVq18vIAlFJKFTQabOY3W7ZAs2bw/feyL2/dOrNHpEAKpr/zDgC9jVmUrl+FMWO8PAbDgGeekYCzUSO8PwCllFIFkQab+YVhSH3GW2+VfYHVqsHq1TLDqcx16pTUrwSm8n/8WuhB5syRZj1etX8/rFghFQi0S5BSSikv0T2b+cGFC9L15+uv5fZ998Hs2dKjXJnLMKB3b4iOZpe1Pi873mP4cGk/7nW1a0uf+w0b4IYbTBiAUkqpgkiDzfzgvfck0LTZYPx42YuntTJ9wzffwC+/kGgtSlfHPBreXJyhQ00cT40aclFKKaW8RIPN/GDIEPjvP/n39tvNHk2BZ3cYbFmzg/hduyhWuw7G3a/x+bIq7Au4gc1zpFmPV02dCtdfD+3aefnESimllAab/uvPPyWT2GKRzX8LF5o9IgUs2RHFphHvMeTn97EZBnaLlf+zTuNTnmHS21C3rpcHtHmzFPRPTob16+Hmm708AKWUUgWdrrX6o1mzoE0bKWFjGGaPRl2xZEcUoz5ZlhJoAtgMB1Pt/alZeRu120R5d0DJydCnj/z7v/9JlQKllFLKyzTY9DdLlkgyEEBIiMxsKtPZHQajFoVz3dnjKYGmUyHsNLnpd0b/Go7d4cUPBx98IDObZcrAJ5/oz4pSSilTaLDpTzZtgocfBrtdSuloP2uvsTsM1h44w4Itx1h74EyGoHF9RAxRsfFcFxNJ+nAyGStHQ8sRFRvP+ogY7wz44EEYMUKuv/ceVKrknfMqpZRS6eieTX9x6BDccw9cvCj9zZ3tBpXHLdkRxahF4UTFxqccCwkKYETn+nRsGALAyfPx3Hx0ByP/mIkFcGDBikEyNl7v+BzRgeVTHudxhiGz35cvQ9u20LOn58+plFJKZUFnNv1BTAx07AgnTkh9xB9/lMLcyuOW7Iii/9xNaQJNgOjYePrP3cSSHbIPs/qJI8z8aQxF7UksKtGB64igbdGltOg5h+9uvDvl6yqW8kIl9+XL4fffJXFs+nT9UKKUUspUOrPpD9auhQMHIDQUfvsNAgPNHlGB4NyHmdkuSwOwAKMWhdO+jMGN/bphib/A+pKN6XrhJy7bipL0SCRFKyXBlccGBwXQPMwLhfbbt4d58+RDSq1anj+fUkopdRUabPqDe++FX3+FypWhShWzR1NgOPdhZsUAomLjCV+3k0ZxcZwqV5N7ziznMsUp12kzRaucAyTQBBjRuT42qxdmGS0WeOwxz59HKaWUygYNNn3Z+fNQqpRcv/vuqz9WuV1291cerFGfpI/+4YleRThDeaq0jqBQg+Mp9wen29/pMVu3QtWq2qZUKaWUT9Fg01d98AFMmQKLF0v3F+V1V91faRhUPn+K44EVsccWp+NLVTiVJOUsv/n2OjYeDuTk+XgqlpKlc4/PaF68CA8+CJcuySy41tRUSinlIzRByBd9/z0MGiTlaxYvNns0BVbzsLKEBAWQWZj40uqvWDJrAJ2i9jJiQGlOnYImTWDOHChcyEKLmuV4oHEVWtQs552l8xEjpGJBQIAJbYqUUkqprGmw6Wv+/huefFKuDxggrQaVKWxWCyM61wdIE3A+tmUJL6z5hsDES1T9tyg7dlgIDpaOoSVKmDDQ//6TmXCQPuglS5owCKWUUipzGmz6kl274IEHICFBlkQnTdKyNSbr2DCEqd2bEhwUQHDcafqv/Y4xSz8G4PsbhvDG3mcJCIAFC6RYgNclJ8Mzz4DDIUlB99xjwiCUUkqprOmeTV8RFydZ52fPQosW8PXXYLOZPSqFBJx3r/0Vyxv9sBgOAKJr3saj28YD8MUX0Ly5SYObNMnVknLSJJMGoZRSSmVNZzZ9xZtvQkQEXHedrMcWK2b2iJRTZCTW/3MFmgDlD6yjCscYORK6djVpXAcPys8NwLvvaktKpZRSPklnNn3Fa6/B4cPw4otQvrzZo1Gp7dsny9SpFMJO3zb7Gf6mGWvnV5QuDd26SWJQr17mjUMppZS6CothGJk1SDFNXFwcQUFBxMbGEqidcpQviIyE6tXTBJx2bCTuPUSx2iYGm06Jidq+VCmllFflJF7TZXSzbdxo9ghUZuLjZQ+k3Q6hodinzsCO7KFNxsb5d6ebF2jGx0Pqz4gaaCqllPJhGmyaaeFCuPlmeOqptMGDMldUFLRpAy+9BEOHcvkydF3Wh+ocokORlez67RClX+5j3vieeUaSyQ4fNm8MSimlVDbpnk2znDkDffvK9UqVtMSRr/jvPyk/dewYlC5NbPP23HMXrFkDRYqE8ux3oTTqZOL4li6FuXPl5+XECVneV0oppXyYBptmGThQgoX69eGtt8wejQL45htJtImPh7p1OTJlIXf1r82+fZKLM38+tGpl4vguXoT/+z+5/vzzJtZbUkoppbJPl9HN8OOPMG+e1NH84gtpMajM43DAG29IZnd8PNxzD/99/C/NukmgWa0a/POPyYEmwMiRknletSqMHm3yYJRSSqns0ZlNbzt50jU79dprsmdTmSMyUsoa2Wyudo+DB7Pw1nE8dp+Ny5el3/mvv0JIiLlDZdMmeP99uT51KpQqZe54lFJKqWzSYNPbnn0WTp+GG25wFeRWmbI7DNZHxHDyfDwVSwXQPKwsNqub9rbOmiV7Zh0OsFrl+m238cn5Jxn4sBzu2BG+/94HWo0nJ8PTT8ugunaV5CCllFLKT2iw6W29e0u5o9mztWTNVSzZEcWoReFExcanHAsJCmBE5/p0bJjHacbt2yWj21kBwOHAmDmT8ZY3eGOqHHr6afjkEyhcOG+ncotjx+DCBdk4+uGHZo9GKaWUyhHds+lt99wjS7eNG5s9Ep+1ZEcU/eduShNoAkTHxtN/7iaW7IjK3RPHxsKIEXDLLRlKTVnsdpZN3Q/IdsgZM3wk0ATJON+6FZYv15aUSiml/I4Gm95gGHDqlOu2z0QxvsfuMBi1KJzMqo46j41aFI7dkYO6pBcuwPjxEBYmmf+XL2d4SDI2DtlqMXs2DBvmg5WoihWDZs3MHoVSSimVYxpsesOcOVC7Nnz1VZYPsTsM1h44w4Itx1h74EzOgql8ZH1ETIYZzdQMICo2nvURMRnuy/Q9/OEHqFEDXn8dzp6FevVkI+aMGRg2V0egF4pO59MlofTo4alXlgvffiuJS3a72SNRSimlck33bHpaZCS88IIs4R45kulDPLo/0c+cPJ91oHm1xznfQ+NoJGFnjxNRpjKWqqF8GGyh+alTULMmjBoFjz1Got3Gxx/DpyU6USFuPxeDazFraSg33OCJV5RLp0/DgAHyb8mSssdUKaWU8kMabHqSYUCfPhJoNm8Or76a4SHO/Ynp5zGd+xOndm+a54DTo1ndblaxVPZqjqZ+nPM9fPK/RYz8fQZWDOwWC693GEjXG+/mh4++4KZ+j2MUKsz8+TB4MOzfDxDKTTeFMn8+hJrU5jxLgwZJoNmoEfTsafZolFJKqVzTYNOTvvgCli2Tou2zZ0OhtG/3tfYnWpD9ie3rB+c6OPS3WdPmYWUJCQogOjY+0/fFAgQHScBMYiL2NWs5/tanLAhfS6MTB3C+SzbDYOzSKawKa8qA86FM3lqIwa/Cn3/K/ZUqwdixEsddWU33HcuXw5dfysbRmTN1j69SSim/pns2PSUuToq2gySl1K2b4SF52Z+YHR7L6vYgm9XCiM71gSuBZdxpWhzeRnDc6ZRAckTn+tiGvQFlymBr05reK+dyQ6pA06mQ4SD0+Gm2f309tzSXQDMgQJoF7dsnk84+F2heuuQq+j9ggGTOK6WUUn5MZzY9ZcwY6RZ0/fWyZzMTud2fmB15mTX1+LK7s3NP7dqZrl93bBjC1O5N2fH6WF765RNshoEBTLqnP/UmDJcZ2RIl4NIl4suWZ0lwA3ZUrMHQv77AlqqkUTJW/v21CxeTqwLw+OOSlF6tmvteituNHAkHD0pLyrFjzR6NUkoplWcabHpKYqJ0pnn//SyLt+dmf2J25WTWtEXNcinHc7Xsfo3gMY30nXsmT4bnnpP7VqyQ9+vIETpGRNDxwoWUL7MALy6ZjmX663KgZ0+4/342FwvhxU/XARAXUIpxS6dQyHCQjI1+TCcy+TqKVolhyoc2nu4SlPJ8PrmP9eRJ+Ogjuf7JJ9qSUimlVL6gwaanTJoEAwdK2Z0s5Gh/Yg7lZtY0V8lK6YPH6dOhVy/X+vSuXfDTTxAVBQcOwJIlrq91OOD55+GBByRIPXtWGpFnweJwSGZPaChUqQJVqtDcYRASFEDkMYNZRh9+KN+XaqdOsZ9aRAeVpUKrTdS45Sy9Hmqb5nX65D7WihVh/Xp5v+67z7xxKKWUUm6kwaYn1ax51bud+xP7z92EBdIEeWn2J+Zixi2ns6Y5XnZPTobff8/Q9pFnnpH7nPsOd+2SKulZSR1ANm8uCTHVqslscLt2cr+TzQa1asmYDHnqBQssnP3mDiK3yexxDHCoSBJBLfZTpdl2rIUcjLy/acp76I3s/zxp1EguSimlVD6hwaY7JSfLTN2AAVC/fra+xLk/Mf1MW3AeZ9pyOmuaftk9OO50Sr3K6MDyYDhcy+571sEjj0gyS2Z27nRdr1dPZjorV5YuOMOHp20VmSqApGpVaUruNGMG9OsnRc1tNhxTp/NPRCgLJsGCBc7yRQASaJYIjaVwjShK3nAUW4nEDLOV3sj+z5XDh2VWV1uYKqWUyoc02HSnGTNg6lRZBj18GIoWzdaXdWwYQvv6wW7dQ5jTWdPUy+mPbl3K20unYL2SmBNTLJCPbnuML5rdL4+rUUMCzVKl4Pz5dCe2wUsvuW7Xqweffea6HRycJoBk+vSs93n26cP52zqw9cf9/LStFl++Hsrp0667nZOfDzwAnTtDpeBA1kckc/J8qUzfw9zuY/Uoux2eegpWr5b3ok8f75xXKaWU8hINNt3l7Fl48025Pnx4tgNNJ5vV4vYAJyezphVLBWBz2Hli82JG/T4tJSC1AOUux3Hb4a180ex+WXYPC4EdOySQ/PzzjMHjVfap0qcPdOgg05K1akFoKIYB0dGwe7csjTsvu3fDsWOhgCsYLVMG7r1XAswOHdLn0Fz9PfRk9n+uvf8+/PWXZNe3bu298yqllFJeosGmu4waBWfOQIMGEnz5iOzOmjavWJRVn/ajytnoTJ/nmxs7EOJcdrda5HVCpsFjVhITparPvn2h7NoVyq7ZrgAzNjbr1xAWBvffLwFmy5a5r3Huyez/XNm6VYp+Anz44TX3+CqllFL+SINNd9i9Gz7+WK5/8EGGTkFmy3LW9NIlKF5cHlOqJIUa30jM2ouUjj+fptp/ssXKroo1sk5WCg1NCTKTkuDQIamElP5y+HDafJ/UrFYJKuvVk0vduq5/y5TJ2+t38mT2f47Fx8MTT8gb9uCD0Lu358+plFJKmcC3oiJ/NWiQJAd17gzt25s9msylroWZlATvvQdz5sD27VC9OgCV5n7GsuPxbBz/CYN//kDqVVqsTHzoJUY8e3eGZKWEBFizRrorbtkiTx8RISvqWSlRQiZAncGk81K7tnT38SRPZv/n2NChkkhVqZLs9bX4Zq96pZRSKq8shmFkNsljmri4OIKCgoiNjSUwMNDs4Vzb8uVw992ytrtzp0RNviZ1LUyQwMb5bX/7bRgyJM3D7Q6DLWt2cHn3borVrUvj2xpis1owDAgPl5e8bJlsNcwsIb1YMQkoa9fOeAkONj+uMr3O5saNcPPNcv2XX2QTqlJKKeVHchKvabCZV4mJ0vXlwgUYMcLs0WQUGSkzl+nXr++8U8bbps1Vo7+TJ6Wc5rJlEmQeP572/kqVZDK3ZUuoU0cCysqVs35KX+ncY+o4DEM6BB04IAlCSimllJ/RYFO5LF0KHTtmPL5yZZbZz4cOwbRp8qVbtqS9LyBA4tS775Ygs1Gj7M9Umj6jqJRSSim3yEm8pns2c+vCBSlvlNvUaG9p0CDtsjmkLaSeSnQ0jB0r1YuSklzHGzd2BZctW+Zub6XPd+7xhjVrJDrXnudKKaUKEOu1H6IyNXgw3HAD/P232SPJKCnJtd4dGioJKM5e5ZkUUj97VvJVatSAKVPky9u1g6++ghMnYPNmmDAB7rord4HmtTr3gHTusTt8apLdvQ4fhk6dJHI/dMjs0SillFJeozObubF9uwRsDsfVU6/NEB0Njz4Kp0/DunUyi/b007KUnq4W5oULMHkyTJzoqnN5yy0wbhy0beu+Iflk5x5vcnYJiouTmear1CJVSiml8hsNNnPKMKQdo8MBXbr4VteXtWvh4YdlVrNUKcmOv/VWuS9VLcyEBImVx46VBCCAhg3ldufO7s8W98nOPd703nuSul+yJHz5pc/VYVVKKaU8SZfRc2rhQvjjD9mv+c47Zo9GGIZk9LRqJYFmvXqwYYMr0LwiOVm6S15/PbzwggSaNWvKcvnWrdKlxxNliXyuc483bdkCw4bJ9UmTtEuQUkqpAkenWHIiMRFeeUWuDxokLW/MFBkps5effQbffSfHunSRiDJdEsqiRfDqq7Bnj9yuXFkqH/Xq5fkcJ5/q3ONN8fHQvbt2CVJKKVWg6cxmTsycKfseK1WSjBozzZol9TM7dpRA02KRLJ7vv08TaBoGjBkjs5Z79kC5cvDuu/Iy+vb1TjK9s3MPuDr1OHm9c483jR6tXYKUUkoVeBps5sRff8m/I0aYW74mMjJtRyCQQObxx9MENElJ0KcPDB8ut59/Hg4ehJdfli4/3tSxYQhTuzclOCjtUnlwUED+LXv0/POyCXbWLKhQwezRKKWUUqbQou45YRjSRqdNG3PrazpbZKaXqlD7uXOSK/THH2C1Skmj/v29OspM+UoHIa8xDJ3RVEople9oUXdPsVgyD/K8KSYGBg68aqH2w4el3fbOnVCihKyy33OPSeNNx2a15M/yRk5xcTB/PvToIbc10FRKKVXA6TJ6dixcKEGe2RIS4KGHZPNl6dKZFmr/7z9JQt+5E0JCpOa8rwSa+V5yMnTtKjU133zT7NEopZRSPkFnNq8lIkLWo0uUgG3boGpVc8ZhGLIBc9UqCAyU/aNlyqQp1L5oETz2GFy6JF0Rf/3VvOEWOIYhM85LlsiG2M6dzR6RUkop5RM02LyWN9+UTJtmzcyN3EaMkIKYhQrBjz9KNAkphdqnTJHamQ6HrPR//73EpJ5W4PZgZuWDD6TWqcUi36ebbzZ7REoppZRP0GDzarZtk8AB4O23zRvH559LGR2Q5fK77kq5y26X+pkffCC3n34aPvnEO/lLS3ZEMWpReJpWlCFBAYzoXD9/Zpdn5eefXfVX331XtjoopZRSCtA9m1c3dKgsjz76KNx0kzlj2LFDyhwBvPFGmsLgly7BI4+4As3x46Wco7cCzf5zN2XoeR4dG0//uZtYsiPK84PwBevXwxNPyM9J//7SylQppZRSKXRmMyurVsFvv8my9Zgx5o2jQQNZyt+92zW7CZw6BffdJ7FOkSIwe7bs1/QGu8Ng1KLwTLsBGUih9lGLwmlfPzj/L6lv3Sqdgjp1gsmTNftcKaWUSkeDzcwYBgwZIteffhpq1zZvLBaLVGVPVa8xMRH+9z8JNMuWhQULoGVL7w1pfURMhhnN1AwgKjae9REx+bvMEcAzz8B110kJgEL666SUUkql55Fl9GPHjtG9e3fKlStHsWLFaNSoERs3bvTEqTwjPl4ScEqVMqeEzYULEuxevOg6lmrG7MUXYfVqSQD6+2/vBpoAJ89nHWjm5nF+JykJYmNdt9u3N7ejlFJKKeXD3B5snj17lttvv53ChQuzePFiwsPDee+99yhTpoy7T+U5xYrJ5scjR6RYpTfZ7dCtG0ycKBsy0/n0U5g61ZX0XL++d4cHULFUwLUflIPH+RXn3szbboNDh8wejVJKKeXz3L7uN2HCBKpWrcrnn3+eciwsLMzdp/GO0qW9e76jR6VW4y+/QECAq6n5Ff/+C889J9dHjjIoVy+GBVu8X3KoeVhZQoICiI6Nz3TfpgXped48rKxXxuNVEydKr3OrFcLDZQldKaWUUlly+8zmwoULadasGY888ggVK1akSZMmzJw5M8vHJyQkEBcXl+ZimsuXpXD6zp3eP/esWVC9umzABOjVC1q0SLk7Kkr2aSYmwm3t4vnNuoJuM//lhW+20G3mv7ScsMJrGeA2q4URnWVKNX1467w9onP9/Jcc9N138Nprcv3DD7U1k1JKKZUNbg82Dx48yNSpU6lduzZLly6lf//+PP/888yePTvTx48fP56goKCUS1UzC6dPmQKffSbdX+x27503MlLKG6XudT5jhhxHulR26SIBZ7WaSUQ2+pPo8+aWHOrYMISp3ZsSHJR2qTw4KICp3Zvmvzqby5e7+p2/8AIMGGDueJRSSik/YTEMI7OV0FwrUqQIzZo1Y82aNSnHnn/+eTZs2MDatWszPD4hIYGEhISU23FxcVStWpXY2FgCvdECx+nsWahRA86dgy++kP7W3rJ0KXTsmPH4ypXQujX9+knsWbq0wXV91nK20NlMn8a5fL16SFuvzSrm+w5ChgEffyxZWXY73H8//PSTqy+9UkopVQDFxcURFBSUrXjN7TObISEh1E+XtVKvXj2OHDmS6eOLFi1KYGBgmospJkyQQLNhQ+je3bvntmbybbDZoFYtpk+XQNNigTffO59loAlpSw55i81qoUXNcjzQuAotapbLX4EmyL6FTz+VQLNHD/j2Ww00lVJKqRxwe7B5++23s2fPnjTH9u7dS/Xq1d19Kvc5dkz24AGMG+f9YKJ9e2kD5Aw6bTaYPp1/DocycKBrWDWans/W0+XbkkNmKFpU9tF++KHMeAfkwwx7pZRSyoPcHmy+9NJL/Pvvv4wbN479+/fz9ddfM2PGDJ5zplH7opEjpbZmy5bSlsdN7A6DtQfOsGDLMdYeOIPdcZUdCy++CIcPy9L5oUMc69iHLl2kpOMjj0jZzQJdcsibdu6UHvRO1avD889rdyCllFIqF9xe+ujmm2/m559/ZujQobz11luEhYUxadIknnjiCXefyj1275akIJCldDcFFEt2RDFqUXiaTjshQQGM6FzflTwzYYKUznn0UTlvaCiEhhIfD/9rBSdOSG35zz6Tuwt0ySFv+eUXePxxOH8eqlbVjHOllFIqj9yeIJRXOdlw6hbx8ZIAsnOnK+jMoyU7oug/d1OGgNAZxk7t3pSOlyOlxaHDAWvWpJQ5MgzpkPnZZ1CmDGzcKHlL6Z8bSPP8aZ47v2WCe4NhwDvvSGkjw4DWreH776F8ebNHppRSSvkcUxOE/E5AALz8stsCTbvDYNSi8ExnHp3Hxv+0BaNnTwk0u3VLU09z6lQZitUquSipA00ogCWHvCE+XqoPDBkigeb//R8sW6aBplJKKeUGbl9GL+jWR8SkWTpPzwC6Lv4MS3g4VKoEH32Uct+qVVLCEWSFvX37zJ+jY8MQ2tcPzt8lh7wlOhoeekjaM9lsMHkyPPus2aNSSiml8g0NNt3sWpngNx7fQ791P8mNadOgXDkAYmJk62Zyskx2vvzy1c/jLDmk8mjZMgk0y5SRZfN27cwekVJKKZWvaLDpZlfLBC+anMg7v32IzXBw6v4uVHjwwZT7XntNEoLq1ZOyjpr47EGnTkGFCnK9Rw/X7Gbt2uaOSymllMqHdM+mmzkzxjOLFVsd/I/rzxzhTMkylP10Wsrxf/4BZ/v46dOheHHvjLXA2bZN6khVrw7Hj7uODx6sgaZSSinlIRpsupnNamFEZ+mglD7gXH59C57oOoaIdz/GVkGSTxIToV8/ub9PH7jjDi8OtqDYvBn+9z+48Ub44Qe4fFlahCqllFLK4zTY9ICrZYw/Oaw3zfp1Szn2/vtSdal8eUkKUm60caP0Mm/aFH7+WfYmdO0K27dDr15mj04ppZQqELTOpgfZHQbrI2Io+tUcjNZtaNzyxjQZ4wcPQoMGUnlnzhx48kkTB5vfnDsHlSvLLKbVKllXb7whm2KVUkoplSc5idc0QciDbFYLLcLXwMiXoVgx2LULqlUDpJzjs89KoNm2LXTvbvJg/ZndLtPD//wjM5YBAVC6NAwYIFlXr78OdeqYPUqllFKqQNJg05OmTYP+/eX6pUuwfLlszAS++062DRYpIoXcNfs8By5dgg0bYPVqCTDXrIHYWLnvhhvg9tvluhvbjyqllFIqdzTY9JTIyIzFwfv1gw4dOFcylBdflENvvAHXX+/10fkXw3AFjV9+KQF7UlLax5QokaYTE6CBplJKKeUDNNj0lDVrJEhKzW6H/ft5/btQoqNlZXfIEHOG51POnIG//oKoqMwv770HTzwhj61VSwLNypWhZUuZxWzZUmY0C+mPs1JKKeVr9K+zp3z7bcZjNhub4mox7UqJzWnToGhR7w7Lay5dgvBwOHZMZnmPHUt7eekl6NtXHrtvH3TpkvVzrV7tCjabNYOICKmVqTOXSimllM/TYNMTNm6En660pLRaweEAm43kT6bTa3gohgFPPQWtW5s6yry7fBnWroU//5TAsmtXKZoOUkA9/bJ2agcPuq5XrSqPDQ6GkBDXxXk7LMz12MKF4brrPPFqlFJKKeUBGmx6Qt26MHw4nDwJw4bB/v1QqxaTvgll2zZph/7uu2YPMhcSE2V7wMqVEmD++68cc6pRwxVshoZKoBgaClWquC6hobIEnjo7vEoVeV6llFJK5TtaZ9NLDh+G+vVldfmzz/ykpnhCguynrFxZbh89mlK6KUXlytCmDdx8s8xONm/u/XEqpZRSyqu0zqZZkpNl2dyatjGTYcBzz0mgeeed0LOnOcPLFsOABQtgyhQpK9SuHfzyi9xXtaok41StKgFm69aSsKN7J5VSSimVBQ023emDD+D772HyZLj11pTDP/0Ev/4q2w2nT/fR2MwwYOFCGDkStmxxHd+7N23pob//NmN0SimllPJT2hvdXU6dgjFjpNj4nj0ph+Pi4Pnn5fprr8l2Tp/z+++yDP7ggxJoliwpXXfCw+W1+GR0rJRSSil/oDOb7jJihESWTZumaXI+bBgcPy6rza+/buL4rmbXLvjvPymMPnAgvPwylC9v9qiUUkoplQ9osJkDdofB+ogYTp6Pp2KpAJqHlcVmtUhf7unT5UHvv5+yZ3PjRtn6CNKSMiDApIGnZhiwbJnMVt59txx75hlJBHruOahQwdzxKaWUUipf0WAzm5bsiGLUonCiYuNTjoUEBTCic306vvqK1NJ86CFo1QqQmO6VV+TfJ56Au+4ya+RXGIYsl48YIbUx69SRINlmkyh45EiTB6iUUkqp/EiDzWxYsiOK/nM3kb5GVHRsPPPemknHJUsk+2fixJT7li2TDoxFi8L48d4dbwanT0vEu2yZ3A4IgHvugfh4WTpXSimllPIQDTavwe4wGLUoPEOgCWAAD+1cCYBjwACstWrJdQcMHSqPee45qRRkmu3b4f774dAhiXz/7/+kIXtIiImDUkoppVRBocHmNayPiEmzdJ7eS/cN4q+wpnTr/izOcuY//ACbN0OpUq6g0xT79sFtt8GFC9LdZ9EiqSyvlFJKKeUlGmxew8nzWQeaAIbFys8N29LaKtk/SUmSgQ6yZ9PUpO5ataSc0bFjUv+zXDkTB6OUUkqpgkiDzWuoWCrzFPLbD21hU+W6XC4SkOZxn38uE4oVKsBLL3ltmC6XL4PdLrUyLRaYOVOSgAoXNmEwSimllCrotKj7NTQPK0tIUACpy5pXPRfNZz+MZOXMvlS8EENIkJRBunwZRo2Sx7zxhiyje9Xx45IN3727bBwFSQbSQFMppZRSJtFg8xpsVgsjOss+RwsQHHeaib9Noqg9mf3lqnGqRBlGdK6PzWphyhSJ96pVkzwcr9q4UboAbdggLSUPHPDyAJRSSimlMtJgMxs6NgxhavemPLNvJWum9qLF0R0YwK5aNzD1yZvo2DCEc+dcJY5GjZLEb6/55hu44w6JdOvXh/XroXZtLw5AKaWUUipzGmxmU8fSdobO/wDrlSJIFuDpP7+iY2k7AO++C2fPSqyXqlulZzkcko3UrZvUzLzvPinYXrOmlwaglFJKKXV1Gmxm1759WJz7IK+w2O2wfz8nTsAHH8ixsWMlH8crnntOTggweDDMnw+BgV46uVJKKaXUtWmwmV01amQ8ZrNBrVqMGQOXLsEtt8ADD3hxTL16QenSMGcOTJjgxShXKaWUUip7tPRRdgUGwk03wX//yW2bDaZPJyIplOnT5dD48VJtyGuaN5fOQEFBXjypUkoppVT2abCZXWXKSMb39u1w5owUTA8NZUQPKeTevj20aeOFccyeDY0bw403ym0NNJVSSinlwzTYzKlGjVKubt8Oc+fK9XHjvHDu336D3r2heHHph3mlF7tSSimllK/SPZvXkpAAgwbJcnU6w4aBYcDDD0OzZh4ex7Zt0LWrZKA/+qhmnCullFLKL2iweS3Tp0uqedu2rq48wJo1sHChbN0cM8bDY4iOlrJGFy7IWv3UqV7eHKqUUkoplTsabF7NxYuu9fEhQ8Aqb5dhwNChcrhnT6hTx4NjuHQJ7r8fjh6F66+HH36AIkU8eEKllFJKKffRYPNqpkyBEycgLEzKDF2xdCmsWiVdgkaM8OD5HQ7o0UNaUJYtC7/+Kv8qpZRSSvkJDTazEhsrtSsBRo5MmU10OFyzms89B1WrenAMly9DXBwULiwF2zUhSCmllFJ+RrPRs/LBB9J/sm5deOKJlMPffw9btkCpUq6g02NKlJDZzI0boUULD59MKaWUUsr9dGYzM2fOwPvvy/W33krpzJOcDMOHy+FXXoHy5T10/shI2RgKMqupgaZSSiml/JQGm5kpXBheeAHuuAO6dEk5/M03sG8flCsHL73koXPv2QM33CBr9MnJHjqJUkoppZR36DJ6ZgIDYfRomV28UmLI4YCxY+XuQYNkGd3tTp+Ge++V5fvNm6U1USH9FimllFLKf+nM5tWkqmX544+wezeULg0DBnjgXHa7VIc/cACuu04SgooV88CJlFJKKaW8R4PN1I4ckaLpK1akOWwYrsLtzz8vE59u9+GH8NdfMmX6yy9QqZIHTqKUUkop5V26Rpva6NHw558yo9m2bcrhRYukW2TJkrKV0+327YM33pDr770HDRp44CRKKaWUUt6nM5tO+/bB55/L9VT9J1PPaj73nAdqqhsG9OkD8fFw113w9NNuPoFSSimllHl0ZtNp1CjZN3nPPXDbbSmHly+XBj7FiklikNtZLFJHKToaZs7UnudKKaWUyld0ZhPg99/hq6/k+ujRKYcNw3WzXz+oWNFD57//fti1SxKDlFJKKaXyEQ02Z82C9u1dtzdvTrm6ahWsXi2dKl95xc3ndTjg1CnX7SuF45VSSiml8pOCHWxGRkLfvmmP9esnx3HNavbpA1WquPncM2ZAnTowb56bn1gppZRSyncU7D2b+/bJDGNqdjvs38/ao6H88YfUVB8yxM3nPXwYXn0VLlyAkyfd/ORKKaWUUr6jYAebtWuD1Zo24LTZoFYtxvSTmz16QPXqbjynYcAzz0igefvtMHCgG59cKaWUUsq3FOxl9NBQWc527pe02WD6dDadDOW33yQOHTrUzef87DNJcQ8IkOvWgv0tUEoppVT+VrBnNkE2ZHboAPv3Q61aEBrK2C5yV7ducshtIiNd9ZNGj4brr3fjkyullFJK+R4NNkFmOENDAdixA376SQ6//robz2EYknwUFwe33AIvveTGJ1dKKaWU8k26hpvOuHHyb5cuUL++G584ORlq1nQtn2upI6WUUkoVABbDMAyzB5FaXFwcQUFBxMbGEhgY6NVz790L9epJvtDmzdC4sQdOcvw4VK7sgSdWSimllPKOnMRrOrOZyvjxEmjed58bA03DSJvtroGmUkoppQoQDTaviIiAL7+U68OGufGJv/0W2raVBCSllFJKqQKmwAebdofB2gNn6P/qRex2uOsug1tucdOTnzwJAwbAX39ppyCllFJKFUgFOht9yY4oRi0K5+hRODa/NQDHwzaxZEdlOjYMyfsJhg6FM2fgxhvhtdfy/nxKKaWUUn6mwM5sLtkRRf+5m4iKjSdufQ2w2yha9QyXykbTf+4mluyIytsJtm2Dzz+X69OmQeHCeR+0UkoppZSfKZDBpt1hMGpROAZgv1iEC1urARDUYj/O1PxRi8KxO3KZqG8Y8Mor8m/XrnDrrW4Zt1JKKaWUvymQweb6iBiiYuMBiFtfAyPZRpGQswRcdxoAA4iKjWd9REzuTrB0qbSkLFJEUtyVUkoppQqoAhlsnjwfn3K9SMg5Cpc7T9Bt+7FYsn5cjkybJv8OGABhYbkcpVJKKaWU/yuQCUIVSwWkXC9RN5ridaKv+bgc+e47mDlTmqsrpZRSShVgBXJms3lYWUKCAnBOZFospJnVtAAhQQE0DyubuxMUKQLPPQdlc/n1SimllFL5RIEMNm1WCyM6S+PzdCvnKbdHdK6PzZr+3mtYvx6SkvI8PqWUUkqp/KJABpsAHRuGMLV7U4KD0i6VBwcFMLV705zX2Tx+HP6/vTuPrapO/zj+uUAXwC5IpaXSliVClaVRRppijBnoj0VGChJZQhQUNywTcBmrk4FC/AOUGTORIUgMi4YEhIQliiNTllbBsrZGQNIB0hQILY38pgtLadP7/f3R6f1x6V16S0/v9n4lJ9zle759zsNzzn16es+9v/+9NHx4y20AAACE53s2W00a0V//81iSjpf/r6rrG9QvpuVP5z6f0ZSkZcukW7ekhASpfyd8IDwAAEAICOtmU2r5k3rWkL73N8kvv0gbN7bc/tvf1OaydgAAgDAVtn9G71Tvv9/yAe4vvCBlZfk7GgAAgIBBs3m/9u1rWSIi+AB3AACAe9Bs3o/mZulPf2q5vWiRNGSIf+MBAAAIMDSb9+M//5ESE6X4eOkvf/F3NAAAAAEn7C8Qui8JCdK//iVdvswHuAMAALjAmc37ZbNJqan+jgIAACAg0Wx2RGWl9Pbb0m+/+TsSAACAgEaz2RH5+dLf/y7NnevvSAAAAAIazaavzpyRNmxoub1smX9jAQAACHA0m756/33JbpdmzJCeesrf0QAAAAQ0mk1fHD4s/fOfUo8efIA7AABAO9Bs+mLFipZ/X35ZeuQR/8YCAAAQBGg22+vwYWn//pazmn/+s7+jAQAACAp8qHt7DR4s/fGPLbcHDvRrKAAAAMHC8jObq1atks1m05IlS6z+UdZKTpY++6xlAQAAQLtY2myeOHFC69ev16hRo6z8MQAAAAhQljWbN27c0Ny5c/XFF1+oT58+bsfduXNHdXV1TktAOXxY+sMfpJMn/R0JAABA0LGs2czNzdWUKVOUnZ3tcdzKlSsVFxfnWFJSUqwKqWOWL5f27pW++MLfkQAAAAQdS5rNbdu2qaSkRCvb8VmUH374oWprax3L5cuXrQipY378UTpwQIqI4Ap0AACADuj0q9EvX76sxYsXq6CgQNHR0V7HR0VFKSoqqrPD6BzLl7f8+8orUlqaX0MBAAAIRjZjjOnMCXfv3q3p06ere/fujseam5tls9nUrVs33blzx+m5e9XV1SkuLk61tbWKjY3tzNB888MP0jPPtJzVPH+eZhMAAOC/fOnXOv3M5vjx43X69Gmnx15++WWlp6crLy/PY6MZUFq/LYizmgAAAB3W6c1mTEyMRowY4fRY79691bdv3zaPB6zDh6WDB3mvJgAAwH3iG4Rc+d3vpH/8Q6qullJT/R0NAABA0Or092zer4B5zyYAAABc8qVfs/zrKoNOc7O/IwAAAAgZNJt3KyqSHntM+vprf0cCAAAQEmg277ZihfTvf7c0nQAAALhvNJutioqkQ4darkD/8EN/RwMAABASaDZbtX5b0KuvSoH2/ewAAABBimZTkgoLWxbOagIAAHQqmk3p/78tiLOaAAAAnYpm8+TJlrOakZGc1QQAAOhkfIPQ6NFSQYH066+c1QQAAOhkNJs2m5Sd3bIAAACgU/FndAAAAFiGZhMAAACWodkEAACAZWg2AQAAYBmaTQAAAFiGZhMAAACWodkEAACAZWg2AQAAYBmaTQAAAFiGZhMAAACWodkEAACAZWg2AQAAYBmaTQAAAFiGZhMAAACWodkEAACAZWg2AQAAYBmaTQAAAFiGZhMAAACW6eHvAO5ljJEk1dXV+TkSAAAAuNLap7X2bZ4EXLNZX18vSUpJSfFzJAAAAPCkvr5ecXFxHsfYTHta0i5kt9t19epVxcTEyGazdcnPrKurU0pKii5fvqzY2Ngu+ZnBgLy4Rl7cIzeukRf3yI1r5MU9cuNaV+fFGKP6+nolJyerWzfP78oMuDOb3bp104ABA/zys2NjYylcF8iLa+TFPXLjGnlxj9y4Rl7cIzeudWVevJ3RbMUFQgAAALAMzSYAAAAsQ7MpKSoqSvn5+YqKivJ3KAGFvLhGXtwjN66RF/fIjWvkxT1y41og5yXgLhACAABA6ODMJgAAACxDswkAAADL0GwCAADAMjSbAAAAsAzNJgAAACwTFs3m2rVrNXDgQEVHRyszM1PHjx/3OH7Hjh1KT09XdHS0Ro4cqe+++66LIu06K1eu1JNPPqmYmBj169dP06ZNU1lZmcd1Nm/eLJvN5rRER0d3UcRdZ/ny5W22Mz093eM64VAzAwcObJMXm82m3Nxcl+NDuV5++OEHPffcc0pOTpbNZtPu3budnjfGaNmyZerfv7969uyp7OxsnT9/3uu8vh6rAo2nvDQ1NSkvL08jR45U7969lZycrJdeeklXr171OGdH9sdA461e5s+f32YbJ02a5HXeYK8XyXtuXB1zbDabVq9e7XbOUKiZ9rxGNzQ0KDc3V3379tUDDzygGTNm6Nq1ax7n7eix6X6FfLP59ddf65133lF+fr5KSkqUkZGhiRMnqrq62uX4n376SXPmzNGCBQtUWlqqadOmadq0aTpz5kwXR26toqIi5ebm6ujRoyooKFBTU5MmTJigmzdvelwvNjZWlZWVjqWioqKLIu5aw4cPd9rOw4cPux0bLjVz4sQJp5wUFBRIkl544QW364Rqvdy8eVMZGRlau3aty+c/+eQTffbZZ/r888917Ngx9e7dWxMnTlRDQ4PbOX09VgUiT3m5deuWSkpKtHTpUpWUlGjnzp0qKyvT1KlTvc7ry/4YiLzViyRNmjTJaRu3bt3qcc5QqBfJe27uzkllZaU2btwom82mGTNmeJw32GumPa/Rb7/9tr755hvt2LFDRUVFunr1qp5//nmP83bk2NQpTIgbM2aMyc3Nddxvbm42ycnJZuXKlS7Hz5w500yZMsXpsczMTPPGG29YGqe/VVdXG0mmqKjI7ZhNmzaZuLi4rgvKT/Lz801GRka7x4drzSxevNgMGTLE2O12l8+HS71IMrt27XLct9vtJikpyaxevdrxWE1NjYmKijJbt251O4+vx6pAd29eXDl+/LiRZCoqKtyO8XV/DHSu8jJv3jyTk5Pj0zyhVi/GtK9mcnJyzLhx4zyOCbWaMabta3RNTY2JiIgwO3bscIw5d+6ckWSKi4tdztHRY1NnCOkzm42NjTp16pSys7Mdj3Xr1k3Z2dkqLi52uU5xcbHTeEmaOHGi2/Ghora2VpL04IMPehx348YNpaWlKSUlRTk5OTp79mxXhNflzp8/r+TkZA0ePFhz587VpUuX3I4Nx5ppbGzUli1b9Morr8hms7kdFy71crfy8nJVVVU51URcXJwyMzPd1kRHjlWhoLa2VjabTfHx8R7H+bI/BqvCwkL169dPw4YN08KFC3X9+nW3Y8O1Xq5du6a9e/dqwYIFXseGWs3c+xp96tQpNTU1OdVAenq6UlNT3dZAR45NnSWkm83ffvtNzc3NSkxMdHo8MTFRVVVVLtepqqryaXwosNvtWrJkiZ566imNGDHC7bhhw4Zp48aN2rNnj7Zs2SK73a6xY8fqypUrXRit9TIzM7V582Z9//33WrduncrLy/X000+rvr7e5fhwrJndu3erpqZG8+fPdzsmXOrlXq3/777UREeOVcGuoaFBeXl5mjNnjmJjY92O83V/DEaTJk3SV199pQMHDujjjz9WUVGRJk+erObmZpfjw7FeJOnLL79UTEyM1z8Vh1rNuHqNrqqqUmRkZJtf1Lz1N61j2rtOZ+lh6ewICrm5uTpz5ozX97RkZWUpKyvLcX/s2LF69NFHtX79en300UdWh9llJk+e7Lg9atQoZWZmKi0tTdu3b2/Xb9ThYMOGDZo8ebKSk5PdjgmXeoHvmpqaNHPmTBljtG7dOo9jw2F/nD17tuP2yJEjNWrUKA0ZMkSFhYUaP368HyMLLBs3btTcuXO9XmgYajXT3tfoQBbSZzYTEhLUvXv3NldnXbt2TUlJSS7XSUpK8ml8sFu0aJG+/fZbHTp0SAMGDPBp3YiICD3++OO6cOGCRdEFhvj4eA0dOtTtdoZbzVRUVGj//v169dVXfVovXOql9f/dl5royLEqWLU2mhUVFSooKPB4VtMVb/tjKBg8eLASEhLcbmM41UurH3/8UWVlZT4fd6Tgrhl3r9FJSUlqbGxUTU2N03hv/U3rmPau01lCutmMjIzU6NGjdeDAAcdjdrtdBw4ccDrjcresrCyn8ZJUUFDgdnywMsZo0aJF2rVrlw4ePKhBgwb5PEdzc7NOnz6t/v37WxBh4Lhx44YuXrzodjvDpWZabdq0Sf369dOUKVN8Wi9c6mXQoEFKSkpyqom6ujodO3bMbU105FgVjFobzfPnz2v//v3q27evz3N42x9DwZUrV3T9+nW32xgu9XK3DRs2aPTo0crIyPB53WCsGW+v0aNHj1ZERIRTDZSVlenSpUtua6Ajx6ZOY+nlRwFg27ZtJioqymzevNn8+uuv5vXXXzfx8fGmqqrKGGPMiy++aD744APH+CNHjpgePXqYv/71r+bcuXMmPz/fREREmNOnT/trEyyxcOFCExcXZwoLC01lZaVjuXXrlmPMvblZsWKF2bdvn7l48aI5deqUmT17tomOjjZnz571xyZY5t133zWFhYWmvLzcHDlyxGRnZ5uEhARTXV1tjAnfmjGm5YrX1NRUk5eX1+a5cKqX+vp6U1paakpLS40k8+mnn5rS0lLHVdWrVq0y8fHxZs+ePeaXX34xOTk5ZtCgQeb27duOOcaNG2fWrFnjuO/tWBUMPOWlsbHRTJ061QwYMMD8/PPPTsedO3fuOOa4Ny/e9sdg4Ckv9fX15r333jPFxcWmvLzc7N+/3zzxxBPmkUceMQ0NDY45QrFejPG+LxljTG1trenVq5dZt26dyzlCsWba8xr95ptvmtTUVHPw4EFz8uRJk5WVZbKyspzmGTZsmNm5c6fjfnuOTVYI+WbTGGPWrFljUlNTTWRkpBkzZow5evSo47lnnnnGzJs3z2n89u3bzdChQ01kZKQZPny42bt3bxdHbD1JLpdNmzY5xtybmyVLljjymJiYaJ599llTUlLS9cFbbNasWaZ///4mMjLSPPzww2bWrFnmwoULjufDtWaMMWbfvn1GkikrK2vzXDjVy6FDh1zuP63bb7fbzdKlS01iYqKJiooy48ePb5OztLQ0k5+f7/SYp2NVMPCUl/LycrfHnUOHDjnmuDcv3vbHYOApL7du3TITJkwwDz30kImIiDBpaWnmtddea9M0hmK9GON9XzLGmPXr15uePXuampoal3OEYs205zX69u3b5q233jJ9+vQxvXr1MtOnTzeVlZVt5rl7nfYcm6xg+28wAAAAQKcL6fdsAgAAwL9oNgEAAGAZmk0AAABYhmYTAAAAlqHZBAAAgGVoNgEAAGAZmk0AAABYhmYTAAAAlqHZBAAAgGVoNgEAAGAZmk0AAABY5v8AAD5Fyy/NvfwAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred_ols = res.get_prediction()\n",
    "iv_l = pred_ols.summary_frame()[\"obs_ci_lower\"]\n",
    "iv_u = pred_ols.summary_frame()[\"obs_ci_upper\"]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8, 6))\n",
    "\n",
    "ax.plot(x, y, \"o\", label=\"data\")\n",
    "ax.plot(x, y_true, \"b-\", label=\"True\")\n",
    "ax.plot(x, res.fittedvalues, \"r--.\", label=\"OLS\")\n",
    "ax.plot(x, iv_u, \"r--\")\n",
    "ax.plot(x, iv_l, \"r--\")\n",
    "ax.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OLS with dummy variables\n",
    "\n",
    "We generate some artificial data. There are 3 groups which will be modelled using dummy variables. Group 0 is the omitted/benchmark category."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:22.472328Z",
     "iopub.status.busy": "2024-05-14T16:30:22.471955Z",
     "iopub.status.idle": "2024-05-14T16:30:22.478175Z",
     "shell.execute_reply": "2024-05-14T16:30:22.477618Z"
    }
   },
   "outputs": [],
   "source": [
    "nsample = 50\n",
    "groups = np.zeros(nsample, int)\n",
    "groups[20:40] = 1\n",
    "groups[40:] = 2\n",
    "# dummy = (groups[:,None] == np.unique(groups)).astype(float)\n",
    "\n",
    "dummy = pd.get_dummies(groups).values\n",
    "x = np.linspace(0, 20, nsample)\n",
    "# drop reference category\n",
    "X = np.column_stack((x, dummy[:, 1:]))\n",
    "X = sm.add_constant(X, prepend=False)\n",
    "\n",
    "beta = [1.0, 3, -3, 10]\n",
    "y_true = np.dot(X, beta)\n",
    "e = np.random.normal(size=nsample)\n",
    "y = y_true + e"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Inspect the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:22.480967Z",
     "iopub.status.busy": "2024-05-14T16:30:22.480754Z",
     "iopub.status.idle": "2024-05-14T16:30:22.485142Z",
     "shell.execute_reply": "2024-05-14T16:30:22.484585Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.         0.         0.         1.        ]\n",
      " [0.40816327 0.         0.         1.        ]\n",
      " [0.81632653 0.         0.         1.        ]\n",
      " [1.2244898  0.         0.         1.        ]\n",
      " [1.63265306 0.         0.         1.        ]]\n",
      "[ 9.28223335 10.50481865 11.84389206 10.38508408 12.37941998]\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 2 2 2 2 2 2 2 2 2 2]\n",
      "[[ True False False]\n",
      " [ True False False]\n",
      " [ True False False]\n",
      " [ True False False]\n",
      " [ True False False]]\n"
     ]
    }
   ],
   "source": [
    "print(X[:5, :])\n",
    "print(y[:5])\n",
    "print(groups)\n",
    "print(dummy[:5, :])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit and summary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:22.487863Z",
     "iopub.status.busy": "2024-05-14T16:30:22.487446Z",
     "iopub.status.idle": "2024-05-14T16:30:22.513054Z",
     "shell.execute_reply": "2024-05-14T16:30:22.512507Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.978\n",
      "Model:                            OLS   Adj. R-squared:                  0.976\n",
      "Method:                 Least Squares   F-statistic:                     671.7\n",
      "Date:                Tue, 14 May 2024   Prob (F-statistic):           5.69e-38\n",
      "Time:                        16:30:22   Log-Likelihood:                -64.643\n",
      "No. Observations:                  50   AIC:                             137.3\n",
      "Df Residuals:                      46   BIC:                             144.9\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "x1             0.9999      0.060     16.689      0.000       0.879       1.121\n",
      "x2             2.8909      0.569      5.081      0.000       1.746       4.036\n",
      "x3            -3.2232      0.927     -3.477      0.001      -5.089      -1.357\n",
      "const         10.1031      0.310     32.573      0.000       9.479      10.727\n",
      "==============================================================================\n",
      "Omnibus:                        2.831   Durbin-Watson:                   1.998\n",
      "Prob(Omnibus):                  0.243   Jarque-Bera (JB):                1.927\n",
      "Skew:                          -0.279   Prob(JB):                        0.382\n",
      "Kurtosis:                       2.217   Cond. No.                         96.3\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "res2 = sm.OLS(y, X).fit()\n",
    "print(res2.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Draw a plot to compare the true relationship to OLS predictions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:22.516013Z",
     "iopub.status.busy": "2024-05-14T16:30:22.515792Z",
     "iopub.status.idle": "2024-05-14T16:30:23.164331Z",
     "shell.execute_reply": "2024-05-14T16:30:23.163678Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred_ols2 = res2.get_prediction()\n",
    "iv_l = pred_ols2.summary_frame()[\"obs_ci_lower\"]\n",
    "iv_u = pred_ols2.summary_frame()[\"obs_ci_upper\"]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8, 6))\n",
    "\n",
    "ax.plot(x, y, \"o\", label=\"Data\")\n",
    "ax.plot(x, y_true, \"b-\", label=\"True\")\n",
    "ax.plot(x, res2.fittedvalues, \"r--.\", label=\"Predicted\")\n",
    "ax.plot(x, iv_u, \"r--\")\n",
    "ax.plot(x, iv_l, \"r--\")\n",
    "legend = ax.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Joint hypothesis test\n",
    "\n",
    "### F test\n",
    "\n",
    "We want to test the hypothesis that both coefficients on the dummy variables are equal to zero, that is, $R \\times \\beta = 0$. An F test leads us to strongly reject the null hypothesis of identical constant in the 3 groups:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.167668Z",
     "iopub.status.busy": "2024-05-14T16:30:23.167440Z",
     "iopub.status.idle": "2024-05-14T16:30:23.174749Z",
     "shell.execute_reply": "2024-05-14T16:30:23.174182Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 0 0]\n",
      " [0 0 1 0]]\n",
      "<F test: F=145.49268198027963, p=1.2834419617282974e-20, df_denom=46, df_num=2>\n"
     ]
    }
   ],
   "source": [
    "R = [[0, 1, 0, 0], [0, 0, 1, 0]]\n",
    "print(np.array(R))\n",
    "print(res2.f_test(R))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also use formula-like syntax to test hypotheses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.178732Z",
     "iopub.status.busy": "2024-05-14T16:30:23.177688Z",
     "iopub.status.idle": "2024-05-14T16:30:23.187672Z",
     "shell.execute_reply": "2024-05-14T16:30:23.187102Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<F test: F=145.49268198027949, p=1.2834419617283214e-20, df_denom=46, df_num=2>\n"
     ]
    }
   ],
   "source": [
    "print(res2.f_test(\"x2 = x3 = 0\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Small group effects\n",
    "\n",
    "If we generate artificial data with smaller group effects, the T test can no longer reject the Null hypothesis: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.199809Z",
     "iopub.status.busy": "2024-05-14T16:30:23.199399Z",
     "iopub.status.idle": "2024-05-14T16:30:23.211678Z",
     "shell.execute_reply": "2024-05-14T16:30:23.211100Z"
    }
   },
   "outputs": [],
   "source": [
    "beta = [1.0, 0.3, -0.0, 10]\n",
    "y_true = np.dot(X, beta)\n",
    "y = y_true + np.random.normal(size=nsample)\n",
    "\n",
    "res3 = sm.OLS(y, X).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.215338Z",
     "iopub.status.busy": "2024-05-14T16:30:23.214335Z",
     "iopub.status.idle": "2024-05-14T16:30:23.220322Z",
     "shell.execute_reply": "2024-05-14T16:30:23.219758Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<F test: F=1.224911192540883, p=0.30318644106312964, df_denom=46, df_num=2>\n"
     ]
    }
   ],
   "source": [
    "print(res3.f_test(R))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.223356Z",
     "iopub.status.busy": "2024-05-14T16:30:23.222969Z",
     "iopub.status.idle": "2024-05-14T16:30:23.235667Z",
     "shell.execute_reply": "2024-05-14T16:30:23.235096Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<F test: F=1.2249111925408838, p=0.30318644106312964, df_denom=46, df_num=2>\n"
     ]
    }
   ],
   "source": [
    "print(res3.f_test(\"x2 = x3 = 0\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multicollinearity\n",
    "\n",
    "The Longley dataset is well known to have high multicollinearity. That is, the exogenous predictors are highly correlated. This is problematic because it can affect the stability of our coefficient estimates as we make minor changes to model specification. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.239291Z",
     "iopub.status.busy": "2024-05-14T16:30:23.238269Z",
     "iopub.status.idle": "2024-05-14T16:30:23.271676Z",
     "shell.execute_reply": "2024-05-14T16:30:23.271097Z"
    }
   },
   "outputs": [],
   "source": [
    "from statsmodels.datasets.longley import load_pandas\n",
    "\n",
    "y = load_pandas().endog\n",
    "X = load_pandas().exog\n",
    "X = sm.add_constant(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit and summary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.275445Z",
     "iopub.status.busy": "2024-05-14T16:30:23.274430Z",
     "iopub.status.idle": "2024-05-14T16:30:23.316494Z",
     "shell.execute_reply": "2024-05-14T16:30:23.315917Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                 TOTEMP   R-squared:                       0.995\n",
      "Model:                            OLS   Adj. R-squared:                  0.992\n",
      "Method:                 Least Squares   F-statistic:                     330.3\n",
      "Date:                Tue, 14 May 2024   Prob (F-statistic):           4.98e-10\n",
      "Time:                        16:30:23   Log-Likelihood:                -109.62\n",
      "No. Observations:                  16   AIC:                             233.2\n",
      "Df Residuals:                       9   BIC:                             238.6\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const      -3.482e+06    8.9e+05     -3.911      0.004    -5.5e+06   -1.47e+06\n",
      "GNPDEFL       15.0619     84.915      0.177      0.863    -177.029     207.153\n",
      "GNP           -0.0358      0.033     -1.070      0.313      -0.112       0.040\n",
      "UNEMP         -2.0202      0.488     -4.136      0.003      -3.125      -0.915\n",
      "ARMED         -1.0332      0.214     -4.822      0.001      -1.518      -0.549\n",
      "POP           -0.0511      0.226     -0.226      0.826      -0.563       0.460\n",
      "YEAR        1829.1515    455.478      4.016      0.003     798.788    2859.515\n",
      "==============================================================================\n",
      "Omnibus:                        0.749   Durbin-Watson:                   2.559\n",
      "Prob(Omnibus):                  0.688   Jarque-Bera (JB):                0.684\n",
      "Skew:                           0.420   Prob(JB):                        0.710\n",
      "Kurtosis:                       2.434   Cond. No.                     4.86e+09\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 4.86e+09. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/scipy/stats/_axis_nan_policy.py:531: UserWarning: kurtosistest only valid for n>=20 ... continuing anyway, n=16\n",
      "  res = hypotest_fun_out(*samples, **kwds)\n"
     ]
    }
   ],
   "source": [
    "ols_model = sm.OLS(y, X)\n",
    "ols_results = ols_model.fit()\n",
    "print(ols_results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Condition number\n",
    "\n",
    "One way to assess multicollinearity is to compute the condition number. Values over 20 are worrisome (see Greene 4.9). The first step is to normalize the independent variables to have unit length: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.320245Z",
     "iopub.status.busy": "2024-05-14T16:30:23.319256Z",
     "iopub.status.idle": "2024-05-14T16:30:23.340507Z",
     "shell.execute_reply": "2024-05-14T16:30:23.339951Z"
    }
   },
   "outputs": [],
   "source": [
    "norm_x = X.values\n",
    "for i, name in enumerate(X):\n",
    "    if name == \"const\":\n",
    "        continue\n",
    "    norm_x[:, i] = X[name] / np.linalg.norm(X[name])\n",
    "norm_xtx = np.dot(norm_x.T, norm_x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we take the square root of the ratio of the biggest to the smallest eigen values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.343421Z",
     "iopub.status.busy": "2024-05-14T16:30:23.343205Z",
     "iopub.status.idle": "2024-05-14T16:30:23.348716Z",
     "shell.execute_reply": "2024-05-14T16:30:23.348155Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56240.87037739987\n"
     ]
    }
   ],
   "source": [
    "eigs = np.linalg.eigvals(norm_xtx)\n",
    "condition_number = np.sqrt(eigs.max() / eigs.min())\n",
    "print(condition_number)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dropping an observation\n",
    "\n",
    "Greene also points out that dropping a single observation can have a dramatic effect on the coefficient estimates: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.351995Z",
     "iopub.status.busy": "2024-05-14T16:30:23.351593Z",
     "iopub.status.idle": "2024-05-14T16:30:23.367721Z",
     "shell.execute_reply": "2024-05-14T16:30:23.367101Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage change 4.55%\n",
      "Percentage change -105.20%\n",
      "Percentage change -3.43%\n",
      "Percentage change 2.92%\n",
      "Percentage change 3.32%\n",
      "Percentage change 97.06%\n",
      "Percentage change 4.64%\n",
      "\n"
     ]
    }
   ],
   "source": [
    "ols_results2 = sm.OLS(y.iloc[:14], X.iloc[:14]).fit()\n",
    "print(\n",
    "    \"Percentage change %4.2f%%\\n\"\n",
    "    * 7\n",
    "    % tuple(\n",
    "        [\n",
    "            i\n",
    "            for i in (ols_results2.params - ols_results.params)\n",
    "            / ols_results.params\n",
    "            * 100\n",
    "        ]\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also look at formal statistics for this such as the DFBETAS -- a standardized measure of how much each coefficient changes when that observation is left out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.373675Z",
     "iopub.status.busy": "2024-05-14T16:30:23.372647Z",
     "iopub.status.idle": "2024-05-14T16:30:23.383049Z",
     "shell.execute_reply": "2024-05-14T16:30:23.382485Z"
    }
   },
   "outputs": [],
   "source": [
    "infl = ols_results.get_influence()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general we may consider DBETAS in absolute value greater than $2/\\sqrt{N}$ to be influential observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.386993Z",
     "iopub.status.busy": "2024-05-14T16:30:23.385957Z",
     "iopub.status.idle": "2024-05-14T16:30:23.399661Z",
     "shell.execute_reply": "2024-05-14T16:30:23.399095Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2.0 / len(X) ** 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-14T16:30:23.403541Z",
     "iopub.status.busy": "2024-05-14T16:30:23.402491Z",
     "iopub.status.idle": "2024-05-14T16:30:23.443699Z",
     "shell.execute_reply": "2024-05-14T16:30:23.443119Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    dfb_const  dfb_GNPDEFL   dfb_GNP  dfb_UNEMP  dfb_ARMED   dfb_POP  dfb_YEAR\n",
      "0   -0.016406    -0.234566 -0.045095  -0.121513  -0.149026  0.211057  0.013388\n",
      "1   -0.020608    -0.289091  0.124453   0.156964   0.287700 -0.161890  0.025958\n",
      "2   -0.008382     0.007161 -0.016799   0.009575   0.002227  0.014871  0.008103\n",
      "3    0.018093     0.907968 -0.500022  -0.495996   0.089996  0.711142 -0.040056\n",
      "4    1.871260    -0.219351  1.611418   1.561520   1.169337 -1.081513 -1.864186\n",
      "5   -0.321373    -0.077045 -0.198129  -0.192961  -0.430626  0.079916  0.323275\n",
      "6    0.315945    -0.241983  0.438146   0.471797  -0.019546 -0.448515 -0.307517\n",
      "7    0.015816    -0.002742  0.018591   0.005064  -0.031320 -0.015823 -0.015583\n",
      "8   -0.004019    -0.045687  0.023708   0.018125   0.013683 -0.034770  0.005116\n",
      "9   -1.018242    -0.282131 -0.412621  -0.663904  -0.715020 -0.229501  1.035723\n",
      "10   0.030947    -0.024781  0.029480   0.035361   0.034508 -0.014194 -0.030805\n",
      "11   0.005987    -0.079727  0.030276  -0.008883  -0.006854 -0.010693 -0.005323\n",
      "12  -0.135883     0.092325 -0.253027  -0.211465   0.094720  0.331351  0.129120\n",
      "13   0.032736    -0.024249  0.017510   0.033242   0.090655  0.007634 -0.033114\n",
      "14   0.305868     0.148070  0.001428   0.169314   0.253431  0.342982 -0.318031\n",
      "15  -0.538323     0.432004 -0.261262  -0.143444  -0.360890 -0.467296  0.552421"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "print(infl.summary_frame().filter(regex=\"dfb\"))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
