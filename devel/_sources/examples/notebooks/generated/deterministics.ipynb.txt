{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deterministic Terms in Time Series Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:55.912456Z",
     "iopub.status.busy": "2025-05-06T15:57:55.907656Z",
     "iopub.status.idle": "2025-05-06T15:57:57.552013Z",
     "shell.execute_reply": "2025-05-06T15:57:57.551183Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "plt.rc(\"figure\", figsize=(16, 9))\n",
    "plt.rc(\"font\", size=16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic Use\n",
    "\n",
    "Basic configurations can be directly constructed through `DeterministicProcess`. These can include a constant, a time trend of any order, and either a seasonal or a Fourier component.\n",
    "\n",
    "The process requires an index, which is the index of the full-sample (or in-sample).\n",
    "\n",
    "First, we initialize a deterministic process with a constant, a linear time trend, and a 5-period seasonal term. The `in_sample` method returns the full set of values that match the index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:57.558777Z",
     "iopub.status.busy": "2025-05-06T15:57:57.558358Z",
     "iopub.status.idle": "2025-05-06T15:57:57.882772Z",
     "shell.execute_reply": "2025-05-06T15:57:57.881287Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>trend</th>\n",
       "      <th>s(2,5)</th>\n",
       "      <th>s(3,5)</th>\n",
       "      <th>s(4,5)</th>\n",
       "      <th>s(5,5)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>1.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>1.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>1.0</td>\n",
       "      <td>98.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>1.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>1.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    const  trend  s(2,5)  s(3,5)  s(4,5)  s(5,5)\n",
       "0     1.0    1.0     0.0     0.0     0.0     0.0\n",
       "1     1.0    2.0     1.0     0.0     0.0     0.0\n",
       "2     1.0    3.0     0.0     1.0     0.0     0.0\n",
       "3     1.0    4.0     0.0     0.0     1.0     0.0\n",
       "4     1.0    5.0     0.0     0.0     0.0     1.0\n",
       "..    ...    ...     ...     ...     ...     ...\n",
       "95    1.0   96.0     0.0     0.0     0.0     0.0\n",
       "96    1.0   97.0     1.0     0.0     0.0     0.0\n",
       "97    1.0   98.0     0.0     1.0     0.0     0.0\n",
       "98    1.0   99.0     0.0     0.0     1.0     0.0\n",
       "99    1.0  100.0     0.0     0.0     0.0     1.0\n",
       "\n",
       "[100 rows x 6 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.tsa.deterministic import DeterministicProcess\n",
    "\n",
    "index = pd.RangeIndex(0, 100)\n",
    "det_proc = DeterministicProcess(index, constant=True, order=1, seasonal=True, period=5)\n",
    "det_proc.in_sample()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `out_of_sample` returns the next `steps` values after the end of the in-sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:57.885543Z",
     "iopub.status.busy": "2025-05-06T15:57:57.885216Z",
     "iopub.status.idle": "2025-05-06T15:57:57.923337Z",
     "shell.execute_reply": "2025-05-06T15:57:57.921430Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>trend</th>\n",
       "      <th>s(2,5)</th>\n",
       "      <th>s(3,5)</th>\n",
       "      <th>s(4,5)</th>\n",
       "      <th>s(5,5)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>1.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>1.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>1.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>1.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>1.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>1.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>1.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>1.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>1.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>1.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>1.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111</th>\n",
       "      <td>1.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112</th>\n",
       "      <td>1.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>1.0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>1.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     const  trend  s(2,5)  s(3,5)  s(4,5)  s(5,5)\n",
       "100    1.0  101.0     0.0     0.0     0.0     0.0\n",
       "101    1.0  102.0     1.0     0.0     0.0     0.0\n",
       "102    1.0  103.0     0.0     1.0     0.0     0.0\n",
       "103    1.0  104.0     0.0     0.0     1.0     0.0\n",
       "104    1.0  105.0     0.0     0.0     0.0     1.0\n",
       "105    1.0  106.0     0.0     0.0     0.0     0.0\n",
       "106    1.0  107.0     1.0     0.0     0.0     0.0\n",
       "107    1.0  108.0     0.0     1.0     0.0     0.0\n",
       "108    1.0  109.0     0.0     0.0     1.0     0.0\n",
       "109    1.0  110.0     0.0     0.0     0.0     1.0\n",
       "110    1.0  111.0     0.0     0.0     0.0     0.0\n",
       "111    1.0  112.0     1.0     0.0     0.0     0.0\n",
       "112    1.0  113.0     0.0     1.0     0.0     0.0\n",
       "113    1.0  114.0     0.0     0.0     1.0     0.0\n",
       "114    1.0  115.0     0.0     0.0     0.0     1.0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "det_proc.out_of_sample(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`range(start, stop)` can also be used to produce the deterministic terms over any range including in- and out-of-sample.\n",
    "\n",
    "### Notes\n",
    "\n",
    "* When the index is a pandas `DatetimeIndex` or a `PeriodIndex`, then `start` and `stop` can be date-like (strings, e.g., \"2020-06-01\", or Timestamp) or integers.\n",
    "* `stop` is always included in the range. While this is not very Pythonic, it is needed since both statsmodels and Pandas include `stop` when working with date-like slices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:57.926140Z",
     "iopub.status.busy": "2025-05-06T15:57:57.925886Z",
     "iopub.status.idle": "2025-05-06T15:57:57.968505Z",
     "shell.execute_reply": "2025-05-06T15:57:57.965361Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>trend</th>\n",
       "      <th>s(2,5)</th>\n",
       "      <th>s(3,5)</th>\n",
       "      <th>s(4,5)</th>\n",
       "      <th>s(5,5)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>1.0</td>\n",
       "      <td>191.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>1.0</td>\n",
       "      <td>192.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>1.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>1.0</td>\n",
       "      <td>194.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>1.0</td>\n",
       "      <td>195.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>1.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>1.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>1.0</td>\n",
       "      <td>198.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>1.0</td>\n",
       "      <td>199.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>1.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200</th>\n",
       "      <td>1.0</td>\n",
       "      <td>201.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>1.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>1.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>1.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>1.0</td>\n",
       "      <td>205.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>1.0</td>\n",
       "      <td>206.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>1.0</td>\n",
       "      <td>207.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>1.0</td>\n",
       "      <td>208.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>1.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>1.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <td>1.0</td>\n",
       "      <td>211.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     const  trend  s(2,5)  s(3,5)  s(4,5)  s(5,5)\n",
       "190    1.0  191.0     0.0     0.0     0.0     0.0\n",
       "191    1.0  192.0     1.0     0.0     0.0     0.0\n",
       "192    1.0  193.0     0.0     1.0     0.0     0.0\n",
       "193    1.0  194.0     0.0     0.0     1.0     0.0\n",
       "194    1.0  195.0     0.0     0.0     0.0     1.0\n",
       "195    1.0  196.0     0.0     0.0     0.0     0.0\n",
       "196    1.0  197.0     1.0     0.0     0.0     0.0\n",
       "197    1.0  198.0     0.0     1.0     0.0     0.0\n",
       "198    1.0  199.0     0.0     0.0     1.0     0.0\n",
       "199    1.0  200.0     0.0     0.0     0.0     1.0\n",
       "200    1.0  201.0     0.0     0.0     0.0     0.0\n",
       "201    1.0  202.0     1.0     0.0     0.0     0.0\n",
       "202    1.0  203.0     0.0     1.0     0.0     0.0\n",
       "203    1.0  204.0     0.0     0.0     1.0     0.0\n",
       "204    1.0  205.0     0.0     0.0     0.0     1.0\n",
       "205    1.0  206.0     0.0     0.0     0.0     0.0\n",
       "206    1.0  207.0     1.0     0.0     0.0     0.0\n",
       "207    1.0  208.0     0.0     1.0     0.0     0.0\n",
       "208    1.0  209.0     0.0     0.0     1.0     0.0\n",
       "209    1.0  210.0     0.0     0.0     0.0     1.0\n",
       "210    1.0  211.0     0.0     0.0     0.0     0.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "det_proc.range(190, 210)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using a Date-like Index\n",
    "\n",
    "Next, we show the same steps using a `PeriodIndex`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:57.971976Z",
     "iopub.status.busy": "2025-05-06T15:57:57.970962Z",
     "iopub.status.idle": "2025-05-06T15:57:58.002519Z",
     "shell.execute_reply": "2025-05-06T15:57:58.001891Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>sin(1,12)</th>\n",
       "      <th>cos(1,12)</th>\n",
       "      <th>sin(2,12)</th>\n",
       "      <th>cos(2,12)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-03</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-04</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-06</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>6.123234e-17</td>\n",
       "      <td>1.224647e-16</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.224647e-16</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "      <td>-2.449294e-16</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "      <td>-1.836970e-16</td>\n",
       "      <td>3.673940e-16</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-02</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         const     sin(1,12)     cos(1,12)     sin(2,12)  cos(2,12)\n",
       "2020-03    1.0  0.000000e+00  1.000000e+00  0.000000e+00        1.0\n",
       "2020-04    1.0  5.000000e-01  8.660254e-01  8.660254e-01        0.5\n",
       "2020-05    1.0  8.660254e-01  5.000000e-01  8.660254e-01       -0.5\n",
       "2020-06    1.0  1.000000e+00  6.123234e-17  1.224647e-16       -1.0\n",
       "2020-07    1.0  8.660254e-01 -5.000000e-01 -8.660254e-01       -0.5\n",
       "2020-08    1.0  5.000000e-01 -8.660254e-01 -8.660254e-01        0.5\n",
       "2020-09    1.0  1.224647e-16 -1.000000e+00 -2.449294e-16        1.0\n",
       "2020-10    1.0 -5.000000e-01 -8.660254e-01  8.660254e-01        0.5\n",
       "2020-11    1.0 -8.660254e-01 -5.000000e-01  8.660254e-01       -0.5\n",
       "2020-12    1.0 -1.000000e+00 -1.836970e-16  3.673940e-16       -1.0\n",
       "2021-01    1.0 -8.660254e-01  5.000000e-01 -8.660254e-01       -0.5\n",
       "2021-02    1.0 -5.000000e-01  8.660254e-01 -8.660254e-01        0.5"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = pd.period_range(\"2020-03-01\", freq=\"M\", periods=60)\n",
    "det_proc = DeterministicProcess(index, constant=True, fourier=2)\n",
    "det_proc.in_sample().head(12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.007778Z",
     "iopub.status.busy": "2025-05-06T15:57:58.007554Z",
     "iopub.status.idle": "2025-05-06T15:57:58.030940Z",
     "shell.execute_reply": "2025-05-06T15:57:58.030373Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>sin(1,12)</th>\n",
       "      <th>cos(1,12)</th>\n",
       "      <th>sin(2,12)</th>\n",
       "      <th>cos(2,12)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-03</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.224647e-15</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-2.449294e-15</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-04</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-4.904777e-16</td>\n",
       "      <td>-9.809554e-16</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-07</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-08</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-09</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4.899825e-15</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "      <td>-9.799650e-15</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-10</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-11</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-12</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "      <td>-3.184701e-15</td>\n",
       "      <td>6.369401e-15</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2026-01</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2026-02</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         const     sin(1,12)     cos(1,12)     sin(2,12)  cos(2,12)\n",
       "2025-03    1.0 -1.224647e-15  1.000000e+00 -2.449294e-15        1.0\n",
       "2025-04    1.0  5.000000e-01  8.660254e-01  8.660254e-01        0.5\n",
       "2025-05    1.0  8.660254e-01  5.000000e-01  8.660254e-01       -0.5\n",
       "2025-06    1.0  1.000000e+00 -4.904777e-16 -9.809554e-16       -1.0\n",
       "2025-07    1.0  8.660254e-01 -5.000000e-01 -8.660254e-01       -0.5\n",
       "2025-08    1.0  5.000000e-01 -8.660254e-01 -8.660254e-01        0.5\n",
       "2025-09    1.0  4.899825e-15 -1.000000e+00 -9.799650e-15        1.0\n",
       "2025-10    1.0 -5.000000e-01 -8.660254e-01  8.660254e-01        0.5\n",
       "2025-11    1.0 -8.660254e-01 -5.000000e-01  8.660254e-01       -0.5\n",
       "2025-12    1.0 -1.000000e+00 -3.184701e-15  6.369401e-15       -1.0\n",
       "2026-01    1.0 -8.660254e-01  5.000000e-01 -8.660254e-01       -0.5\n",
       "2026-02    1.0 -5.000000e-01  8.660254e-01 -8.660254e-01        0.5"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "det_proc.out_of_sample(12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`range` accepts date-like arguments, which are usually given as strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.036989Z",
     "iopub.status.busy": "2025-05-06T15:57:58.036115Z",
     "iopub.status.idle": "2025-05-06T15:57:58.065339Z",
     "shell.execute_reply": "2025-05-06T15:57:58.064668Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>sin(1,12)</th>\n",
       "      <th>cos(1,12)</th>\n",
       "      <th>sin(2,12)</th>\n",
       "      <th>cos(2,12)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-01</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-02</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-03</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.224647e-15</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-2.449294e-15</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-04</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-4.904777e-16</td>\n",
       "      <td>-9.809554e-16</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-07</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-08</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-09</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4.899825e-15</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "      <td>-9.799650e-15</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-10</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-11</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-12</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "      <td>-3.184701e-15</td>\n",
       "      <td>6.369401e-15</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2026-01</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         const     sin(1,12)     cos(1,12)     sin(2,12)  cos(2,12)\n",
       "2025-01    1.0 -8.660254e-01  5.000000e-01 -8.660254e-01       -0.5\n",
       "2025-02    1.0 -5.000000e-01  8.660254e-01 -8.660254e-01        0.5\n",
       "2025-03    1.0 -1.224647e-15  1.000000e+00 -2.449294e-15        1.0\n",
       "2025-04    1.0  5.000000e-01  8.660254e-01  8.660254e-01        0.5\n",
       "2025-05    1.0  8.660254e-01  5.000000e-01  8.660254e-01       -0.5\n",
       "2025-06    1.0  1.000000e+00 -4.904777e-16 -9.809554e-16       -1.0\n",
       "2025-07    1.0  8.660254e-01 -5.000000e-01 -8.660254e-01       -0.5\n",
       "2025-08    1.0  5.000000e-01 -8.660254e-01 -8.660254e-01        0.5\n",
       "2025-09    1.0  4.899825e-15 -1.000000e+00 -9.799650e-15        1.0\n",
       "2025-10    1.0 -5.000000e-01 -8.660254e-01  8.660254e-01        0.5\n",
       "2025-11    1.0 -8.660254e-01 -5.000000e-01  8.660254e-01       -0.5\n",
       "2025-12    1.0 -1.000000e+00 -3.184701e-15  6.369401e-15       -1.0\n",
       "2026-01    1.0 -8.660254e-01  5.000000e-01 -8.660254e-01       -0.5"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "det_proc.range(\"2025-01\", \"2026-01\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is equivalent to using the integer values 58 and 70."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.068077Z",
     "iopub.status.busy": "2025-05-06T15:57:58.067655Z",
     "iopub.status.idle": "2025-05-06T15:57:58.096990Z",
     "shell.execute_reply": "2025-05-06T15:57:58.096355Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>sin(1,12)</th>\n",
       "      <th>cos(1,12)</th>\n",
       "      <th>sin(2,12)</th>\n",
       "      <th>cos(2,12)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2025-01</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-02</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-03</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.224647e-15</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-2.449294e-15</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-04</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-05</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-06</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>-4.904777e-16</td>\n",
       "      <td>-9.809554e-16</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-07</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-08</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-09</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4.899825e-15</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "      <td>-9.799650e-15</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-10</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-11</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-5.000000e-01</td>\n",
       "      <td>8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-12</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "      <td>-3.184701e-15</td>\n",
       "      <td>6.369401e-15</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2026-01</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>5.000000e-01</td>\n",
       "      <td>-8.660254e-01</td>\n",
       "      <td>-0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         const     sin(1,12)     cos(1,12)     sin(2,12)  cos(2,12)\n",
       "2025-01    1.0 -8.660254e-01  5.000000e-01 -8.660254e-01       -0.5\n",
       "2025-02    1.0 -5.000000e-01  8.660254e-01 -8.660254e-01        0.5\n",
       "2025-03    1.0 -1.224647e-15  1.000000e+00 -2.449294e-15        1.0\n",
       "2025-04    1.0  5.000000e-01  8.660254e-01  8.660254e-01        0.5\n",
       "2025-05    1.0  8.660254e-01  5.000000e-01  8.660254e-01       -0.5\n",
       "2025-06    1.0  1.000000e+00 -4.904777e-16 -9.809554e-16       -1.0\n",
       "2025-07    1.0  8.660254e-01 -5.000000e-01 -8.660254e-01       -0.5\n",
       "2025-08    1.0  5.000000e-01 -8.660254e-01 -8.660254e-01        0.5\n",
       "2025-09    1.0  4.899825e-15 -1.000000e+00 -9.799650e-15        1.0\n",
       "2025-10    1.0 -5.000000e-01 -8.660254e-01  8.660254e-01        0.5\n",
       "2025-11    1.0 -8.660254e-01 -5.000000e-01  8.660254e-01       -0.5\n",
       "2025-12    1.0 -1.000000e+00 -3.184701e-15  6.369401e-15       -1.0\n",
       "2026-01    1.0 -8.660254e-01  5.000000e-01 -8.660254e-01       -0.5"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "det_proc.range(58, 70)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Advanced Construction\n",
    "\n",
    "Deterministic processes with features not supported directly through the constructor can be created using `additional_terms` which accepts a list of `DetermisticTerm`. Here we create a deterministic process with two seasonal components: day-of-week with a 5 day period and an annual captured through a Fourier component with a period of 365.25 days."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.100445Z",
     "iopub.status.busy": "2025-05-06T15:57:58.099574Z",
     "iopub.status.idle": "2025-05-06T15:57:58.169056Z",
     "shell.execute_reply": "2025-05-06T15:57:58.168438Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>s(2,7)</th>\n",
       "      <th>s(3,7)</th>\n",
       "      <th>s(4,7)</th>\n",
       "      <th>s(5,7)</th>\n",
       "      <th>s(6,7)</th>\n",
       "      <th>s(7,7)</th>\n",
       "      <th>sin(1,365.25)</th>\n",
       "      <th>cos(1,365.25)</th>\n",
       "      <th>sin(2,365.25)</th>\n",
       "      <th>cos(2,365.25)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-03-01</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-02</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.017202</td>\n",
       "      <td>0.999852</td>\n",
       "      <td>0.034398</td>\n",
       "      <td>0.999408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-03</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.034398</td>\n",
       "      <td>0.999408</td>\n",
       "      <td>0.068755</td>\n",
       "      <td>0.997634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-04</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.051584</td>\n",
       "      <td>0.998669</td>\n",
       "      <td>0.103031</td>\n",
       "      <td>0.994678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-05</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.068755</td>\n",
       "      <td>0.997634</td>\n",
       "      <td>0.137185</td>\n",
       "      <td>0.990545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-06</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.085906</td>\n",
       "      <td>0.996303</td>\n",
       "      <td>0.171177</td>\n",
       "      <td>0.985240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-07</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.103031</td>\n",
       "      <td>0.994678</td>\n",
       "      <td>0.204966</td>\n",
       "      <td>0.978769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-08</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.120126</td>\n",
       "      <td>0.992759</td>\n",
       "      <td>0.238513</td>\n",
       "      <td>0.971139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-09</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.137185</td>\n",
       "      <td>0.990545</td>\n",
       "      <td>0.271777</td>\n",
       "      <td>0.962360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-10</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.154204</td>\n",
       "      <td>0.988039</td>\n",
       "      <td>0.304719</td>\n",
       "      <td>0.952442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-11</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.171177</td>\n",
       "      <td>0.985240</td>\n",
       "      <td>0.337301</td>\n",
       "      <td>0.941397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-12</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.188099</td>\n",
       "      <td>0.982150</td>\n",
       "      <td>0.369484</td>\n",
       "      <td>0.929237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-13</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.204966</td>\n",
       "      <td>0.978769</td>\n",
       "      <td>0.401229</td>\n",
       "      <td>0.915978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-14</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.221772</td>\n",
       "      <td>0.975099</td>\n",
       "      <td>0.432499</td>\n",
       "      <td>0.901634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-15</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.238513</td>\n",
       "      <td>0.971139</td>\n",
       "      <td>0.463258</td>\n",
       "      <td>0.886224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-16</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.255182</td>\n",
       "      <td>0.966893</td>\n",
       "      <td>0.493468</td>\n",
       "      <td>0.869764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-17</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.271777</td>\n",
       "      <td>0.962360</td>\n",
       "      <td>0.523094</td>\n",
       "      <td>0.852275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-18</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.288291</td>\n",
       "      <td>0.957543</td>\n",
       "      <td>0.552101</td>\n",
       "      <td>0.833777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-19</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.304719</td>\n",
       "      <td>0.952442</td>\n",
       "      <td>0.580455</td>\n",
       "      <td>0.814292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-20</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.321058</td>\n",
       "      <td>0.947060</td>\n",
       "      <td>0.608121</td>\n",
       "      <td>0.793844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-21</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.337301</td>\n",
       "      <td>0.941397</td>\n",
       "      <td>0.635068</td>\n",
       "      <td>0.772456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-22</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.353445</td>\n",
       "      <td>0.935455</td>\n",
       "      <td>0.661263</td>\n",
       "      <td>0.750154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-23</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.369484</td>\n",
       "      <td>0.929237</td>\n",
       "      <td>0.686676</td>\n",
       "      <td>0.726964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-24</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.385413</td>\n",
       "      <td>0.922744</td>\n",
       "      <td>0.711276</td>\n",
       "      <td>0.702913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-25</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.401229</td>\n",
       "      <td>0.915978</td>\n",
       "      <td>0.735034</td>\n",
       "      <td>0.678031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-26</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.416926</td>\n",
       "      <td>0.908940</td>\n",
       "      <td>0.757922</td>\n",
       "      <td>0.652346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-27</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.432499</td>\n",
       "      <td>0.901634</td>\n",
       "      <td>0.779913</td>\n",
       "      <td>0.625889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-28</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.447945</td>\n",
       "      <td>0.894061</td>\n",
       "      <td>0.800980</td>\n",
       "      <td>0.598691</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            const  s(2,7)  s(3,7)  s(4,7)  s(5,7)  s(6,7)  s(7,7)  \\\n",
       "2020-03-01    1.0     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-02    1.0     1.0     0.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-03    1.0     0.0     1.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-04    1.0     0.0     0.0     1.0     0.0     0.0     0.0   \n",
       "2020-03-05    1.0     0.0     0.0     0.0     1.0     0.0     0.0   \n",
       "2020-03-06    1.0     0.0     0.0     0.0     0.0     1.0     0.0   \n",
       "2020-03-07    1.0     0.0     0.0     0.0     0.0     0.0     1.0   \n",
       "2020-03-08    1.0     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-09    1.0     1.0     0.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-10    1.0     0.0     1.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-11    1.0     0.0     0.0     1.0     0.0     0.0     0.0   \n",
       "2020-03-12    1.0     0.0     0.0     0.0     1.0     0.0     0.0   \n",
       "2020-03-13    1.0     0.0     0.0     0.0     0.0     1.0     0.0   \n",
       "2020-03-14    1.0     0.0     0.0     0.0     0.0     0.0     1.0   \n",
       "2020-03-15    1.0     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-16    1.0     1.0     0.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-17    1.0     0.0     1.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-18    1.0     0.0     0.0     1.0     0.0     0.0     0.0   \n",
       "2020-03-19    1.0     0.0     0.0     0.0     1.0     0.0     0.0   \n",
       "2020-03-20    1.0     0.0     0.0     0.0     0.0     1.0     0.0   \n",
       "2020-03-21    1.0     0.0     0.0     0.0     0.0     0.0     1.0   \n",
       "2020-03-22    1.0     0.0     0.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-23    1.0     1.0     0.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-24    1.0     0.0     1.0     0.0     0.0     0.0     0.0   \n",
       "2020-03-25    1.0     0.0     0.0     1.0     0.0     0.0     0.0   \n",
       "2020-03-26    1.0     0.0     0.0     0.0     1.0     0.0     0.0   \n",
       "2020-03-27    1.0     0.0     0.0     0.0     0.0     1.0     0.0   \n",
       "2020-03-28    1.0     0.0     0.0     0.0     0.0     0.0     1.0   \n",
       "\n",
       "            sin(1,365.25)  cos(1,365.25)  sin(2,365.25)  cos(2,365.25)  \n",
       "2020-03-01       0.000000       1.000000       0.000000       1.000000  \n",
       "2020-03-02       0.017202       0.999852       0.034398       0.999408  \n",
       "2020-03-03       0.034398       0.999408       0.068755       0.997634  \n",
       "2020-03-04       0.051584       0.998669       0.103031       0.994678  \n",
       "2020-03-05       0.068755       0.997634       0.137185       0.990545  \n",
       "2020-03-06       0.085906       0.996303       0.171177       0.985240  \n",
       "2020-03-07       0.103031       0.994678       0.204966       0.978769  \n",
       "2020-03-08       0.120126       0.992759       0.238513       0.971139  \n",
       "2020-03-09       0.137185       0.990545       0.271777       0.962360  \n",
       "2020-03-10       0.154204       0.988039       0.304719       0.952442  \n",
       "2020-03-11       0.171177       0.985240       0.337301       0.941397  \n",
       "2020-03-12       0.188099       0.982150       0.369484       0.929237  \n",
       "2020-03-13       0.204966       0.978769       0.401229       0.915978  \n",
       "2020-03-14       0.221772       0.975099       0.432499       0.901634  \n",
       "2020-03-15       0.238513       0.971139       0.463258       0.886224  \n",
       "2020-03-16       0.255182       0.966893       0.493468       0.869764  \n",
       "2020-03-17       0.271777       0.962360       0.523094       0.852275  \n",
       "2020-03-18       0.288291       0.957543       0.552101       0.833777  \n",
       "2020-03-19       0.304719       0.952442       0.580455       0.814292  \n",
       "2020-03-20       0.321058       0.947060       0.608121       0.793844  \n",
       "2020-03-21       0.337301       0.941397       0.635068       0.772456  \n",
       "2020-03-22       0.353445       0.935455       0.661263       0.750154  \n",
       "2020-03-23       0.369484       0.929237       0.686676       0.726964  \n",
       "2020-03-24       0.385413       0.922744       0.711276       0.702913  \n",
       "2020-03-25       0.401229       0.915978       0.735034       0.678031  \n",
       "2020-03-26       0.416926       0.908940       0.757922       0.652346  \n",
       "2020-03-27       0.432499       0.901634       0.779913       0.625889  \n",
       "2020-03-28       0.447945       0.894061       0.800980       0.598691  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.tsa.deterministic import Fourier, Seasonality, TimeTrend\n",
    "\n",
    "index = pd.period_range(\"2020-03-01\", freq=\"D\", periods=2 * 365)\n",
    "tt = TimeTrend(constant=True)\n",
    "four = Fourier(period=365.25, order=2)\n",
    "seas = Seasonality(period=7)\n",
    "det_proc = DeterministicProcess(index, additional_terms=[tt, seas, four])\n",
    "det_proc.in_sample().head(28)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Custom Deterministic Terms\n",
    "\n",
    "The `DetermisticTerm` Abstract Base Class is designed to be subclassed to help users write custom deterministic terms.  We next show two examples. The first is a broken time trend that allows a break after a fixed number of periods. The second is a \"trick\" deterministic term that allows exogenous data, which is not really a deterministic process, to be treated as if was deterministic.  This lets use simplify gathering the terms needed for forecasting.\n",
    "\n",
    "These are intended to demonstrate the construction of custom terms. They can definitely be improved in terms of input validation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.174532Z",
     "iopub.status.busy": "2025-05-06T15:57:58.173957Z",
     "iopub.status.idle": "2025-05-06T15:57:58.190629Z",
     "shell.execute_reply": "2025-05-06T15:57:58.190009Z"
    }
   },
   "outputs": [],
   "source": [
    "from statsmodels.tsa.deterministic import DeterministicTerm\n",
    "\n",
    "\n",
    "class BrokenTimeTrend(DeterministicTerm):\n",
    "    def __init__(self, break_period: int):\n",
    "        self._break_period = break_period\n",
    "\n",
    "    def __str__(self):\n",
    "        return \"Broken Time Trend\"\n",
    "\n",
    "    def _eq_attr(self):\n",
    "        return (self._break_period,)\n",
    "\n",
    "    def in_sample(self, index: pd.Index):\n",
    "        nobs = index.shape[0]\n",
    "        terms = np.zeros((nobs, 2))\n",
    "        terms[self._break_period :, 0] = 1\n",
    "        terms[self._break_period :, 1] = np.arange(self._break_period + 1, nobs + 1)\n",
    "        return pd.DataFrame(terms, columns=[\"const_break\", \"trend_break\"], index=index)\n",
    "\n",
    "    def out_of_sample(\n",
    "        self, steps: int, index: pd.Index, forecast_index: pd.Index = None\n",
    "    ):\n",
    "        # Always call extend index first\n",
    "        fcast_index = self._extend_index(index, steps, forecast_index)\n",
    "        nobs = index.shape[0]\n",
    "        terms = np.zeros((steps, 2))\n",
    "        # Assume break period is in-sample\n",
    "        terms[:, 0] = 1\n",
    "        terms[:, 1] = np.arange(nobs + 1, nobs + steps + 1)\n",
    "        return pd.DataFrame(\n",
    "            terms, columns=[\"const_break\", \"trend_break\"], index=fcast_index\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.193815Z",
     "iopub.status.busy": "2025-05-06T15:57:58.192964Z",
     "iopub.status.idle": "2025-05-06T15:57:58.223236Z",
     "shell.execute_reply": "2025-05-06T15:57:58.222583Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>trend</th>\n",
       "      <th>const_break</th>\n",
       "      <th>trend_break</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>1.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>1.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>1.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>1.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>1.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>1.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>61.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>1.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>1.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>1.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>1.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>1.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    const  trend  const_break  trend_break\n",
       "55    1.0   56.0          0.0          0.0\n",
       "56    1.0   57.0          0.0          0.0\n",
       "57    1.0   58.0          0.0          0.0\n",
       "58    1.0   59.0          0.0          0.0\n",
       "59    1.0   60.0          0.0          0.0\n",
       "60    1.0   61.0          1.0         61.0\n",
       "61    1.0   62.0          1.0         62.0\n",
       "62    1.0   63.0          1.0         63.0\n",
       "63    1.0   64.0          1.0         64.0\n",
       "64    1.0   65.0          1.0         65.0\n",
       "65    1.0   66.0          1.0         66.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "btt = BrokenTimeTrend(60)\n",
    "tt = TimeTrend(constant=True, order=1)\n",
    "index = pd.RangeIndex(100)\n",
    "det_proc = DeterministicProcess(index, additional_terms=[tt, btt])\n",
    "det_proc.range(55, 65)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we write a simple \"wrapper\" for some actual exogenous data that simplifies constructing out-of-sample exogenous arrays for forecasting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.225689Z",
     "iopub.status.busy": "2025-05-06T15:57:58.225462Z",
     "iopub.status.idle": "2025-05-06T15:57:58.236489Z",
     "shell.execute_reply": "2025-05-06T15:57:58.233874Z"
    }
   },
   "outputs": [],
   "source": [
    "class ExogenousProcess(DeterministicTerm):\n",
    "    def __init__(self, data):\n",
    "        self._data = data\n",
    "\n",
    "    def __str__(self):\n",
    "        return \"Custom Exog Process\"\n",
    "\n",
    "    def _eq_attr(self):\n",
    "        return (id(self._data),)\n",
    "\n",
    "    def in_sample(self, index: pd.Index):\n",
    "        return self._data.loc[index]\n",
    "\n",
    "    def out_of_sample(\n",
    "        self, steps: int, index: pd.Index, forecast_index: pd.Index = None\n",
    "    ):\n",
    "        forecast_index = self._extend_index(index, steps, forecast_index)\n",
    "        return self._data.loc[forecast_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.242292Z",
     "iopub.status.busy": "2025-05-06T15:57:58.240700Z",
     "iopub.status.idle": "2025-05-06T15:57:58.255759Z",
     "shell.execute_reply": "2025-05-06T15:57:58.255165Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>exog1</th>\n",
       "      <th>exog2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>64</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   exog1  exog2\n",
       "0      6     99\n",
       "1     64     28\n",
       "2     15     81\n",
       "3     54      8\n",
       "4     12      8"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "gen = np.random.default_rng(98765432101234567890)\n",
    "exog = pd.DataFrame(gen.integers(100, size=(300, 2)), columns=[\"exog1\", \"exog2\"])\n",
    "exog.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.260879Z",
     "iopub.status.busy": "2025-05-06T15:57:58.260657Z",
     "iopub.status.idle": "2025-05-06T15:57:58.270572Z",
     "shell.execute_reply": "2025-05-06T15:57:58.269960Z"
    }
   },
   "outputs": [],
   "source": [
    "ep = ExogenousProcess(exog)\n",
    "tt = TimeTrend(constant=True, order=1)\n",
    "# The in-sample index\n",
    "idx = exog.index[:200]\n",
    "det_proc = DeterministicProcess(idx, additional_terms=[tt, ep])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.273661Z",
     "iopub.status.busy": "2025-05-06T15:57:58.272568Z",
     "iopub.status.idle": "2025-05-06T15:57:58.295750Z",
     "shell.execute_reply": "2025-05-06T15:57:58.295117Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>trend</th>\n",
       "      <th>exog1</th>\n",
       "      <th>exog2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>64</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>54</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   const  trend  exog1  exog2\n",
       "0    1.0    1.0      6     99\n",
       "1    1.0    2.0     64     28\n",
       "2    1.0    3.0     15     81\n",
       "3    1.0    4.0     54      8\n",
       "4    1.0    5.0     12      8"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "det_proc.in_sample().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.298010Z",
     "iopub.status.busy": "2025-05-06T15:57:58.297788Z",
     "iopub.status.idle": "2025-05-06T15:57:58.312677Z",
     "shell.execute_reply": "2025-05-06T15:57:58.310083Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>trend</th>\n",
       "      <th>exog1</th>\n",
       "      <th>exog2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>200</th>\n",
       "      <td>1.0</td>\n",
       "      <td>201.0</td>\n",
       "      <td>56</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>1.0</td>\n",
       "      <td>202.0</td>\n",
       "      <td>48</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>1.0</td>\n",
       "      <td>203.0</td>\n",
       "      <td>44</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>1.0</td>\n",
       "      <td>204.0</td>\n",
       "      <td>65</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>1.0</td>\n",
       "      <td>205.0</td>\n",
       "      <td>63</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>1.0</td>\n",
       "      <td>206.0</td>\n",
       "      <td>89</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>1.0</td>\n",
       "      <td>207.0</td>\n",
       "      <td>41</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>1.0</td>\n",
       "      <td>208.0</td>\n",
       "      <td>71</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>1.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>89</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>1.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>58</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     const  trend  exog1  exog2\n",
       "200    1.0  201.0     56     88\n",
       "201    1.0  202.0     48     84\n",
       "202    1.0  203.0     44      5\n",
       "203    1.0  204.0     65     63\n",
       "204    1.0  205.0     63     39\n",
       "205    1.0  206.0     89     39\n",
       "206    1.0  207.0     41     54\n",
       "207    1.0  208.0     71      5\n",
       "208    1.0  209.0     89      6\n",
       "209    1.0  210.0     58     63"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "det_proc.out_of_sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Support\n",
    "\n",
    "The only model that directly supports `DeterministicProcess` is `AutoReg`. A custom term can be set using the `deterministic` keyword argument. \n",
    "\n",
    "**Note**: Using a custom term requires that `trend=\"n\"` and `seasonal=False` so that all deterministic components must come from the custom deterministic term."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simulate Some Data\n",
    "\n",
    "Here we simulate some data that has an weekly seasonality captured by a Fourier series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.318708Z",
     "iopub.status.busy": "2025-05-06T15:57:58.318416Z",
     "iopub.status.idle": "2025-05-06T15:57:58.814884Z",
     "shell.execute_reply": "2025-05-06T15:57:58.814184Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x900 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gen = np.random.default_rng(98765432101234567890)\n",
    "idx = pd.RangeIndex(200)\n",
    "det_proc = DeterministicProcess(idx, constant=True, period=52, fourier=2)\n",
    "det_terms = det_proc.in_sample().to_numpy()\n",
    "params = np.array([1.0, 3, -1, 4, -2])\n",
    "exog = det_terms @ params\n",
    "y = np.empty(200)\n",
    "y[0] = det_terms[0] @ params + gen.standard_normal()\n",
    "for i in range(1, 200):\n",
    "    y[i] = 0.9 * y[i - 1] + det_terms[i] @ params + gen.standard_normal()\n",
    "y = pd.Series(y, index=idx)\n",
    "ax = y.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model is then fit using the `deterministic` keyword argument. `seasonal` defaults to False but `trend` defaults to `\"c\"` so this needs to be changed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:58.818153Z",
     "iopub.status.busy": "2025-05-06T15:57:58.817714Z",
     "iopub.status.idle": "2025-05-06T15:57:59.926901Z",
     "shell.execute_reply": "2025-05-06T15:57:59.926348Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            AutoReg Model Results                             \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   No. Observations:                  200\n",
      "Model:                     AutoReg(1)   Log Likelihood                -270.964\n",
      "Method:               Conditional MLE   S.D. of innovations              0.944\n",
      "Date:                Tue, 06 May 2025   AIC                            555.927\n",
      "Time:                        15:57:59   BIC                            578.980\n",
      "Sample:                             1   HQIC                           565.258\n",
      "                                  200                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.8436      0.172      4.916      0.000       0.507       1.180\n",
      "sin(1,52)      2.9738      0.160     18.587      0.000       2.660       3.287\n",
      "cos(1,52)     -0.6771      0.284     -2.380      0.017      -1.235      -0.120\n",
      "sin(2,52)      3.9951      0.099     40.336      0.000       3.801       4.189\n",
      "cos(2,52)     -1.7206      0.264     -6.519      0.000      -2.238      -1.203\n",
      "y.L1           0.9116      0.014     63.264      0.000       0.883       0.940\n",
      "                                    Roots                                    \n",
      "=============================================================================\n",
      "                  Real          Imaginary           Modulus         Frequency\n",
      "-----------------------------------------------------------------------------\n",
      "AR.1            1.0970           +0.0000j            1.0970            0.0000\n",
      "-----------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.tsa.api import AutoReg\n",
    "\n",
    "mod = AutoReg(y, 1, trend=\"n\", deterministic=det_proc)\n",
    "res = mod.fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the `plot_predict` to show the predicted values and their prediction interval. The out-of-sample deterministic values are automatically produced by the deterministic process passed to `AutoReg`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:57:59.932188Z",
     "iopub.status.busy": "2025-05-06T15:57:59.931618Z",
     "iopub.status.idle": "2025-05-06T15:58:00.317398Z",
     "shell.execute_reply": "2025-05-06T15:58:00.315051Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x900 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = res.plot_predict(200, 200 + 2 * 52, True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:58:00.322732Z",
     "iopub.status.busy": "2025-05-06T15:58:00.322359Z",
     "iopub.status.idle": "2025-05-06T15:58:00.337230Z",
     "shell.execute_reply": "2025-05-06T15:58:00.336260Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200    -3.253482\n",
       "201    -8.555660\n",
       "202   -13.607557\n",
       "203   -18.152622\n",
       "204   -21.950370\n",
       "205   -24.790116\n",
       "206   -26.503171\n",
       "207   -26.972781\n",
       "208   -26.141244\n",
       "209   -24.013773\n",
       "210   -20.658891\n",
       "211   -16.205310\n",
       "dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "auto_reg_forecast = res.predict(200, 211)\n",
    "auto_reg_forecast"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using with other models\n",
    "\n",
    "Other models do not support `DeterministicProcess` directly.  We can instead manually pass any deterministic terms as `exog` to model that support exogenous values.\n",
    "\n",
    "Note that `SARIMAX` with exogenous variables is OLS with SARIMA errors so that the model is \n",
    "\n",
    "$$\n",
    "\\begin{align*}\n",
    "\\nu_t & = y_t - x_t \\beta  \\\\\n",
    "(1-\\phi(L))\\nu_t & = (1+\\theta(L))\\epsilon_t.\n",
    "\\end{align*}\n",
    "$$\n",
    "\n",
    "The parameters on deterministic terms are not directly comparable to `AutoReg` which evolves according to the equation\n",
    "\n",
    "$$\n",
    "(1-\\phi(L)) y_t = x_t \\beta + \\epsilon_t.\n",
    "$$\n",
    "\n",
    "When $x_t$ contains only deterministic terms, these two representation are equivalent (assuming $\\theta(L)=0$ so that there is no MA).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:58:00.340360Z",
     "iopub.status.busy": "2025-05-06T15:58:00.340086Z",
     "iopub.status.idle": "2025-05-06T15:58:01.037636Z",
     "shell.execute_reply": "2025-05-06T15:58:01.033745Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   No. Observations:                  200\n",
      "Model:               SARIMAX(1, 0, 0)   Log Likelihood                -293.381\n",
      "Date:                Tue, 06 May 2025   AIC                            600.763\n",
      "Time:                        15:58:00   BIC                            623.851\n",
      "Sample:                             0   HQIC                           610.106\n",
      "                                - 200                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "intercept      0.0796      0.140      0.567      0.571      -0.196       0.355\n",
      "sin(1,52)      9.1917      0.876     10.492      0.000       7.475      10.909\n",
      "cos(1,52)    -17.4351      0.891    -19.576      0.000     -19.181     -15.689\n",
      "sin(2,52)      1.2510      0.466      2.683      0.007       0.337       2.165\n",
      "cos(2,52)    -17.1865      0.434    -39.582      0.000     -18.038     -16.335\n",
      "ar.L1          0.9957      0.007    150.751      0.000       0.983       1.009\n",
      "sigma2         1.0748      0.119      9.067      0.000       0.842       1.307\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   2.16   Jarque-Bera (JB):                 1.03\n",
      "Prob(Q):                              0.14   Prob(JB):                         0.60\n",
      "Heteroskedasticity (H):               0.71   Skew:                            -0.14\n",
      "Prob(H) (two-sided):                  0.16   Kurtosis:                         2.78\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.tsa.api import SARIMAX\n",
    "\n",
    "det_proc = DeterministicProcess(idx, period=52, fourier=2)\n",
    "det_terms = det_proc.in_sample()\n",
    "\n",
    "mod = SARIMAX(y, order=(1, 0, 0), trend=\"c\", exog=det_terms)\n",
    "res = mod.fit(disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The forecasts are similar but differ since the parameters of the `SARIMAX` are estimated using MLE while `AutoReg` uses OLS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-06T15:58:01.040577Z",
     "iopub.status.busy": "2025-05-06T15:58:01.040319Z",
     "iopub.status.idle": "2025-05-06T15:58:01.085173Z",
     "shell.execute_reply": "2025-05-06T15:58:01.081531Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AutoReg</th>\n",
       "      <th>SARIMAX</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>200</th>\n",
       "      <td>-3.253482</td>\n",
       "      <td>-2.956589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>-8.555660</td>\n",
       "      <td>-7.985654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>-13.607557</td>\n",
       "      <td>-12.794186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>-18.152622</td>\n",
       "      <td>-17.131132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>-21.950370</td>\n",
       "      <td>-20.760702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>-24.790116</td>\n",
       "      <td>-23.475801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>-26.503171</td>\n",
       "      <td>-25.109977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>-26.972781</td>\n",
       "      <td>-25.547190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>-26.141244</td>\n",
       "      <td>-24.728828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>-24.013773</td>\n",
       "      <td>-22.657568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <td>-20.658891</td>\n",
       "      <td>-19.397841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>211</th>\n",
       "      <td>-16.205310</td>\n",
       "      <td>-15.072874</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       AutoReg    SARIMAX\n",
       "200  -3.253482  -2.956589\n",
       "201  -8.555660  -7.985654\n",
       "202 -13.607557 -12.794186\n",
       "203 -18.152622 -17.131132\n",
       "204 -21.950370 -20.760702\n",
       "205 -24.790116 -23.475801\n",
       "206 -26.503171 -25.109977\n",
       "207 -26.972781 -25.547190\n",
       "208 -26.141244 -24.728828\n",
       "209 -24.013773 -22.657568\n",
       "210 -20.658891 -19.397841\n",
       "211 -16.205310 -15.072874"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sarimax_forecast = res.forecast(12, exog=det_proc.out_of_sample(12))\n",
    "df = pd.concat([auto_reg_forecast, sarimax_forecast], axis=1)\n",
    "df.columns = columns = [\"AutoReg\", \"SARIMAX\"]\n",
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
