{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Forecasting in statsmodels\n",
    "\n",
    "This notebook describes forecasting using time series models in statsmodels.\n",
    "\n",
    "**Note**: this notebook applies only to the state space model classes, which are:\n",
    "\n",
    "- `sm.tsa.SARIMAX`\n",
    "- `sm.tsa.UnobservedComponents`\n",
    "- `sm.tsa.VARMAX`\n",
    "- `sm.tsa.DynamicFactor`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:01.296055Z",
     "iopub.status.busy": "2025-09-24T18:12:01.292381Z",
     "iopub.status.idle": "2025-09-24T18:12:03.703059Z",
     "shell.execute_reply": "2025-09-24T18:12:03.702101Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "\n",
    "macrodata = sm.datasets.macrodata.load_pandas().data\n",
    "macrodata.index = pd.period_range(\"1959Q1\", \"2009Q3\", freq=\"Q\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basic example\n",
    "\n",
    "A simple example is to use an AR(1) model to forecast inflation. Before forecasting, let's take a look at the series:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:03.706559Z",
     "iopub.status.busy": "2025-09-24T18:12:03.706277Z",
     "iopub.status.idle": "2025-09-24T18:12:04.135944Z",
     "shell.execute_reply": "2025-09-24T18:12:04.135096Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "endog = macrodata[\"infl\"]\n",
    "endog.plot(figsize=(15, 5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Constructing and estimating the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next step is to formulate the econometric model that we want to use for forecasting. In this case, we will use an AR(1) model via the `SARIMAX` class in statsmodels.\n",
    "\n",
    "After constructing the model, we need to estimate its parameters. This is done using the `fit` method. The `summary` method produces several convenient tables showing the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.143368Z",
     "iopub.status.busy": "2025-09-24T18:12:04.143053Z",
     "iopub.status.idle": "2025-09-24T18:12:04.282856Z",
     "shell.execute_reply": "2025-09-24T18:12:04.281973Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:                   infl   No. Observations:                  203\n",
      "Model:               SARIMAX(1, 0, 0)   Log Likelihood                -472.714\n",
      "Date:                Wed, 24 Sep 2025   AIC                            951.427\n",
      "Time:                        18:12:04   BIC                            961.367\n",
      "Sample:                    03-31-1959   HQIC                           955.449\n",
      "                         - 09-30-2009                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "intercept      1.3962      0.254      5.488      0.000       0.898       1.895\n",
      "ar.L1          0.6441      0.039     16.482      0.000       0.568       0.721\n",
      "sigma2         6.1519      0.397     15.487      0.000       5.373       6.930\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   8.43   Jarque-Bera (JB):                68.45\n",
      "Prob(Q):                              0.00   Prob(JB):                         0.00\n",
      "Heteroskedasticity (H):               1.47   Skew:                            -0.22\n",
      "Prob(H) (two-sided):                  0.12   Kurtosis:                         5.81\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "# Construct the model\n",
    "mod = sm.tsa.SARIMAX(endog, order=(1, 0, 0), trend=\"c\")\n",
    "# Estimate the parameters\n",
    "res = mod.fit()\n",
    "\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Forecasting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Out-of-sample forecasts are produced using the `forecast` or `get_forecast` methods from the results object.\n",
    "\n",
    "The `forecast` method gives only point forecasts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.286889Z",
     "iopub.status.busy": "2025-09-24T18:12:04.286000Z",
     "iopub.status.idle": "2025-09-24T18:12:04.308975Z",
     "shell.execute_reply": "2025-09-24T18:12:04.303247Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2009Q4    3.68921\n",
      "Freq: Q-DEC, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# The default is to get a one-step-ahead forecast:\n",
    "print(res.forecast())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `get_forecast` method is more general, and also allows constructing confidence intervals."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.312153Z",
     "iopub.status.busy": "2025-09-24T18:12:04.311806Z",
     "iopub.status.idle": "2025-09-24T18:12:04.343494Z",
     "shell.execute_reply": "2025-09-24T18:12:04.342863Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "infl       mean   mean_se  mean_ci_lower  mean_ci_upper\n",
      "2009Q4  3.68921  2.480302      -0.390523       7.768943\n"
     ]
    }
   ],
   "source": [
    "# Here we construct a more complete results object.\n",
    "fcast_res1 = res.get_forecast()\n",
    "\n",
    "# Most results are collected in the `summary_frame` attribute.\n",
    "# Here we specify that we want a confidence level of 90%\n",
    "print(fcast_res1.summary_frame(alpha=0.10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The default confidence level is 95%, but this can be controlled by setting the `alpha` parameter, where the confidence level is defined as $(1 - \\alpha) \\times 100\\%$. In the example above, we specified a confidence level of 90%, using `alpha=0.10`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Specifying the number of forecasts\n",
    "\n",
    "Both of the functions `forecast` and `get_forecast` accept a single argument indicating how many forecasting steps are desired. One option for this argument is always to provide an integer describing the number of steps ahead you want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.352127Z",
     "iopub.status.busy": "2025-09-24T18:12:04.347977Z",
     "iopub.status.idle": "2025-09-24T18:12:04.362708Z",
     "shell.execute_reply": "2025-09-24T18:12:04.361962Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2009Q4    3.689210\n",
      "2010Q1    3.772434\n",
      "Freq: Q-DEC, Name: predicted_mean, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(res.forecast(steps=2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.365580Z",
     "iopub.status.busy": "2025-09-24T18:12:04.365174Z",
     "iopub.status.idle": "2025-09-24T18:12:04.379099Z",
     "shell.execute_reply": "2025-09-24T18:12:04.378318Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "infl        mean   mean_se  mean_ci_lower  mean_ci_upper\n",
      "2009Q4  3.689210  2.480302      -1.172092       8.550512\n",
      "2010Q1  3.772434  2.950274      -2.009996       9.554865\n"
     ]
    }
   ],
   "source": [
    "fcast_res2 = res.get_forecast(steps=2)\n",
    "# Note: since we did not specify the alpha parameter, the\n",
    "# confidence level is at the default, 95%\n",
    "print(fcast_res2.summary_frame())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, **if your data included a Pandas index with a defined frequency** (see the section at the end on Indexes for more information), then you can alternatively specify the date through which you want forecasts to be produced:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.382232Z",
     "iopub.status.busy": "2025-09-24T18:12:04.381907Z",
     "iopub.status.idle": "2025-09-24T18:12:04.393534Z",
     "shell.execute_reply": "2025-09-24T18:12:04.392777Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2009Q4    3.689210\n",
      "2010Q1    3.772434\n",
      "2010Q2    3.826039\n",
      "Freq: Q-DEC, Name: predicted_mean, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(res.forecast(\"2010Q2\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.396528Z",
     "iopub.status.busy": "2025-09-24T18:12:04.396223Z",
     "iopub.status.idle": "2025-09-24T18:12:04.410501Z",
     "shell.execute_reply": "2025-09-24T18:12:04.409774Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "infl        mean   mean_se  mean_ci_lower  mean_ci_upper\n",
      "2009Q4  3.689210  2.480302      -1.172092       8.550512\n",
      "2010Q1  3.772434  2.950274      -2.009996       9.554865\n",
      "2010Q2  3.826039  3.124571      -2.298008       9.950087\n"
     ]
    }
   ],
   "source": [
    "fcast_res3 = res.get_forecast(\"2010Q2\")\n",
    "print(fcast_res3.summary_frame())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the data, forecasts, and confidence intervals\n",
    "\n",
    "Often it is useful to plot the data, the forecasts, and the confidence intervals. There are many ways to do this, but here's one example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.414094Z",
     "iopub.status.busy": "2025-09-24T18:12:04.413772Z",
     "iopub.status.idle": "2025-09-24T18:12:04.641602Z",
     "shell.execute_reply": "2025-09-24T18:12:04.640709Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(15, 5))\n",
    "\n",
    "# Plot the data (here we are subsetting it to get a better look at the forecasts)\n",
    "endog.loc[\"1999\":].plot(ax=ax)\n",
    "\n",
    "# Construct the forecasts\n",
    "fcast = res.get_forecast(\"2011Q4\").summary_frame()\n",
    "fcast[\"mean\"].plot(ax=ax, style=\"k--\")\n",
    "ax.fill_between(\n",
    "    fcast.index, fcast[\"mean_ci_lower\"], fcast[\"mean_ci_upper\"], color=\"k\", alpha=0.1\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note on what to expect from forecasts\n",
    "\n",
    "The forecast above may not look very impressive, as it is almost a straight line. This is because this is a very simple, univariate forecasting model. Nonetheless, keep in mind that these simple forecasting models can be extremely competitive."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction vs Forecasting\n",
    "\n",
    "The results objects also contain two methods that all for both in-sample fitted values and out-of-sample forecasting. They are `predict` and `get_prediction`. The `predict` method only returns point predictions (similar to `forecast`), while the `get_prediction` method also returns additional results (similar to `get_forecast`).\n",
    "\n",
    "In general, if your interest is out-of-sample forecasting, it is easier to stick to the `forecast` and `get_forecast` methods."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cross validation\n",
    "\n",
    "**Note**: some of the functions used in this section were first introduced in statsmodels v0.11.0.\n",
    "\n",
    "A common use case is to cross-validate forecasting methods by performing h-step-ahead forecasts recursively using the following process:\n",
    "\n",
    "1. Fit model parameters on a training sample\n",
    "2. Produce h-step-ahead forecasts from the end of that sample\n",
    "3. Compare forecasts against test dataset to compute error rate\n",
    "4. Expand the sample to include the next observation, and repeat\n",
    "\n",
    "Economists sometimes call this a pseudo-out-of-sample forecast evaluation exercise, or time-series cross-validation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will conduct a very simple exercise of this sort using the inflation dataset above. The full dataset contains 203 observations, and for expositional purposes we'll use the first 80% as our training sample and only consider one-step-ahead forecasts."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A single iteration of the above procedure looks like the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.644169Z",
     "iopub.status.busy": "2025-09-24T18:12:04.643901Z",
     "iopub.status.idle": "2025-09-24T18:12:04.684270Z",
     "shell.execute_reply": "2025-09-24T18:12:04.683032Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "intercept    1.162076\n",
      "ar.L1        0.724242\n",
      "sigma2       5.051600\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Step 1: fit model parameters w/ training sample\n",
    "training_obs = int(len(endog) * 0.8)\n",
    "\n",
    "training_endog = endog[:training_obs]\n",
    "training_mod = sm.tsa.SARIMAX(training_endog, order=(1, 0, 0), trend=\"c\")\n",
    "training_res = training_mod.fit()\n",
    "\n",
    "# Print the estimated parameters\n",
    "print(training_res.params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.687427Z",
     "iopub.status.busy": "2025-09-24T18:12:04.686987Z",
     "iopub.status.idle": "2025-09-24T18:12:04.702716Z",
     "shell.execute_reply": "2025-09-24T18:12:04.701954Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        true  forecast    error\n",
      "1999Q3  3.35   2.55262  0.79738\n"
     ]
    }
   ],
   "source": [
    "# Step 2: produce one-step-ahead forecasts\n",
    "fcast = training_res.forecast()\n",
    "\n",
    "# Step 3: compute root mean square forecasting error\n",
    "true = endog.reindex(fcast.index)\n",
    "error = true - fcast\n",
    "\n",
    "# Print out the results\n",
    "print(\n",
    "    pd.concat(\n",
    "        [true.rename(\"true\"), fcast.rename(\"forecast\"), error.rename(\"error\")], axis=1\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To add on another observation, we can use the `append` or `extend` results methods. Either method can produce the same forecasts, but they differ in the other results that are available:\n",
    "\n",
    "- `append` is the more complete method. It always stores results for all training observations, and it optionally allows refitting the model parameters given the new observations (note that the default is *not* to refit the parameters).\n",
    "- `extend` is a faster method that may be useful if the training sample is very large. It *only* stores results for the new observations, and it does not allow refitting the model parameters (i.e. you have to use the parameters estimated on the previous sample).\n",
    "\n",
    "If your training sample is relatively small (less than a few thousand observations, for example) or if you want to compute the best possible forecasts, then you should use the `append` method. However, if that method is infeasible (for example, because you have a very large training sample) or if you are okay with slightly suboptimal forecasts (because the parameter estimates will be slightly stale), then you can consider the `extend` method."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A second iteration, using the `append` method and refitting the parameters, would go as follows (note again that the default for `append` does not refit the parameters, but we have overridden that with the `refit=True` argument):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.705669Z",
     "iopub.status.busy": "2025-09-24T18:12:04.705390Z",
     "iopub.status.idle": "2025-09-24T18:12:04.767626Z",
     "shell.execute_reply": "2025-09-24T18:12:04.766963Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "intercept    1.171544\n",
      "ar.L1        0.723152\n",
      "sigma2       5.024580\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Step 1: append a new observation to the sample and refit the parameters\n",
    "append_res = training_res.append(endog[training_obs : training_obs + 1], refit=True)\n",
    "\n",
    "# Print the re-estimated parameters\n",
    "print(append_res.params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that these estimated parameters are slightly different than those we originally estimated. With the new results object, `append_res`, we can compute forecasts starting from one observation further than the previous call:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.770573Z",
     "iopub.status.busy": "2025-09-24T18:12:04.770288Z",
     "iopub.status.idle": "2025-09-24T18:12:04.793372Z",
     "shell.execute_reply": "2025-09-24T18:12:04.792542Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        true  forecast     error\n",
      "1999Q4  2.85  3.594102 -0.744102\n"
     ]
    }
   ],
   "source": [
    "# Step 2: produce one-step-ahead forecasts\n",
    "fcast = append_res.forecast()\n",
    "\n",
    "# Step 3: compute root mean square forecasting error\n",
    "true = endog.reindex(fcast.index)\n",
    "error = true - fcast\n",
    "\n",
    "# Print out the results\n",
    "print(\n",
    "    pd.concat(\n",
    "        [true.rename(\"true\"), fcast.rename(\"forecast\"), error.rename(\"error\")], axis=1\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Putting it altogether, we can perform the recursive forecast evaluation exercise as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:04.801624Z",
     "iopub.status.busy": "2025-09-24T18:12:04.801355Z",
     "iopub.status.idle": "2025-09-24T18:12:05.516951Z",
     "shell.execute_reply": "2025-09-24T18:12:05.515982Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          1999Q2    1999Q3    1999Q4    2000Q1    2000Q2\n",
      "1999Q3  2.552620       NaN       NaN       NaN       NaN\n",
      "1999Q4  3.010790  3.588286       NaN       NaN       NaN\n",
      "2000Q1  3.342616  3.760863  3.226165       NaN       NaN\n",
      "2000Q2       NaN  3.885850  3.498599  3.885225       NaN\n",
      "2000Q3       NaN       NaN  3.695908  3.975918  4.196649\n"
     ]
    }
   ],
   "source": [
    "# Setup forecasts\n",
    "nforecasts = 3\n",
    "forecasts = {}\n",
    "\n",
    "# Get the number of initial training observations\n",
    "nobs = len(endog)\n",
    "n_init_training = int(nobs * 0.8)\n",
    "\n",
    "# Create model for initial training sample, fit parameters\n",
    "training_endog = endog.iloc[:n_init_training]\n",
    "mod = sm.tsa.SARIMAX(training_endog, order=(1, 0, 0), trend=\"c\")\n",
    "res = mod.fit()\n",
    "\n",
    "# Save initial forecast\n",
    "forecasts[training_endog.index[-1]] = res.forecast(steps=nforecasts)\n",
    "\n",
    "# Step through the rest of the sample\n",
    "for t in range(n_init_training, nobs):\n",
    "    # Update the results by appending the next observation\n",
    "    updated_endog = endog.iloc[t : t + 1]\n",
    "    res = res.append(updated_endog, refit=False)\n",
    "\n",
    "    # Save the new set of forecasts\n",
    "    forecasts[updated_endog.index[0]] = res.forecast(steps=nforecasts)\n",
    "\n",
    "# Combine all forecasts into a dataframe\n",
    "forecasts = pd.concat(forecasts, axis=1)\n",
    "\n",
    "print(forecasts.iloc[:5, :5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now have a set of three forecasts made at each point in time from 1999Q2 through 2009Q3. We can construct the forecast errors by subtracting each forecast from the actual value of `endog` at that point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:05.521825Z",
     "iopub.status.busy": "2025-09-24T18:12:05.520347Z",
     "iopub.status.idle": "2025-09-24T18:12:05.561810Z",
     "shell.execute_reply": "2025-09-24T18:12:05.560950Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          1999Q2    1999Q3    1999Q4    2000Q1    2000Q2\n",
      "1999Q3  0.797380       NaN       NaN       NaN       NaN\n",
      "1999Q4 -0.160790 -0.738286       NaN       NaN       NaN\n",
      "2000Q1  0.417384 -0.000863  0.533835       NaN       NaN\n",
      "2000Q2       NaN  0.304150  0.691401  0.304775       NaN\n",
      "2000Q3       NaN       NaN -0.925908 -1.205918 -1.426649\n"
     ]
    }
   ],
   "source": [
    "# Construct the forecast errors\n",
    "forecast_errors = forecasts.apply(lambda column: endog - column).reindex(\n",
    "    forecasts.index\n",
    ")\n",
    "\n",
    "print(forecast_errors.iloc[:5, :5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To evaluate our forecasts, we often want to look at a summary value like the root mean square error. Here we can compute that for each horizon by first flattening the forecast errors so that they are indexed by horizon and then computing the root mean square error fore each horizon."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:05.565460Z",
     "iopub.status.busy": "2025-09-24T18:12:05.565109Z",
     "iopub.status.idle": "2025-09-24T18:12:05.597431Z",
     "shell.execute_reply": "2025-09-24T18:12:05.596548Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           1999Q2    1999Q3    1999Q4    2000Q1    2000Q2\n",
      "horizon                                                  \n",
      "1        0.797380 -0.738286  0.533835  0.304775 -1.426649\n",
      "2       -0.160790 -0.000863  0.691401 -1.205918 -0.311464\n",
      "3        0.417384  0.304150 -0.925908 -0.151602 -2.384952\n"
     ]
    }
   ],
   "source": [
    "# Reindex the forecasts by horizon rather than by date\n",
    "def flatten(column):\n",
    "    return column.dropna().reset_index(drop=True)\n",
    "\n",
    "\n",
    "flattened = forecast_errors.apply(flatten)\n",
    "flattened.index = (flattened.index + 1).rename(\"horizon\")\n",
    "\n",
    "print(flattened.iloc[:3, :5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:05.601029Z",
     "iopub.status.busy": "2025-09-24T18:12:05.600635Z",
     "iopub.status.idle": "2025-09-24T18:12:05.607828Z",
     "shell.execute_reply": "2025-09-24T18:12:05.606974Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "horizon\n",
      "1    3.292700\n",
      "2    3.421808\n",
      "3    3.280012\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Compute the root mean square error\n",
    "rmse = (flattened**2).mean(axis=1) ** 0.5\n",
    "\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using `extend`\n",
    "\n",
    "We can check that we get similar forecasts if we instead use the `extend` method, but that they are not exactly the same as when we use `append` with the `refit=True` argument. This is because `extend` does not re-estimate the parameters given the new observation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:05.611393Z",
     "iopub.status.busy": "2025-09-24T18:12:05.611032Z",
     "iopub.status.idle": "2025-09-24T18:12:06.294682Z",
     "shell.execute_reply": "2025-09-24T18:12:06.293875Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          1999Q2    1999Q3    1999Q4    2000Q1    2000Q2\n",
      "1999Q3  2.552620       NaN       NaN       NaN       NaN\n",
      "1999Q4  3.010790  3.588286       NaN       NaN       NaN\n",
      "2000Q1  3.342616  3.760863  3.226165       NaN       NaN\n",
      "2000Q2       NaN  3.885850  3.498599  3.885225       NaN\n",
      "2000Q3       NaN       NaN  3.695908  3.975918  4.196649\n"
     ]
    }
   ],
   "source": [
    "# Setup forecasts\n",
    "nforecasts = 3\n",
    "forecasts = {}\n",
    "\n",
    "# Get the number of initial training observations\n",
    "nobs = len(endog)\n",
    "n_init_training = int(nobs * 0.8)\n",
    "\n",
    "# Create model for initial training sample, fit parameters\n",
    "training_endog = endog.iloc[:n_init_training]\n",
    "mod = sm.tsa.SARIMAX(training_endog, order=(1, 0, 0), trend=\"c\")\n",
    "res = mod.fit()\n",
    "\n",
    "# Save initial forecast\n",
    "forecasts[training_endog.index[-1]] = res.forecast(steps=nforecasts)\n",
    "\n",
    "# Step through the rest of the sample\n",
    "for t in range(n_init_training, nobs):\n",
    "    # Update the results by appending the next observation\n",
    "    updated_endog = endog.iloc[t : t + 1]\n",
    "    res = res.extend(updated_endog)\n",
    "\n",
    "    # Save the new set of forecasts\n",
    "    forecasts[updated_endog.index[0]] = res.forecast(steps=nforecasts)\n",
    "\n",
    "# Combine all forecasts into a dataframe\n",
    "forecasts = pd.concat(forecasts, axis=1)\n",
    "\n",
    "print(forecasts.iloc[:5, :5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.297614Z",
     "iopub.status.busy": "2025-09-24T18:12:06.297312Z",
     "iopub.status.idle": "2025-09-24T18:12:06.371367Z",
     "shell.execute_reply": "2025-09-24T18:12:06.366726Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          1999Q2    1999Q3    1999Q4    2000Q1    2000Q2\n",
      "1999Q3  0.797380       NaN       NaN       NaN       NaN\n",
      "1999Q4 -0.160790 -0.738286       NaN       NaN       NaN\n",
      "2000Q1  0.417384 -0.000863  0.533835       NaN       NaN\n",
      "2000Q2       NaN  0.304150  0.691401  0.304775       NaN\n",
      "2000Q3       NaN       NaN -0.925908 -1.205918 -1.426649\n"
     ]
    }
   ],
   "source": [
    "# Construct the forecast errors\n",
    "forecast_errors = forecasts.apply(lambda column: endog - column).reindex(\n",
    "    forecasts.index\n",
    ")\n",
    "\n",
    "print(forecast_errors.iloc[:5, :5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.374292Z",
     "iopub.status.busy": "2025-09-24T18:12:06.373980Z",
     "iopub.status.idle": "2025-09-24T18:12:06.402131Z",
     "shell.execute_reply": "2025-09-24T18:12:06.401329Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           1999Q2    1999Q3    1999Q4    2000Q1    2000Q2\n",
      "horizon                                                  \n",
      "1        0.797380 -0.738286  0.533835  0.304775 -1.426649\n",
      "2       -0.160790 -0.000863  0.691401 -1.205918 -0.311464\n",
      "3        0.417384  0.304150 -0.925908 -0.151602 -2.384952\n"
     ]
    }
   ],
   "source": [
    "# Reindex the forecasts by horizon rather than by date\n",
    "def flatten(column):\n",
    "    return column.dropna().reset_index(drop=True)\n",
    "\n",
    "\n",
    "flattened = forecast_errors.apply(flatten)\n",
    "flattened.index = (flattened.index + 1).rename(\"horizon\")\n",
    "\n",
    "print(flattened.iloc[:3, :5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.405467Z",
     "iopub.status.busy": "2025-09-24T18:12:06.405174Z",
     "iopub.status.idle": "2025-09-24T18:12:06.413202Z",
     "shell.execute_reply": "2025-09-24T18:12:06.412432Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "horizon\n",
      "1    3.292700\n",
      "2    3.421808\n",
      "3    3.280012\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Compute the root mean square error\n",
    "rmse = (flattened**2).mean(axis=1) ** 0.5\n",
    "\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By not re-estimating the parameters, our forecasts are slightly worse (the root mean square error is higher at each horizon). However, the process is faster, even with only 200 datapoints. Using the `%%timeit` cell magic on the cells above, we found a runtime of 570ms using `extend` versus 1.7s using `append` with `refit=True`. (Note that using `extend` is also faster than using `append` with `refit=False`)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Indexes\n",
    "\n",
    "Throughout this notebook, we have been making use of Pandas date indexes with an associated frequency. As you can see, this index marks our data as at a quarterly frequency, between 1959Q1 and 2009Q3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.416209Z",
     "iopub.status.busy": "2025-09-24T18:12:06.415903Z",
     "iopub.status.idle": "2025-09-24T18:12:06.422767Z",
     "shell.execute_reply": "2025-09-24T18:12:06.422017Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PeriodIndex(['1959Q1', '1959Q2', '1959Q3', '1959Q4', '1960Q1', '1960Q2',\n",
      "             '1960Q3', '1960Q4', '1961Q1', '1961Q2',\n",
      "             ...\n",
      "             '2007Q2', '2007Q3', '2007Q4', '2008Q1', '2008Q2', '2008Q3',\n",
      "             '2008Q4', '2009Q1', '2009Q2', '2009Q3'],\n",
      "            dtype='period[Q-DEC]', length=203)\n"
     ]
    }
   ],
   "source": [
    "print(endog.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In most cases, if your data has an associated data/time index with a defined frequency (like quarterly, monthly, etc.), then it is best to make sure your data is a Pandas series with the appropriate index. Here are three examples of this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.426848Z",
     "iopub.status.busy": "2025-09-24T18:12:06.425782Z",
     "iopub.status.idle": "2025-09-24T18:12:06.433552Z",
     "shell.execute_reply": "2025-09-24T18:12:06.432900Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PeriodIndex(['2000', '2001', '2002', '2003'], dtype='period[Y-DEC]')\n"
     ]
    }
   ],
   "source": [
    "# Annual frequency, using a PeriodIndex\n",
    "index = pd.period_range(start=\"2000\", periods=4, freq=\"Y\")\n",
    "endog1 = pd.Series([1, 2, 3, 4], index=index)\n",
    "print(endog1.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.436541Z",
     "iopub.status.busy": "2025-09-24T18:12:06.436248Z",
     "iopub.status.idle": "2025-09-24T18:12:06.444033Z",
     "shell.execute_reply": "2025-09-24T18:12:06.443271Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatetimeIndex(['2000-01-01', '2000-04-01', '2000-07-01', '2000-10-01'], dtype='datetime64[ns]', freq='QS-JAN')\n"
     ]
    }
   ],
   "source": [
    "# Quarterly frequency, using a DatetimeIndex\n",
    "index = pd.date_range(start=\"2000\", periods=4, freq=\"QS\")\n",
    "endog2 = pd.Series([1, 2, 3, 4], index=index)\n",
    "print(endog2.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.447243Z",
     "iopub.status.busy": "2025-09-24T18:12:06.446901Z",
     "iopub.status.idle": "2025-09-24T18:12:06.454749Z",
     "shell.execute_reply": "2025-09-24T18:12:06.453928Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatetimeIndex(['2000-01-31', '2000-02-29', '2000-03-31', '2000-04-30'], dtype='datetime64[ns]', freq='ME')\n"
     ]
    }
   ],
   "source": [
    "# Monthly frequency, using a DatetimeIndex\n",
    "index = pd.date_range(start=\"2000\", periods=4, freq=\"ME\")\n",
    "endog3 = pd.Series([1, 2, 3, 4], index=index)\n",
    "print(endog3.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In fact, if your data has an associated date/time index, it is best to use that even if does not have a defined frequency. An example of that kind of index is as follows - notice that it has `freq=None`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.457693Z",
     "iopub.status.busy": "2025-09-24T18:12:06.457397Z",
     "iopub.status.idle": "2025-09-24T18:12:06.467863Z",
     "shell.execute_reply": "2025-09-24T18:12:06.467074Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatetimeIndex(['2000-01-01 10:08:00', '2000-01-01 11:32:00',\n",
      "               '2000-01-01 17:32:00', '2000-01-02 06:15:00'],\n",
      "              dtype='datetime64[ns]', freq=None)\n"
     ]
    }
   ],
   "source": [
    "index = pd.DatetimeIndex(\n",
    "    [\n",
    "        \"2000-01-01 10:08am\",\n",
    "        \"2000-01-01 11:32am\",\n",
    "        \"2000-01-01 5:32pm\",\n",
    "        \"2000-01-02 6:15am\",\n",
    "    ]\n",
    ")\n",
    "endog4 = pd.Series([0.2, 0.5, -0.1, 0.1], index=index)\n",
    "print(endog4.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can still pass this data to statsmodels' model classes, but you will get the following warning, that no frequency data was found:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.470864Z",
     "iopub.status.busy": "2025-09-24T18:12:06.470578Z",
     "iopub.status.idle": "2025-09-24T18:12:06.499622Z",
     "shell.execute_reply": "2025-09-24T18:12:06.498951Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/statsmodels/tsa/base/tsa_model.py:465: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n",
      "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/statsmodels/tsa/base/tsa_model.py:465: ValueWarning: A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.\n",
      "  self._init_dates(dates, freq)\n"
     ]
    }
   ],
   "source": [
    "mod = sm.tsa.SARIMAX(endog4)\n",
    "res = mod.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What this means is that you cannot specify forecasting steps by dates, and the output of the `forecast` and `get_forecast` methods will not have associated dates. The reason is that without a given frequency, there is no way to determine what date each forecast should be assigned to. In the example above, there is no pattern to the date/time stamps of the index, so there is no way to determine what the next date/time should be (should it be in the morning of 2000-01-02? the afternoon? or maybe not until 2000-01-03?).\n",
    "\n",
    "For example, if we forecast one-step-ahead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.505706Z",
     "iopub.status.busy": "2025-09-24T18:12:06.501893Z",
     "iopub.status.idle": "2025-09-24T18:12:06.520302Z",
     "shell.execute_reply": "2025-09-24T18:12:06.517306Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/statsmodels/tsa/base/tsa_model.py:829: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
      "  return get_prediction_index(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4    0.011866\n",
       "dtype: float64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.forecast(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The index associated with the new forecast is `4`, because if the given data had an integer index, that would be the next value. A warning is given letting the user know that the index is not a date/time index.\n",
    "\n",
    "If we try to specify the steps of the forecast using a date, we will get the following exception:\n",
    "\n",
    "    KeyError: 'The `end` argument could not be matched to a location related to the index of the data.'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T18:12:06.525884Z",
     "iopub.status.busy": "2025-09-24T18:12:06.525620Z",
     "iopub.status.idle": "2025-09-24T18:12:06.534253Z",
     "shell.execute_reply": "2025-09-24T18:12:06.533593Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'The `end` argument could not be matched to a location related to the index of the data.'\n"
     ]
    }
   ],
   "source": [
    "# Here we'll catch the exception to prevent printing too much of\n",
    "# the exception trace output in this notebook\n",
    "try:\n",
    "    res.forecast(\"2000-01-03\")\n",
    "except KeyError as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ultimately there is nothing wrong with using data that does not have an associated date/time frequency, or even using data that has no index at all, like a Numpy array. However, if you can use a Pandas series with an associated frequency, you'll have more options for specifying your forecasts and get back results with a more useful index."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
