{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Dynamic factors and coincident indices\n",
    "\n",
    "Factor models generally try to find a small number of unobserved \"factors\" that influence a substantial portion of the variation in a larger number of observed variables, and they are related to dimension-reduction techniques such as principal components analysis. Dynamic factor models explicitly model the transition dynamics of the unobserved factors, and so are often applied to time-series data.\n",
    "\n",
    "Macroeconomic coincident indices are designed to capture the common component of the \"business cycle\"; such a component is assumed to simultaneously affect many macroeconomic variables. Although the estimation and use of coincident indices (for example the [Index of Coincident Economic Indicators](http://www.newyorkfed.org/research/regional_economy/coincident_summary.html)) pre-dates dynamic factor models, in several influential papers Stock and Watson (1989, 1991) used a dynamic factor model to provide a theoretical foundation for them.\n",
    "\n",
    "Below, we follow the treatment found in Kim and Nelson (1999), of the Stock and Watson (1991) model, to formulate a dynamic factor model, estimate its parameters via maximum likelihood, and create a coincident index."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Macroeconomic data\n",
    "\n",
    "The coincident index is created by considering the comovements in four macroeconomic variables (versions of these variables are available on [FRED](https://research.stlouisfed.org/fred2/); the ID of the series used below is given in parentheses):\n",
    "\n",
    "- Industrial production (IPMAN)\n",
    "- Real aggregate income (excluding transfer payments) (W875RX1)\n",
    "- Manufacturing and trade sales (CMRMTSPL)\n",
    "- Employees on non-farm payrolls (PAYEMS)\n",
    "\n",
    "In all cases, the data is at the monthly frequency and has been seasonally adjusted; the time-frame considered is 1972 - 2005."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:23.572634Z",
     "iopub.status.busy": "2021-02-02T06:55:23.562860Z",
     "iopub.status.idle": "2021-02-02T06:55:24.917425Z",
     "shell.execute_reply": "2021-02-02T06:55:24.918520Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "np.set_printoptions(precision=4, suppress=True, linewidth=120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:24.923717Z",
     "iopub.status.busy": "2021-02-02T06:55:24.922220Z",
     "iopub.status.idle": "2021-02-02T06:55:27.287451Z",
     "shell.execute_reply": "2021-02-02T06:55:27.286760Z"
    }
   },
   "outputs": [],
   "source": [
    "from pandas_datareader.data import DataReader\n",
    "\n",
    "# Get the datasets from FRED\n",
    "start = '1979-01-01'\n",
    "end = '2014-12-01'\n",
    "indprod = DataReader('IPMAN', 'fred', start=start, end=end)\n",
    "income = DataReader('W875RX1', 'fred', start=start, end=end)\n",
    "sales = DataReader('CMRMTSPL', 'fred', start=start, end=end)\n",
    "emp = DataReader('PAYEMS', 'fred', start=start, end=end)\n",
    "# dta = pd.concat((indprod, income, sales, emp), axis=1)\n",
    "# dta.columns = ['indprod', 'income', 'sales', 'emp']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note**: in a recent update on FRED (8/12/15) the time series CMRMTSPL was truncated to begin in 1997; this is probably a mistake due to the fact that CMRMTSPL is a spliced series, so the earlier period is from the series HMRMT and the latter period is defined by CMRMT.\n",
    "\n",
    "This has since (02/11/16) been corrected, however the series could also be constructed by hand from HMRMT and CMRMT, as shown below (process taken from the notes in the Alfred xls file)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:27.291614Z",
     "iopub.status.busy": "2021-02-02T06:55:27.291206Z",
     "iopub.status.idle": "2021-02-02T06:55:27.294358Z",
     "shell.execute_reply": "2021-02-02T06:55:27.293981Z"
    }
   },
   "outputs": [],
   "source": [
    "# HMRMT = DataReader('HMRMT', 'fred', start='1967-01-01', end=end)\n",
    "# CMRMT = DataReader('CMRMT', 'fred', start='1997-01-01', end=end)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:27.297533Z",
     "iopub.status.busy": "2021-02-02T06:55:27.296945Z",
     "iopub.status.idle": "2021-02-02T06:55:27.299920Z",
     "shell.execute_reply": "2021-02-02T06:55:27.300272Z"
    }
   },
   "outputs": [],
   "source": [
    "# HMRMT_growth = HMRMT.diff() / HMRMT.shift()\n",
    "# sales = pd.Series(np.zeros(emp.shape[0]), index=emp.index)\n",
    "\n",
    "# # Fill in the recent entries (1997 onwards)\n",
    "# sales[CMRMT.index] = CMRMT\n",
    "\n",
    "# # Backfill the previous entries (pre 1997)\n",
    "# idx = sales.loc[:'1997-01-01'].index\n",
    "# for t in range(len(idx)-1, 0, -1):\n",
    "#     month = idx[t]\n",
    "#     prev_month = idx[t-1]\n",
    "#     sales.loc[prev_month] = sales.loc[month] / (1 + HMRMT_growth.loc[prev_month].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:27.306396Z",
     "iopub.status.busy": "2021-02-02T06:55:27.304617Z",
     "iopub.status.idle": "2021-02-02T06:55:27.308743Z",
     "shell.execute_reply": "2021-02-02T06:55:27.309109Z"
    }
   },
   "outputs": [],
   "source": [
    "dta = pd.concat((indprod, income, sales, emp), axis=1)\n",
    "dta.columns = ['indprod', 'income', 'sales', 'emp']\n",
    "dta.index.freq = dta.index.inferred_freq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:27.314838Z",
     "iopub.status.busy": "2021-02-02T06:55:27.313768Z",
     "iopub.status.idle": "2021-02-02T06:55:28.611206Z",
     "shell.execute_reply": "2021-02-02T06:55:28.612437Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:xlabel='DATE'>, <AxesSubplot:xlabel='DATE'>],\n",
       "       [<AxesSubplot:xlabel='DATE'>, <AxesSubplot:xlabel='DATE'>]], dtype=object)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dta.loc[:, 'indprod':'emp'].plot(subplots=True, layout=(2, 2), figsize=(15, 6));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Stock and Watson (1991) report that for their datasets, they could not reject the null hypothesis of a unit root in each series (so the series are integrated), but they did not find strong evidence that the series were co-integrated.\n",
    "\n",
    "As a result, they suggest estimating the model using the first differences (of the logs) of the variables, demeaned and standardized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:28.617801Z",
     "iopub.status.busy": "2021-02-02T06:55:28.616203Z",
     "iopub.status.idle": "2021-02-02T06:55:28.643771Z",
     "shell.execute_reply": "2021-02-02T06:55:28.644924Z"
    }
   },
   "outputs": [],
   "source": [
    "# Create log-differenced series\n",
    "dta['dln_indprod'] = (np.log(dta.indprod)).diff() * 100\n",
    "dta['dln_income'] = (np.log(dta.income)).diff() * 100\n",
    "dta['dln_sales'] = (np.log(dta.sales)).diff() * 100\n",
    "dta['dln_emp'] = (np.log(dta.emp)).diff() * 100\n",
    "\n",
    "# De-mean and standardize\n",
    "dta['std_indprod'] = (dta['dln_indprod'] - dta['dln_indprod'].mean()) / dta['dln_indprod'].std()\n",
    "dta['std_income'] = (dta['dln_income'] - dta['dln_income'].mean()) / dta['dln_income'].std()\n",
    "dta['std_sales'] = (dta['dln_sales'] - dta['dln_sales'].mean()) / dta['dln_sales'].std()\n",
    "dta['std_emp'] = (dta['dln_emp'] - dta['dln_emp'].mean()) / dta['dln_emp'].std()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dynamic factors\n",
    "\n",
    "A general dynamic factor model is written as:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "y_t & = \\Lambda f_t + B x_t + u_t \\\\\n",
    "f_t & = A_1 f_{t-1} + \\dots + A_p f_{t-p} + \\eta_t \\qquad \\eta_t \\sim N(0, I)\\\\\n",
    "u_t & = C_1 u_{t-1} + \\dots + C_q u_{t-q} + \\varepsilon_t \\qquad \\varepsilon_t \\sim N(0, \\Sigma)\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where $y_t$ are observed data, $f_t$ are the unobserved factors (evolving as a vector autoregression), $x_t$ are (optional) exogenous variables, and $u_t$ is the error, or \"idiosyncratic\", process ($u_t$ is also optionally allowed to be autocorrelated). The $\\Lambda$ matrix is often referred to as the matrix of \"factor loadings\". The variance of the factor error term is set to the identity matrix to ensure identification of the unobserved factors.\n",
    "\n",
    "This model can be cast into state space form, and the unobserved factor estimated via the Kalman filter. The likelihood can be evaluated as a byproduct of the filtering recursions, and maximum likelihood estimation used to estimate the parameters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model specification\n",
    "\n",
    "The specific dynamic factor model in this application has 1 unobserved factor which is assumed to follow an AR(2) process. The innovations $\\varepsilon_t$ are assumed to be independent (so that $\\Sigma$ is a diagonal matrix) and the error term associated with each equation, $u_{i,t}$ is assumed to follow an independent AR(2) process.\n",
    "\n",
    "Thus the specification considered here is:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "y_{i,t} & = \\lambda_i f_t + u_{i,t} \\\\\n",
    "u_{i,t} & = c_{i,1} u_{1,t-1} + c_{i,2} u_{i,t-2} + \\varepsilon_{i,t} \\qquad & \\varepsilon_{i,t} \\sim N(0, \\sigma_i^2) \\\\\n",
    "f_t & = a_1 f_{t-1} + a_2 f_{t-2} + \\eta_t \\qquad & \\eta_t \\sim N(0, I)\\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where $i$ is one of: `[indprod, income, sales, emp ]`.\n",
    "\n",
    "This model can be formulated using the `DynamicFactor` model built-in to statsmodels. In particular, we have the following specification:\n",
    "\n",
    "- `k_factors = 1` - (there is 1 unobserved factor)\n",
    "- `factor_order = 2` - (it follows an AR(2) process)\n",
    "- `error_var = False` - (the errors evolve as independent AR processes rather than jointly as a VAR - note that this is the default option, so it is not specified below)\n",
    "- `error_order = 2` - (the errors are autocorrelated of order 2: i.e. AR(2) processes)\n",
    "- `error_cov_type = 'diagonal'` - (the innovations are uncorrelated; this is again the default)\n",
    "\n",
    "Once the model is created, the parameters can be estimated via maximum likelihood; this is done using the `fit()` method.\n",
    "\n",
    "**Note**: recall that we have demeaned and standardized the data; this will be important in interpreting the results that follow.\n",
    "\n",
    "**Aside**: in their empirical example, Kim and Nelson (1999) actually consider a slightly different model in which the employment variable is allowed to also depend on lagged values of the factor - this model does not fit into the built-in `DynamicFactor` class, but can be accommodated by using a subclass to implement the required new parameters and restrictions - see Appendix A, below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parameter estimation\n",
    "\n",
    "Multivariate models can have a relatively large number of parameters, and it may be difficult to escape from local minima to find the maximized likelihood. In an attempt to mitigate this problem, I perform an initial maximization step (from the model-defined starting parameters) using the modified Powell method available in Scipy (see the minimize documentation for more information). The resulting parameters are then used as starting parameters in the standard LBFGS optimization method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:28.650479Z",
     "iopub.status.busy": "2021-02-02T06:55:28.648877Z",
     "iopub.status.idle": "2021-02-02T06:55:41.886505Z",
     "shell.execute_reply": "2021-02-02T06:55:41.887418Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/build/statsmodels/statsmodels/statsmodels/base/model.py:568: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "# Get the endogenous data\n",
    "endog = dta.loc['1979-02-01':, 'std_indprod':'std_emp']\n",
    "\n",
    "# Create the model\n",
    "mod = sm.tsa.DynamicFactor(endog, k_factors=1, factor_order=2, error_order=2)\n",
    "initial_res = mod.fit(method='powell', disp=False)\n",
    "res = mod.fit(initial_res.params, disp=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimates\n",
    "\n",
    "Once the model has been estimated, there are two components that we can use for analysis or inference:\n",
    "\n",
    "- The estimated parameters\n",
    "- The estimated factor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parameters\n",
    "\n",
    "The estimated parameters can be helpful in understanding the implications of the model, although in models with a larger number of observed variables and / or unobserved factors they can be difficult to interpret.\n",
    "\n",
    "One reason for this difficulty is due to identification issues between the factor loadings and the unobserved factors. One easy-to-see identification issue is the sign of the loadings and the factors: an equivalent model to the one displayed below would result from reversing the signs of all factor loadings and the unobserved factor.\n",
    "\n",
    "Here, one of the easy-to-interpret implications in this model is the persistence of the unobserved factor: we find that exhibits substantial persistence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:41.891831Z",
     "iopub.status.busy": "2021-02-02T06:55:41.890572Z",
     "iopub.status.idle": "2021-02-02T06:55:41.918686Z",
     "shell.execute_reply": "2021-02-02T06:55:41.919569Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                             Statespace Model Results                                            \n",
      "=================================================================================================================\n",
      "Dep. Variable:     ['std_indprod', 'std_income', 'std_sales', 'std_emp']   No. Observations:                  431\n",
      "Model:                                 DynamicFactor(factors=1, order=2)   Log Likelihood               -2065.023\n",
      "                                                          + AR(2) errors   AIC                           4166.047\n",
      "Date:                                                   Tue, 02 Feb 2021   BIC                           4239.237\n",
      "Time:                                                           06:55:41   HQIC                          4194.945\n",
      "Sample:                                                       02-01-1979                                         \n",
      "                                                            - 12-01-2014                                         \n",
      "Covariance Type:                                                     opg                                         \n",
      "====================================================================================================\n",
      "                                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "loading.f1.std_indprod              -0.8559      0.016    -52.146      0.000      -0.888      -0.824\n",
      "loading.f1.std_income               -0.2515      0.034     -7.425      0.000      -0.318      -0.185\n",
      "loading.f1.std_sales                -0.4757      0.024    -19.974      0.000      -0.522      -0.429\n",
      "loading.f1.std_emp                  -0.2721      0.027    -10.039      0.000      -0.325      -0.219\n",
      "sigma2.std_indprod                8.559e-15   1.38e-09   6.21e-06      1.000    -2.7e-09     2.7e-09\n",
      "sigma2.std_income                    0.9031      0.020     46.067      0.000       0.865       0.941\n",
      "sigma2.std_sales                     0.6022      0.035     17.302      0.000       0.534       0.670\n",
      "sigma2.std_emp                       0.3707      0.015     25.456      0.000       0.342       0.399\n",
      "L1.f1.f1                             0.2210      0.017     12.884      0.000       0.187       0.255\n",
      "L2.f1.f1                             0.2766      0.021     13.125      0.000       0.235       0.318\n",
      "L1.e(std_indprod).e(std_indprod)    -1.8926      0.002  -1148.990      0.000      -1.896      -1.889\n",
      "L2.e(std_indprod).e(std_indprod)    -1.0000   9.78e-06  -1.02e+05      0.000      -1.000      -1.000\n",
      "L1.e(std_income).e(std_income)      -0.1542      0.019     -8.279      0.000      -0.191      -0.118\n",
      "L2.e(std_income).e(std_income)      -0.0874      0.020     -4.265      0.000      -0.128      -0.047\n",
      "L1.e(std_sales).e(std_sales)        -0.4418      0.031    -14.375      0.000      -0.502      -0.382\n",
      "L2.e(std_sales).e(std_sales)        -0.2077      0.021     -9.977      0.000      -0.248      -0.167\n",
      "L1.e(std_emp).e(std_emp)             0.3046      0.034      8.978      0.000       0.238       0.371\n",
      "L2.e(std_emp).e(std_emp)             0.4799      0.029     16.622      0.000       0.423       0.536\n",
      "====================================================================================================\n",
      "Ljung-Box (L1) (Q):     0.81, 0.05, 0.06, 5.99   Jarque-Bera (JB):   194.03, 9286.86, 20.12, 4165.97\n",
      "Prob(Q):                0.37, 0.83, 0.81, 0.01   Prob(JB):                    0.00, 0.00, 0.00, 0.00\n",
      "Heteroskedasticity (H): 0.80, 4.82, 0.47, 0.41   Skew:                       0.07, -0.98, 0.19, 0.86\n",
      "Prob(H) (two-sided):    0.19, 0.00, 0.00, 0.00   Kurtosis:                  6.28, 25.66, 3.99, 18.13\n",
      "====================================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
      "[2] Covariance matrix is singular or near-singular, with condition number 7.69e+16. Standard errors may be unstable.\n"
     ]
    }
   ],
   "source": [
    "print(res.summary(separate_params=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Estimated factors\n",
    "\n",
    "While it can be useful to plot the unobserved factors, it is less useful here than one might think for two reasons:\n",
    "\n",
    "1. The sign-related identification issue described above.\n",
    "2. Since the data was differenced, the estimated factor explains the variation in the differenced data, not the original data.\n",
    "\n",
    "It is for these reasons that the coincident index is created (see below).\n",
    "\n",
    "With these reservations, the unobserved factor is plotted below, along with the NBER indicators for US recessions. It appears that the factor is successful at picking up some degree of business cycle activity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:41.923749Z",
     "iopub.status.busy": "2021-02-02T06:55:41.922501Z",
     "iopub.status.idle": "2021-02-02T06:55:42.349590Z",
     "shell.execute_reply": "2021-02-02T06:55:42.350605Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PolyCollection at 0x7f4e82c99710>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(13,3))\n",
    "\n",
    "# Plot the factor\n",
    "dates = endog.index._mpl_repr()\n",
    "ax.plot(dates, res.factors.filtered[0], label='Factor')\n",
    "ax.legend()\n",
    "\n",
    "# Retrieve and also plot the NBER recession indicators\n",
    "rec = DataReader('USREC', 'fred', start=start, end=end)\n",
    "ylim = ax.get_ylim()\n",
    "ax.fill_between(dates[:-3], ylim[0], ylim[1], rec.values[:-4,0], facecolor='k', alpha=0.1);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Post-estimation\n",
    "\n",
    "Although here we will be able to interpret the results of the model by constructing the coincident index, there is a useful and generic approach for getting a sense for what is being captured by the estimated factor. By taking the estimated factors as given, regressing them (and a constant) each (one at a time) on each of the observed variables, and recording the coefficients of determination ($R^2$ values), we can get a sense of the variables for which each factor explains a substantial portion of the variance and the variables for which it does not.\n",
    "\n",
    "In models with more variables and more factors, this can sometimes lend interpretation to the factors (for example sometimes one factor will load primarily on real variables and another on nominal variables).\n",
    "\n",
    "In this model, with only four endogenous variables and one factor, it is easy to digest a simple table of the $R^2$ values, but in larger models it is not. For this reason, a bar plot is often employed; from the plot we can easily see that the factor explains most of the variation in industrial production index and a large portion of the variation in sales and employment, it is less helpful in explaining income."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:42.355036Z",
     "iopub.status.busy": "2021-02-02T06:55:42.353706Z",
     "iopub.status.idle": "2021-02-02T06:55:42.858813Z",
     "shell.execute_reply": "2021-02-02T06:55:42.859889Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x144 with 1 Axes>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "res.plot_coefficients_of_determination(figsize=(8,2));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coincident Index\n",
    "\n",
    "As described above, the goal of this model was to create an interpretable series which could be used to understand the current status of the macroeconomy. This is what the coincident index is designed to do. It is constructed below. For readers interested in an explanation of the construction, see Kim and Nelson (1999) or Stock and Watson (1991).\n",
    "\n",
    "In essence, what is done is to reconstruct the mean of the (differenced) factor. We will compare it to the coincident index on published by the Federal Reserve Bank of Philadelphia (USPHCI on FRED)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:42.865229Z",
     "iopub.status.busy": "2021-02-02T06:55:42.863831Z",
     "iopub.status.idle": "2021-02-02T06:55:43.422249Z",
     "shell.execute_reply": "2021-02-02T06:55:43.423193Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='DATE'>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "usphci = DataReader('USPHCI', 'fred', start='1979-01-01', end='2014-12-01')['USPHCI']\n",
    "usphci.plot(figsize=(13,3));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:43.427479Z",
     "iopub.status.busy": "2021-02-02T06:55:43.426163Z",
     "iopub.status.idle": "2021-02-02T06:55:43.438036Z",
     "shell.execute_reply": "2021-02-02T06:55:43.438929Z"
    }
   },
   "outputs": [],
   "source": [
    "dusphci = usphci.diff()[1:].values\n",
    "def compute_coincident_index(mod, res):\n",
    "    # Estimate W(1)\n",
    "    spec = res.specification\n",
    "    design = mod.ssm['design']\n",
    "    transition = mod.ssm['transition']\n",
    "    ss_kalman_gain = res.filter_results.kalman_gain[:,:,-1]\n",
    "    k_states = ss_kalman_gain.shape[0]\n",
    "\n",
    "    W1 = np.linalg.inv(np.eye(k_states) - np.dot(\n",
    "        np.eye(k_states) - np.dot(ss_kalman_gain, design),\n",
    "        transition\n",
    "    )).dot(ss_kalman_gain)[0]\n",
    "\n",
    "    # Compute the factor mean vector\n",
    "    factor_mean = np.dot(W1, dta.loc['1972-02-01':, 'dln_indprod':'dln_emp'].mean())\n",
    "    \n",
    "    # Normalize the factors\n",
    "    factor = res.factors.filtered[0]\n",
    "    factor *= np.std(usphci.diff()[1:]) / np.std(factor)\n",
    "\n",
    "    # Compute the coincident index\n",
    "    coincident_index = np.zeros(mod.nobs+1)\n",
    "    # The initial value is arbitrary; here it is set to\n",
    "    # facilitate comparison\n",
    "    coincident_index[0] = usphci.iloc[0] * factor_mean / dusphci.mean()\n",
    "    for t in range(0, mod.nobs):\n",
    "        coincident_index[t+1] = coincident_index[t] + factor[t] + factor_mean\n",
    "    \n",
    "    # Attach dates\n",
    "    coincident_index = pd.Series(coincident_index, index=dta.index).iloc[1:]\n",
    "    \n",
    "    # Normalize to use the same base year as USPHCI\n",
    "    coincident_index *= (usphci.loc['1992-07-01'] / coincident_index.loc['1992-07-01'])\n",
    "    \n",
    "    return coincident_index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below we plot the calculated coincident index along with the US recessions and the comparison coincident index USPHCI."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:43.443218Z",
     "iopub.status.busy": "2021-02-02T06:55:43.441862Z",
     "iopub.status.idle": "2021-02-02T06:55:43.735185Z",
     "shell.execute_reply": "2021-02-02T06:55:43.735811Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PolyCollection at 0x7f4e82bb00d0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(13,3))\n",
    "\n",
    "# Compute the index\n",
    "coincident_index = compute_coincident_index(mod, res)\n",
    "\n",
    "# Plot the factor\n",
    "dates = endog.index._mpl_repr()\n",
    "ax.plot(dates, coincident_index, label='Coincident index')\n",
    "ax.plot(usphci.index._mpl_repr(), usphci, label='USPHCI')\n",
    "ax.legend(loc='lower right')\n",
    "\n",
    "# Retrieve and also plot the NBER recession indicators\n",
    "ylim = ax.get_ylim()\n",
    "ax.fill_between(dates[:-3], ylim[0], ylim[1], rec.values[:-4,0], facecolor='k', alpha=0.1);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Appendix 1: Extending the dynamic factor model\n",
    "\n",
    "Recall that the previous specification was described by:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "y_{i,t} & = \\lambda_i f_t + u_{i,t} \\\\\n",
    "u_{i,t} & = c_{i,1} u_{1,t-1} + c_{i,2} u_{i,t-2} + \\varepsilon_{i,t} \\qquad & \\varepsilon_{i,t} \\sim N(0, \\sigma_i^2) \\\\\n",
    "f_t & = a_1 f_{t-1} + a_2 f_{t-2} + \\eta_t \\qquad & \\eta_t \\sim N(0, I)\\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "Written in state space form, the previous specification of the model had the following observation equation:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "y_{\\text{indprod}, t} \\\\\n",
    "y_{\\text{income}, t} \\\\\n",
    "y_{\\text{sales}, t} \\\\\n",
    "y_{\\text{emp}, t} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "\\lambda_\\text{indprod} & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{income}  & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{sales}   & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{emp}     & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "u_{\\text{indprod}, t} \\\\\n",
    "u_{\\text{income}, t} \\\\\n",
    "u_{\\text{sales}, t} \\\\\n",
    "u_{\\text{emp}, t} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "and transition equation:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "u_{\\text{indprod}, t} \\\\\n",
    "u_{\\text{income}, t} \\\\\n",
    "u_{\\text{sales}, t} \\\\\n",
    "u_{\\text{emp}, t} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "a_1 & a_2 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "1   & 0   & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & c_{\\text{indprod}, 1} & 0 & 0 & 0 & c_{\\text{indprod}, 2} & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & c_{\\text{income}, 1} & 0 & 0 & 0 & c_{\\text{income}, 2} & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & c_{\\text{sales}, 1} & 0 & 0 & 0 & c_{\\text{sales}, 2} & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & c_{\\text{emp}, 1} & 0 & 0 & 0 & c_{\\text{emp}, 2} \\\\\n",
    "0   & 0   & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix} \n",
    "\\begin{bmatrix}\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "u_{\\text{indprod}, t-2} \\\\\n",
    "u_{\\text{income}, t-2} \\\\\n",
    "u_{\\text{sales}, t-2} \\\\\n",
    "u_{\\text{emp}, t-2} \\\\\n",
    "\\end{bmatrix}\n",
    "+ R \\begin{bmatrix}\n",
    "\\eta_t \\\\\n",
    "\\varepsilon_{t}\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "the `DynamicFactor` model handles setting up the state space representation and, in the `DynamicFactor.update` method, it fills in the fitted parameter values into the appropriate locations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The extended specification is the same as in the previous example, except that we also want to allow employment to depend on lagged values of the factor. This creates a change to the $y_{\\text{emp},t}$ equation. Now we have:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "y_{i,t} & = \\lambda_i f_t + u_{i,t} \\qquad & i \\in \\{\\text{indprod}, \\text{income}, \\text{sales} \\}\\\\\n",
    "y_{i,t} & = \\lambda_{i,0} f_t + \\lambda_{i,1} f_{t-1} + \\lambda_{i,2} f_{t-2} + \\lambda_{i,2} f_{t-3} + u_{i,t} \\qquad & i = \\text{emp} \\\\\n",
    "u_{i,t} & = c_{i,1} u_{i,t-1} + c_{i,2} u_{i,t-2} + \\varepsilon_{i,t} \\qquad & \\varepsilon_{i,t} \\sim N(0, \\sigma_i^2) \\\\\n",
    "f_t & = a_1 f_{t-1} + a_2 f_{t-2} + \\eta_t \\qquad & \\eta_t \\sim N(0, I)\\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "Now, the corresponding observation equation should look like the following:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "y_{\\text{indprod}, t} \\\\\n",
    "y_{\\text{income}, t} \\\\\n",
    "y_{\\text{sales}, t} \\\\\n",
    "y_{\\text{emp}, t} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "\\lambda_\\text{indprod} & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{income}  & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{sales}   & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\lambda_\\text{emp,1}   & \\lambda_\\text{emp,2} & \\lambda_\\text{emp,3} & \\lambda_\\text{emp,4} & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "u_{\\text{indprod}, t} \\\\\n",
    "u_{\\text{income}, t} \\\\\n",
    "u_{\\text{sales}, t} \\\\\n",
    "u_{\\text{emp}, t} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "Notice that we have introduced two new state variables, $f_{t-2}$ and $f_{t-3}$, which means we need to update the  transition equation:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "u_{\\text{indprod}, t} \\\\\n",
    "u_{\\text{income}, t} \\\\\n",
    "u_{\\text{sales}, t} \\\\\n",
    "u_{\\text{emp}, t} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "a_1 & a_2 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "1   & 0   & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 1   & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & c_{\\text{indprod}, 1} & 0 & 0 & 0 & c_{\\text{indprod}, 2} & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & c_{\\text{income}, 1} & 0 & 0 & 0 & c_{\\text{income}, 2} & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 0 & c_{\\text{sales}, 1} & 0 & 0 & 0 & c_{\\text{sales}, 2} & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 0 & 0 & c_{\\text{emp}, 1} & 0 & 0 & 0 & c_{\\text{emp}, 2} \\\\\n",
    "0   & 0   & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "0   & 0   & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix} \n",
    "\\begin{bmatrix}\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "f_{t-4} \\\\\n",
    "u_{\\text{indprod}, t-1} \\\\\n",
    "u_{\\text{income}, t-1} \\\\\n",
    "u_{\\text{sales}, t-1} \\\\\n",
    "u_{\\text{emp}, t-1} \\\\\n",
    "u_{\\text{indprod}, t-2} \\\\\n",
    "u_{\\text{income}, t-2} \\\\\n",
    "u_{\\text{sales}, t-2} \\\\\n",
    "u_{\\text{emp}, t-2} \\\\\n",
    "\\end{bmatrix}\n",
    "+ R \\begin{bmatrix}\n",
    "\\eta_t \\\\\n",
    "\\varepsilon_{t}\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "This model cannot be handled out-of-the-box by the `DynamicFactor` class, but it can be handled by creating a subclass when alters the state space representation in the appropriate way."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, notice that if we had set `factor_order = 4`, we would almost have what we wanted. In that case, the last line of the observation equation would be:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "\\vdots \\\\\n",
    "y_{\\text{emp}, t} \\\\\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "\\vdots &  &  &  &  &  &  &  &  &  &  & \\vdots \\\\\n",
    "\\lambda_\\text{emp,1}   & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "\\vdots\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "\n",
    "and the first line of the transition equation would be:\n",
    "\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "f_t \\\\\n",
    "\\vdots\n",
    "\\end{bmatrix} = \\begin{bmatrix}\n",
    "a_1 & a_2 & a_3 & a_4 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n",
    "\\vdots &  &  &  &  &  &  &  &  &  &  & \\vdots \\\\\n",
    "\\end{bmatrix} \n",
    "\\begin{bmatrix}\n",
    "f_{t-1} \\\\\n",
    "f_{t-2} \\\\\n",
    "f_{t-3} \\\\\n",
    "f_{t-4} \\\\\n",
    "\\vdots\n",
    "\\end{bmatrix}\n",
    "+ R \\begin{bmatrix}\n",
    "\\eta_t \\\\\n",
    "\\varepsilon_{t}\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "Relative to what we want, we have the following differences:\n",
    "\n",
    "1. In the above situation, the $\\lambda_{\\text{emp}, j}$ are forced to be zero for $j > 0$, and we want them to be estimated as parameters.\n",
    "2. We only want the factor to transition according to an AR(2), but under the above situation it is an AR(4).\n",
    "\n",
    "Our strategy will be to subclass `DynamicFactor`, and let it do most of the work (setting up the state space representation, etc.) where it assumes that `factor_order = 4`. The only things we will actually do in the subclass will be to fix those two issues.\n",
    "\n",
    "First, here is the full code of the subclass; it is discussed below. It is important to note at the outset that none of the methods defined below could have been omitted. In fact, the methods `__init__`, `start_params`, `param_names`, `transform_params`, `untransform_params`, and `update` form the core of all state space models in statsmodels, not just the `DynamicFactor` class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:43.745217Z",
     "iopub.status.busy": "2021-02-02T06:55:43.739478Z",
     "iopub.status.idle": "2021-02-02T06:55:43.755607Z",
     "shell.execute_reply": "2021-02-02T06:55:43.754982Z"
    }
   },
   "outputs": [],
   "source": [
    "from statsmodels.tsa.statespace import tools\n",
    "class ExtendedDFM(sm.tsa.DynamicFactor):\n",
    "    def __init__(self, endog, **kwargs):\n",
    "            # Setup the model as if we had a factor order of 4\n",
    "            super(ExtendedDFM, self).__init__(\n",
    "                endog, k_factors=1, factor_order=4, error_order=2,\n",
    "                **kwargs)\n",
    "\n",
    "            # Note: `self.parameters` is an ordered dict with the\n",
    "            # keys corresponding to parameter types, and the values\n",
    "            # the number of parameters of that type.\n",
    "            # Add the new parameters\n",
    "            self.parameters['new_loadings'] = 3\n",
    "\n",
    "            # Cache a slice for the location of the 4 factor AR\n",
    "            # parameters (a_1, ..., a_4) in the full parameter vector\n",
    "            offset = (self.parameters['factor_loadings'] +\n",
    "                      self.parameters['exog'] +\n",
    "                      self.parameters['error_cov'])\n",
    "            self._params_factor_ar = np.s_[offset:offset+2]\n",
    "            self._params_factor_zero = np.s_[offset+2:offset+4]\n",
    "\n",
    "    @property\n",
    "    def start_params(self):\n",
    "        # Add three new loading parameters to the end of the parameter\n",
    "        # vector, initialized to zeros (for simplicity; they could\n",
    "        # be initialized any way you like)\n",
    "        return np.r_[super(ExtendedDFM, self).start_params, 0, 0, 0]\n",
    "    \n",
    "    @property\n",
    "    def param_names(self):\n",
    "        # Add the corresponding names for the new loading parameters\n",
    "        #  (the name can be anything you like)\n",
    "        return super(ExtendedDFM, self).param_names + [\n",
    "            'loading.L%d.f1.%s' % (i, self.endog_names[3]) for i in range(1,4)]\n",
    "\n",
    "    def transform_params(self, unconstrained):\n",
    "            # Perform the typical DFM transformation (w/o the new parameters)\n",
    "            constrained = super(ExtendedDFM, self).transform_params(\n",
    "            unconstrained[:-3])\n",
    "\n",
    "            # Redo the factor AR constraint, since we only want an AR(2),\n",
    "            # and the previous constraint was for an AR(4)\n",
    "            ar_params = unconstrained[self._params_factor_ar]\n",
    "            constrained[self._params_factor_ar] = (\n",
    "                tools.constrain_stationary_univariate(ar_params))\n",
    "\n",
    "            # Return all the parameters\n",
    "            return np.r_[constrained, unconstrained[-3:]]\n",
    "\n",
    "    def untransform_params(self, constrained):\n",
    "            # Perform the typical DFM untransformation (w/o the new parameters)\n",
    "            unconstrained = super(ExtendedDFM, self).untransform_params(\n",
    "                constrained[:-3])\n",
    "\n",
    "            # Redo the factor AR unconstrained, since we only want an AR(2),\n",
    "            # and the previous unconstrained was for an AR(4)\n",
    "            ar_params = constrained[self._params_factor_ar]\n",
    "            unconstrained[self._params_factor_ar] = (\n",
    "                tools.unconstrain_stationary_univariate(ar_params))\n",
    "\n",
    "            # Return all the parameters\n",
    "            return np.r_[unconstrained, constrained[-3:]]\n",
    "\n",
    "    def update(self, params, transformed=True, **kwargs):\n",
    "        # Peform the transformation, if required\n",
    "        if not transformed:\n",
    "            params = self.transform_params(params)\n",
    "        params[self._params_factor_zero] = 0\n",
    "        \n",
    "        # Now perform the usual DFM update, but exclude our new parameters\n",
    "        super(ExtendedDFM, self).update(params[:-3], transformed=True, **kwargs)\n",
    "\n",
    "        # Finally, set our new parameters in the design matrix\n",
    "        self.ssm['design', 3, 1:4] = params[-3:]\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So what did we just do?\n",
    "\n",
    "**`__init__`**\n",
    "\n",
    "The important step here was specifying the base dynamic factor model which we were operating with. In particular, as described above, we initialize with `factor_order=4`, even though we will only end up with an AR(2) model for the factor. We also performed some general setup-related tasks.\n",
    "\n",
    "**`start_params`**\n",
    "\n",
    "`start_params` are used as initial values in the optimizer. Since we are adding three new parameters, we need to pass those in. If we had not done this, the optimizer would use the default starting values, which would be three elements short.\n",
    "\n",
    "**`param_names`**\n",
    "\n",
    "`param_names` are used in a variety of places, but especially in the results class. Below we get a full result summary, which is only possible when all the parameters have associated names.\n",
    "\n",
    "**`transform_params`** and **`untransform_params`**\n",
    "\n",
    "The optimizer selects possibly parameter values in an unconstrained way. That's not usually desired (since variances cannot be negative, for example), and `transform_params` is used to transform the unconstrained values used by the optimizer to constrained values appropriate to the model. Variances terms are typically squared (to force them to be positive), and AR lag coefficients are often constrained to lead to a stationary model. `untransform_params` is used for the reverse operation (and is important because starting parameters are usually specified in terms of values appropriate to the model, and we need to convert them to parameters appropriate to the optimizer before we can begin the optimization routine).\n",
    "\n",
    "Even though we do not need to transform or untransform our new parameters (the loadings can in theory take on any values), we still need to modify this function for two reasons:\n",
    "\n",
    "1. The version in the `DynamicFactor` class is expecting 3 fewer parameters than we have now. At a minimum, we need to handle the three new parameters.\n",
    "2. The version in the `DynamicFactor` class constrains the factor lag coefficients to be stationary as though it was an AR(4) model. Since we actually have an AR(2) model, we need to re-do the constraint. We also set the last two autoregressive coefficients to be zero here.\n",
    "\n",
    "**`update`**\n",
    "\n",
    "The most important reason we need to specify a new `update` method is because we have three new parameters that we need to place into the state space formulation. In particular we let the parent `DynamicFactor.update` class handle placing all the parameters except the three new ones in to the state space representation, and then we put the last three in manually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:55:43.762720Z",
     "iopub.status.busy": "2021-02-02T06:55:43.761474Z",
     "iopub.status.idle": "2021-02-02T06:56:16.872412Z",
     "shell.execute_reply": "2021-02-02T06:56:16.871209Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 4.698612\n",
      "         Iterations: 271\n",
      "         Function evaluations: 471\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                             Statespace Model Results                                            \n",
      "=================================================================================================================\n",
      "Dep. Variable:     ['std_indprod', 'std_income', 'std_sales', 'std_emp']   No. Observations:                  431\n",
      "Model:                                 DynamicFactor(factors=1, order=4)   Log Likelihood               -2025.102\n",
      "                                                          + AR(2) errors   AIC                           4096.203\n",
      "Date:                                                   Tue, 02 Feb 2021   BIC                           4189.724\n",
      "Time:                                                           06:56:16   HQIC                          4133.128\n",
      "Sample:                                                       02-01-1979                                         \n",
      "                                                            - 12-01-2014                                         \n",
      "Covariance Type:                                                     opg                                         \n",
      "====================================================================================================\n",
      "                                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "loading.f1.std_indprod              -0.6889      0.036    -19.109      0.000      -0.760      -0.618\n",
      "loading.f1.std_income               -0.2584      0.038     -6.726      0.000      -0.334      -0.183\n",
      "loading.f1.std_sales                -0.4390      0.024    -18.548      0.000      -0.485      -0.393\n",
      "loading.f1.std_emp                  -0.4166      0.039    -10.761      0.000      -0.493      -0.341\n",
      "sigma2.std_indprod                   0.2456      0.046      5.322      0.000       0.155       0.336\n",
      "sigma2.std_income                    0.8736      0.030     29.557      0.000       0.816       0.932\n",
      "sigma2.std_sales                     0.5347      0.034     15.522      0.000       0.467       0.602\n",
      "sigma2.std_emp                       0.2531      0.024     10.488      0.000       0.206       0.300\n",
      "L1.f1.f1                             0.3047      0.059      5.169      0.000       0.189       0.420\n",
      "L2.f1.f1                             0.3768      0.062      6.076      0.000       0.255       0.498\n",
      "L3.f1.f1                                  0   3.44e-10          0      1.000   -6.75e-10    6.75e-10\n",
      "L4.f1.f1                                  0   3.44e-10          0      1.000   -6.75e-10    6.75e-10\n",
      "L1.e(std_indprod).e(std_indprod)    -0.3203      0.113     -2.828      0.005      -0.542      -0.098\n",
      "L2.e(std_indprod).e(std_indprod)    -0.2254      0.090     -2.497      0.013      -0.402      -0.048\n",
      "L1.e(std_income).e(std_income)      -0.1730      0.022     -7.835      0.000      -0.216      -0.130\n",
      "L2.e(std_income).e(std_income)      -0.0936      0.044     -2.120      0.034      -0.180      -0.007\n",
      "L1.e(std_sales).e(std_sales)        -0.4896      0.046    -10.596      0.000      -0.580      -0.399\n",
      "L2.e(std_sales).e(std_sales)        -0.2268      0.050     -4.540      0.000      -0.325      -0.129\n",
      "L1.e(std_emp).e(std_emp)             0.2334      0.042      5.523      0.000       0.151       0.316\n",
      "L2.e(std_emp).e(std_emp)             0.4965      0.051      9.814      0.000       0.397       0.596\n",
      "loading.L1.f1.std_emp               -0.0725      0.038     -1.898      0.058      -0.147       0.002\n",
      "loading.L2.f1.std_emp                0.0005      0.036      0.013      0.990      -0.070       0.071\n",
      "loading.L3.f1.std_emp               -0.1737      0.028     -6.168      0.000      -0.229      -0.119\n",
      "====================================================================================================\n",
      "Ljung-Box (L1) (Q):     0.11, 0.00, 1.04, 3.83   Jarque-Bera (JB):   231.63, 9688.75, 25.36, 3374.73\n",
      "Prob(Q):                0.74, 0.95, 0.31, 0.05   Prob(JB):                    0.00, 0.00, 0.00, 0.00\n",
      "Heteroskedasticity (H): 0.76, 5.03, 0.44, 0.45   Skew:                       0.22, -0.97, 0.24, 0.75\n",
      "Prob(H) (two-sided):    0.11, 0.00, 0.00, 0.00   Kurtosis:                  6.56, 26.15, 4.08, 16.63\n",
      "====================================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
      "[2] Covariance matrix is singular or near-singular, with condition number 1.35e+18. Standard errors may be unstable.\n"
     ]
    }
   ],
   "source": [
    "# Create the model\n",
    "extended_mod = ExtendedDFM(endog)\n",
    "initial_extended_res = extended_mod.fit(maxiter=1000, disp=False)\n",
    "extended_res = extended_mod.fit(initial_extended_res.params, method='nm', maxiter=1000)\n",
    "print(extended_res.summary(separate_params=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although this model increases the likelihood, it is not preferred by the AIC and BIC measures which penalize the additional three parameters.\n",
    "\n",
    "Furthermore, the qualitative results are unchanged, as we can see from the updated $R^2$ chart and the new coincident index, both of which are practically identical to the previous results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:56:16.880707Z",
     "iopub.status.busy": "2021-02-02T06:56:16.875591Z",
     "iopub.status.idle": "2021-02-02T06:56:17.688685Z",
     "shell.execute_reply": "2021-02-02T06:56:17.687334Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x144 with 1 Axes>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "extended_res.plot_coefficients_of_determination(figsize=(8,2));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:56:17.701736Z",
     "iopub.status.busy": "2021-02-02T06:56:17.700917Z",
     "iopub.status.idle": "2021-02-02T06:56:18.813887Z",
     "shell.execute_reply": "2021-02-02T06:56:18.814536Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PolyCollection at 0x7f4e823d3150>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(13,3))\n",
    "\n",
    "# Compute the index\n",
    "extended_coincident_index = compute_coincident_index(extended_mod, extended_res)\n",
    "\n",
    "# Plot the factor\n",
    "dates = endog.index._mpl_repr()\n",
    "ax.plot(dates, coincident_index, '-', linewidth=1, label='Basic model')\n",
    "ax.plot(dates, extended_coincident_index, '--', linewidth=3, label='Extended model')\n",
    "ax.plot(usphci.index._mpl_repr(), usphci, label='USPHCI')\n",
    "ax.legend(loc='lower right')\n",
    "ax.set(title='Coincident indices, comparison')\n",
    "\n",
    "# Retrieve and also plot the NBER recession indicators\n",
    "ylim = ax.get_ylim()\n",
    "ax.fill_between(dates[:-3], ylim[0], ylim[1], rec.values[:-4,0], facecolor='k', alpha=0.1);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
