{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Discrete Choice Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fair's Affair data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A survey of women only was conducted in 1974 by *Redbook* asking about extramarital affairs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:27.891387Z",
     "iopub.status.busy": "2021-02-02T06:51:27.890108Z",
     "iopub.status.idle": "2021-02-02T06:51:28.258743Z",
     "shell.execute_reply": "2021-02-02T06:51:28.259618Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:28.263972Z",
     "iopub.status.busy": "2021-02-02T06:51:28.263283Z",
     "iopub.status.idle": "2021-02-02T06:51:29.400420Z",
     "shell.execute_reply": "2021-02-02T06:51:29.401883Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import logit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.408292Z",
     "iopub.status.busy": "2021-02-02T06:51:29.406409Z",
     "iopub.status.idle": "2021-02-02T06:51:29.417013Z",
     "shell.execute_reply": "2021-02-02T06:51:29.418278Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fair, Ray. 1978. \"A Theory of Extramarital Affairs,\" `Journal of Political\n",
      "Economy`, February, 45-61.\n",
      "\n",
      "The data is available at http://fairmodel.econ.yale.edu/rayfair/pdf/2011b.htm\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(sm.datasets.fair.SOURCE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.425023Z",
     "iopub.status.busy": "2021-02-02T06:51:29.422078Z",
     "iopub.status.idle": "2021-02-02T06:51:29.431350Z",
     "shell.execute_reply": "2021-02-02T06:51:29.432227Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "::\n",
      "\n",
      "    Number of observations: 6366\n",
      "    Number of variables: 9\n",
      "    Variable name definitions:\n",
      "\n",
      "        rate_marriage   : How rate marriage, 1 = very poor, 2 = poor, 3 = fair,\n",
      "                        4 = good, 5 = very good\n",
      "        age             : Age\n",
      "        yrs_married     : No. years married. Interval approximations. See\n",
      "                        original paper for detailed explanation.\n",
      "        children        : No. children\n",
      "        religious       : How relgious, 1 = not, 2 = mildly, 3 = fairly,\n",
      "                        4 = strongly\n",
      "        educ            : Level of education, 9 = grade school, 12 = high\n",
      "                        school, 14 = some college, 16 = college graduate,\n",
      "                        17 = some graduate school, 20 = advanced degree\n",
      "        occupation      : 1 = student, 2 = farming, agriculture; semi-skilled,\n",
      "                        or unskilled worker; 3 = white-colloar; 4 = teacher\n",
      "                        counselor social worker, nurse; artist, writers;\n",
      "                        technician, skilled worker, 5 = managerial,\n",
      "                        administrative, business, 6 = professional with\n",
      "                        advanced degree\n",
      "        occupation_husb : Husband's occupation. Same as occupation.\n",
      "        affairs         : measure of time spent in extramarital affairs\n",
      "\n",
      "    See the original paper for more details.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print( sm.datasets.fair.NOTE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.446055Z",
     "iopub.status.busy": "2021-02-02T06:51:29.444986Z",
     "iopub.status.idle": "2021-02-02T06:51:29.458603Z",
     "shell.execute_reply": "2021-02-02T06:51:29.459832Z"
    }
   },
   "outputs": [],
   "source": [
    "dta = sm.datasets.fair.load_pandas().data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.464897Z",
     "iopub.status.busy": "2021-02-02T06:51:29.463241Z",
     "iopub.status.idle": "2021-02-02T06:51:29.490221Z",
     "shell.execute_reply": "2021-02-02T06:51:29.491415Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   rate_marriage   age  yrs_married  children  religious  educ  occupation  \\\n",
      "0            3.0  32.0          9.0       3.0        3.0  17.0         2.0   \n",
      "1            3.0  27.0         13.0       3.0        1.0  14.0         3.0   \n",
      "2            4.0  22.0          2.5       0.0        1.0  16.0         3.0   \n",
      "3            4.0  37.0         16.5       4.0        3.0  16.0         5.0   \n",
      "4            5.0  27.0          9.0       1.0        1.0  14.0         3.0   \n",
      "5            4.0  27.0          9.0       0.0        2.0  14.0         3.0   \n",
      "6            5.0  37.0         23.0       5.5        2.0  12.0         5.0   \n",
      "7            5.0  37.0         23.0       5.5        2.0  12.0         2.0   \n",
      "8            3.0  22.0          2.5       0.0        2.0  12.0         3.0   \n",
      "9            3.0  27.0          6.0       0.0        1.0  16.0         3.0   \n",
      "\n",
      "   occupation_husb   affairs  affair  \n",
      "0              5.0  0.111111     1.0  \n",
      "1              4.0  3.230769     1.0  \n",
      "2              5.0  1.400000     1.0  \n",
      "3              5.0  0.727273     1.0  \n",
      "4              4.0  4.666666     1.0  \n",
      "5              4.0  4.666666     1.0  \n",
      "6              4.0  0.852174     1.0  \n",
      "7              3.0  1.826086     1.0  \n",
      "8              3.0  4.799999     1.0  \n",
      "9              5.0  1.333333     1.0  \n"
     ]
    }
   ],
   "source": [
    "dta['affair'] = (dta['affairs'] > 0).astype(float)\n",
    "print(dta.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.496645Z",
     "iopub.status.busy": "2021-02-02T06:51:29.494997Z",
     "iopub.status.idle": "2021-02-02T06:51:29.552342Z",
     "shell.execute_reply": "2021-02-02T06:51:29.553514Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       rate_marriage          age  yrs_married     children    religious  \\\n",
      "count    6366.000000  6366.000000  6366.000000  6366.000000  6366.000000   \n",
      "mean        4.109645    29.082862     9.009425     1.396874     2.426170   \n",
      "std         0.961430     6.847882     7.280120     1.433471     0.878369   \n",
      "min         1.000000    17.500000     0.500000     0.000000     1.000000   \n",
      "25%         4.000000    22.000000     2.500000     0.000000     2.000000   \n",
      "50%         4.000000    27.000000     6.000000     1.000000     2.000000   \n",
      "75%         5.000000    32.000000    16.500000     2.000000     3.000000   \n",
      "max         5.000000    42.000000    23.000000     5.500000     4.000000   \n",
      "\n",
      "              educ   occupation  occupation_husb      affairs       affair  \n",
      "count  6366.000000  6366.000000      6366.000000  6366.000000  6366.000000  \n",
      "mean     14.209865     3.424128         3.850141     0.705374     0.322495  \n",
      "std       2.178003     0.942399         1.346435     2.203374     0.467468  \n",
      "min       9.000000     1.000000         1.000000     0.000000     0.000000  \n",
      "25%      12.000000     3.000000         3.000000     0.000000     0.000000  \n",
      "50%      14.000000     3.000000         4.000000     0.000000     0.000000  \n",
      "75%      16.000000     4.000000         5.000000     0.484848     1.000000  \n",
      "max      20.000000     6.000000         6.000000    57.599991     1.000000  \n"
     ]
    }
   ],
   "source": [
    "print(dta.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.558717Z",
     "iopub.status.busy": "2021-02-02T06:51:29.557090Z",
     "iopub.status.idle": "2021-02-02T06:51:29.604372Z",
     "shell.execute_reply": "2021-02-02T06:51:29.604954Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.545314\n",
      "         Iterations 6\n"
     ]
    }
   ],
   "source": [
    "affair_mod = logit(\"affair ~ occupation + educ + occupation_husb\"\n",
    "                   \"+ rate_marriage + age + yrs_married + children\"\n",
    "                   \" + religious\", dta).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.608952Z",
     "iopub.status.busy": "2021-02-02T06:51:29.608120Z",
     "iopub.status.idle": "2021-02-02T06:51:29.631788Z",
     "shell.execute_reply": "2021-02-02T06:51:29.632129Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                 affair   No. Observations:                 6366\n",
      "Model:                          Logit   Df Residuals:                     6357\n",
      "Method:                           MLE   Df Model:                            8\n",
      "Date:                Tue, 02 Feb 2021   Pseudo R-squ.:                  0.1327\n",
      "Time:                        06:51:29   Log-Likelihood:                -3471.5\n",
      "converged:                       True   LL-Null:                       -4002.5\n",
      "Covariance Type:            nonrobust   LLR p-value:                5.807e-224\n",
      "===================================================================================\n",
      "                      coef    std err          z      P>|z|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "Intercept           3.7257      0.299     12.470      0.000       3.140       4.311\n",
      "occupation          0.1602      0.034      4.717      0.000       0.094       0.227\n",
      "educ               -0.0392      0.015     -2.533      0.011      -0.070      -0.009\n",
      "occupation_husb     0.0124      0.023      0.541      0.589      -0.033       0.057\n",
      "rate_marriage      -0.7161      0.031    -22.784      0.000      -0.778      -0.655\n",
      "age                -0.0605      0.010     -5.885      0.000      -0.081      -0.040\n",
      "yrs_married         0.1100      0.011     10.054      0.000       0.089       0.131\n",
      "children           -0.0042      0.032     -0.134      0.893      -0.066       0.058\n",
      "religious          -0.3752      0.035    -10.792      0.000      -0.443      -0.307\n",
      "===================================================================================\n"
     ]
    }
   ],
   "source": [
    "print(affair_mod.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How well are we predicting?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.637877Z",
     "iopub.status.busy": "2021-02-02T06:51:29.635050Z",
     "iopub.status.idle": "2021-02-02T06:51:29.641779Z",
     "shell.execute_reply": "2021-02-02T06:51:29.642107Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3882.,  431.],\n",
       "       [1326.,  727.]])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "affair_mod.pred_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The coefficients of the discrete choice model do not tell us much. What we're after is marginal effects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.645351Z",
     "iopub.status.busy": "2021-02-02T06:51:29.644938Z",
     "iopub.status.idle": "2021-02-02T06:51:29.667491Z",
     "shell.execute_reply": "2021-02-02T06:51:29.667120Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:                 affair\n",
      "Method:                          dydx\n",
      "At:                           overall\n",
      "===================================================================================\n",
      "                     dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "occupation          0.0293      0.006      4.744      0.000       0.017       0.041\n",
      "educ               -0.0072      0.003     -2.538      0.011      -0.013      -0.002\n",
      "occupation_husb     0.0023      0.004      0.541      0.589      -0.006       0.010\n",
      "rate_marriage      -0.1308      0.005    -26.891      0.000      -0.140      -0.121\n",
      "age                -0.0110      0.002     -5.937      0.000      -0.015      -0.007\n",
      "yrs_married         0.0201      0.002     10.327      0.000       0.016       0.024\n",
      "children           -0.0008      0.006     -0.134      0.893      -0.012       0.011\n",
      "religious          -0.0685      0.006    -11.119      0.000      -0.081      -0.056\n",
      "===================================================================================\n"
     ]
    }
   ],
   "source": [
    "mfx = affair_mod.get_margeff()\n",
    "print(mfx.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.671858Z",
     "iopub.status.busy": "2021-02-02T06:51:29.670845Z",
     "iopub.status.idle": "2021-02-02T06:51:29.674097Z",
     "shell.execute_reply": "2021-02-02T06:51:29.674412Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rate_marriage       4.000000\n",
      "age                37.000000\n",
      "yrs_married        23.000000\n",
      "children            3.000000\n",
      "religious           3.000000\n",
      "educ               12.000000\n",
      "occupation          3.000000\n",
      "occupation_husb     4.000000\n",
      "affairs             0.521739\n",
      "affair              1.000000\n",
      "Name: 1000, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "respondent1000 = dta.iloc[1000]\n",
    "print(respondent1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.678953Z",
     "iopub.status.busy": "2021-02-02T06:51:29.678527Z",
     "iopub.status.idle": "2021-02-02T06:51:29.681703Z",
     "shell.execute_reply": "2021-02-02T06:51:29.682050Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: 3.0, 2: 12.0, 3: 4.0, 4: 4.0, 5: 37.0, 6: 23.0, 7: 3.0, 8: 3.0, 0: 1}\n"
     ]
    }
   ],
   "source": [
    "resp = dict(zip(range(1,9), respondent1000[[\"occupation\", \"educ\",\n",
    "                                            \"occupation_husb\", \"rate_marriage\",\n",
    "                                            \"age\", \"yrs_married\", \"children\",\n",
    "                                            \"religious\"]].tolist()))\n",
    "resp.update({0 : 1})\n",
    "print(resp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.685772Z",
     "iopub.status.busy": "2021-02-02T06:51:29.684897Z",
     "iopub.status.idle": "2021-02-02T06:51:29.710194Z",
     "shell.execute_reply": "2021-02-02T06:51:29.710995Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:                 affair\n",
      "Method:                          dydx\n",
      "At:                           overall\n",
      "===================================================================================\n",
      "                     dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "occupation          0.0400      0.008      4.711      0.000       0.023       0.057\n",
      "educ               -0.0098      0.004     -2.537      0.011      -0.017      -0.002\n",
      "occupation_husb     0.0031      0.006      0.541      0.589      -0.008       0.014\n",
      "rate_marriage      -0.1788      0.008    -22.743      0.000      -0.194      -0.163\n",
      "age                -0.0151      0.003     -5.928      0.000      -0.020      -0.010\n",
      "yrs_married         0.0275      0.003     10.256      0.000       0.022       0.033\n",
      "children           -0.0011      0.008     -0.134      0.893      -0.017       0.014\n",
      "religious          -0.0937      0.009    -10.722      0.000      -0.111      -0.077\n",
      "===================================================================================\n"
     ]
    }
   ],
   "source": [
    "mfx = affair_mod.get_margeff(atexog=resp)\n",
    "print(mfx.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`predict` expects a `DataFrame` since `patsy` is used to select columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.714574Z",
     "iopub.status.busy": "2021-02-02T06:51:29.713467Z",
     "iopub.status.idle": "2021-02-02T06:51:29.732493Z",
     "shell.execute_reply": "2021-02-02T06:51:29.733321Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000    0.518782\n",
       "dtype: float64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "respondent1000 = dta.iloc[[1000]]\n",
    "affair_mod.predict(respondent1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.737189Z",
     "iopub.status.busy": "2021-02-02T06:51:29.735967Z",
     "iopub.status.idle": "2021-02-02T06:51:29.744274Z",
     "shell.execute_reply": "2021-02-02T06:51:29.745049Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.07516159285058333"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "affair_mod.fittedvalues[1000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.748640Z",
     "iopub.status.busy": "2021-02-02T06:51:29.747513Z",
     "iopub.status.idle": "2021-02-02T06:51:29.754751Z",
     "shell.execute_reply": "2021-02-02T06:51:29.755588Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5187815572121521"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "affair_mod.model.cdf(affair_mod.fittedvalues[1000])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The \"correct\" model here is likely the Tobit model. We have an work in progress branch \"tobit-model\" on github, if anyone is interested in censored regression models."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise: Logit vs Probit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:29.759282Z",
     "iopub.status.busy": "2021-02-02T06:51:29.758153Z",
     "iopub.status.idle": "2021-02-02T06:51:30.008438Z",
     "shell.execute_reply": "2021-02-02T06:51:30.009028Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f6f574cf590>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111)\n",
    "support = np.linspace(-6, 6, 1000)\n",
    "ax.plot(support, stats.logistic.cdf(support), 'r-', label='Logistic')\n",
    "ax.plot(support, stats.norm.cdf(support), label='Probit')\n",
    "ax.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.025007Z",
     "iopub.status.busy": "2021-02-02T06:51:30.023696Z",
     "iopub.status.idle": "2021-02-02T06:51:30.171498Z",
     "shell.execute_reply": "2021-02-02T06:51:30.171906Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f6f573d4310>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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/e9cdtllrT7WtHz12rVree655/xSq68UkkVEQtiXK7fx6KcrOSMnk0sOH9zm/SMjDA+emc2QHt259Lm5bC6tCkCVItLVxcfHk5uby6JFi4iJieGxx3ZvOKivr2/Xcb/66itAIVlERJrZXl7Nb17MZUiPBG496UBaTLHps8S4aB47ZyJVtfVMf3WB5lMWkYA67LDDWLlyJZ9++ilHHnkkZ599NmPGjKGqqooLLriAMWPGMH78+N1WxcvPz+e4445j+PDh3HbbbTvvb1p0ZPr06cyYMYPs7Ow9VtsLFJ96kkVEJPjueGsJxRW1/P2CScTHRHboWIN7JHD9cSO47c0lvDgrnzMnaT56kc7otjcXs2RDqV+POapvEr//4YE+bVtXV8e7777LcccdB8DMmTNZtGgRgwYN4r777gNg4cKFLFu2jGOPPZYVK1bstl23bt046KCDOOGEE8jJ2bUQ3j333MO9997LW2+95dffbV80kiwiEoK+XrWd13M3cMnhgxnVN2n/O/jg/KkDmTI4jbveWUrhjhq/HFNEBKCyspLs7GxycnLIysriwgsvBGDSpEkMGuSmofziiy8499xzARgxYgQDBgzYGZKPOeYY0tPTiY+P50c/+hFffPGFN79IMxpJFhEJMTV1Ddz830VkpsXz6yMP8NtxIyIMt588muMfmsH9Hy7nD6eM8duxRSQ0+Dri629NPcktde/efefP+2r1atlO1t72Mn/SSLKISIh5fmYeK7eUc+sPDyQuumNtFi0N65XIuVMG8Ny3eSzd6N+PZEVE9mXatGk8++yzAKxYsYK8vDyGDx8OwIcffkhhYSGVlZW8/vrrHHLIIbvtm5iYSFlZWVDrVUgWEQkhFTV1PPLxSqYMTuOoET0Dco6rvjeUpPho7nl3WUCOLyLSml//+tfU19czZswYzjjjDP7+978TGxsLwKGHHsq5555LdnY2p5122m79yABjx44lKiqKcePGBe3CPROKVznn5OTY2bNne12GiEjQPfrJSv78/nJe/dVUJg5IC9h5/u/TVfzxvWX859cHMyErNWDnEZHAW7p0KSNHjvS6jJDX2n8nY8wca21Oa9trJFlEJESUVtXy+GerOHpEz4AGZIDzpg4grXsMD370XUDPIyISrhSSRURCxHPf5lFaVcdvjhkW8HN1j43i4mmD+XzFVuasKwr4+UREwo1C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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111)\n",
    "support = np.linspace(-6, 6, 1000)\n",
    "ax.plot(support, stats.logistic.pdf(support), 'r-', label='Logistic')\n",
    "ax.plot(support, stats.norm.pdf(support), label='Probit')\n",
    "ax.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare the estimates of the Logit Fair model above to a Probit model. Does the prediction table look better? Much difference in marginal effects?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generalized Linear Model Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.175228Z",
     "iopub.status.busy": "2021-02-02T06:51:30.174802Z",
     "iopub.status.idle": "2021-02-02T06:51:30.179042Z",
     "shell.execute_reply": "2021-02-02T06:51:30.179397Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Jeff Gill's `Generalized Linear Models: A Unified Approach`\n",
      "\n",
      "http://jgill.wustl.edu/research/books.html\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(sm.datasets.star98.SOURCE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.182664Z",
     "iopub.status.busy": "2021-02-02T06:51:30.182261Z",
     "iopub.status.idle": "2021-02-02T06:51:30.185428Z",
     "shell.execute_reply": "2021-02-02T06:51:30.185772Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "This data is on the California education policy and outcomes (STAR program\n",
      "results for 1998.  The data measured standardized testing by the California\n",
      "Department of Education that required evaluation of 2nd - 11th grade students\n",
      "by the the Stanford 9 test on a variety of subjects.  This dataset is at\n",
      "the level of the unified school district and consists of 303 cases.  The\n",
      "binary response variable represents the number of 9th graders scoring\n",
      "over the national median value on the mathematics exam.\n",
      "\n",
      "The data used in this example is only a subset of the original source.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(sm.datasets.star98.DESCRLONG)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.189030Z",
     "iopub.status.busy": "2021-02-02T06:51:30.188612Z",
     "iopub.status.idle": "2021-02-02T06:51:30.192567Z",
     "shell.execute_reply": "2021-02-02T06:51:30.192203Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "::\n",
      "\n",
      "    Number of Observations - 303 (counties in California).\n",
      "\n",
      "    Number of Variables - 13 and 8 interaction terms.\n",
      "\n",
      "    Definition of variables names::\n",
      "\n",
      "        NABOVE   - Total number of students above the national median for the\n",
      "                   math section.\n",
      "        NBELOW   - Total number of students below the national median for the\n",
      "                   math section.\n",
      "        LOWINC   - Percentage of low income students\n",
      "        PERASIAN - Percentage of Asian student\n",
      "        PERBLACK - Percentage of black students\n",
      "        PERHISP  - Percentage of Hispanic students\n",
      "        PERMINTE - Percentage of minority teachers\n",
      "        AVYRSEXP - Sum of teachers' years in educational service divided by the\n",
      "                number of teachers.\n",
      "        AVSALK   - Total salary budget including benefits divided by the number\n",
      "                   of full-time teachers (in thousands)\n",
      "        PERSPENK - Per-pupil spending (in thousands)\n",
      "        PTRATIO  - Pupil-teacher ratio.\n",
      "        PCTAF    - Percentage of students taking UC/CSU prep courses\n",
      "        PCTCHRT  - Percentage of charter schools\n",
      "        PCTYRRND - Percentage of year-round schools\n",
      "\n",
      "        The below variables are interaction terms of the variables defined\n",
      "        above.\n",
      "\n",
      "        PERMINTE_AVYRSEXP\n",
      "        PEMINTE_AVSAL\n",
      "        AVYRSEXP_AVSAL\n",
      "        PERSPEN_PTRATIO\n",
      "        PERSPEN_PCTAF\n",
      "        PTRATIO_PCTAF\n",
      "        PERMINTE_AVTRSEXP_AVSAL\n",
      "        PERSPEN_PTRATIO_PCTAF\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(sm.datasets.star98.NOTE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.196244Z",
     "iopub.status.busy": "2021-02-02T06:51:30.195537Z",
     "iopub.status.idle": "2021-02-02T06:51:30.203379Z",
     "shell.execute_reply": "2021-02-02T06:51:30.203693Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['NABOVE', 'NBELOW', 'LOWINC', 'PERASIAN', 'PERBLACK', 'PERHISP',\n",
      "       'PERMINTE', 'AVYRSEXP', 'AVSALK', 'PERSPENK', 'PTRATIO', 'PCTAF',\n",
      "       'PCTCHRT', 'PCTYRRND', 'PERMINTE_AVYRSEXP', 'PERMINTE_AVSAL',\n",
      "       'AVYRSEXP_AVSAL', 'PERSPEN_PTRATIO', 'PERSPEN_PCTAF', 'PTRATIO_PCTAF',\n",
      "       'PERMINTE_AVYRSEXP_AVSAL', 'PERSPEN_PTRATIO_PCTAF'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "dta = sm.datasets.star98.load_pandas().data\n",
    "print(dta.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.212678Z",
     "iopub.status.busy": "2021-02-02T06:51:30.211635Z",
     "iopub.status.idle": "2021-02-02T06:51:30.214682Z",
     "shell.execute_reply": "2021-02-02T06:51:30.214117Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   NABOVE  NBELOW    LOWINC   PERASIAN   PERBLACK    PERHISP   PERMINTE\n",
      "0   452.0   355.0  34.39730  23.299300  14.235280  11.411120  15.918370\n",
      "1   144.0    40.0  17.36507  29.328380   8.234897   9.314884  13.636360\n",
      "2   337.0   234.0  32.64324   9.226386  42.406310  13.543720  28.834360\n",
      "3   395.0   178.0  11.90953  13.883090   3.796973  11.443110  11.111110\n",
      "4     8.0    57.0  36.88889  12.187500  76.875000   7.604167  43.589740\n",
      "5  1348.0   899.0  20.93149  28.023510   4.643221  13.808160  15.378490\n",
      "6   477.0   887.0  53.26898   8.447858  19.374830  37.905330  25.525530\n",
      "7   565.0   347.0  15.19009   3.665781   2.649680  13.092070   6.203008\n",
      "8   205.0   320.0  28.21582  10.430420   6.786374  32.334300  13.461540\n",
      "9   469.0   598.0  32.77897  17.178310  12.484930  28.323290  27.259890\n"
     ]
    }
   ],
   "source": [
    "print(dta[['NABOVE', 'NBELOW', 'LOWINC', 'PERASIAN', 'PERBLACK', 'PERHISP', 'PERMINTE']].head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.223864Z",
     "iopub.status.busy": "2021-02-02T06:51:30.222570Z",
     "iopub.status.idle": "2021-02-02T06:51:30.225471Z",
     "shell.execute_reply": "2021-02-02T06:51:30.225096Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   AVYRSEXP    AVSALK  PERSPENK   PTRATIO     PCTAF  PCTCHRT   PCTYRRND\n",
      "0  14.70646  59.15732  4.445207  21.71025  57.03276      0.0  22.222220\n",
      "1  16.08324  59.50397  5.267598  20.44278  64.62264      0.0   0.000000\n",
      "2  14.59559  60.56992  5.482922  18.95419  53.94191      0.0   0.000000\n",
      "3  14.38939  58.33411  4.165093  21.63539  49.06103      0.0   7.142857\n",
      "4  13.90568  63.15364  4.324902  18.77984  52.38095      0.0   0.000000\n",
      "5  14.97755  66.97055  3.916104  24.51914  44.91578      0.0   2.380952\n",
      "6  14.67829  57.62195  4.270903  22.21278  32.28916      0.0  12.121210\n",
      "7  13.66197  63.44740  4.309734  24.59026  30.45267      0.0   0.000000\n",
      "8  16.41760  57.84564  4.527603  21.74138  22.64574      0.0   0.000000\n",
      "9  12.51864  57.80141  4.648917  20.26010  26.07099      0.0   0.000000\n"
     ]
    }
   ],
   "source": [
    "print(dta[['AVYRSEXP', 'AVSALK', 'PERSPENK', 'PTRATIO', 'PCTAF', 'PCTCHRT', 'PCTYRRND']].head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.229135Z",
     "iopub.status.busy": "2021-02-02T06:51:30.228153Z",
     "iopub.status.idle": "2021-02-02T06:51:30.230105Z",
     "shell.execute_reply": "2021-02-02T06:51:30.230463Z"
    }
   },
   "outputs": [],
   "source": [
    "formula = 'NABOVE + NBELOW ~ LOWINC + PERASIAN + PERBLACK + PERHISP + PCTCHRT '\n",
    "formula += '+ PCTYRRND + PERMINTE*AVYRSEXP*AVSALK + PERSPENK*PTRATIO*PCTAF'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Aside: Binomial distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Toss a six-sided die 5 times, what's the probability of exactly 2 fours?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.236379Z",
     "iopub.status.busy": "2021-02-02T06:51:30.235881Z",
     "iopub.status.idle": "2021-02-02T06:51:30.238353Z",
     "shell.execute_reply": "2021-02-02T06:51:30.238706Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16075102880658435"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.binom(5, 1./6).pmf(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.242960Z",
     "iopub.status.busy": "2021-02-02T06:51:30.242478Z",
     "iopub.status.idle": "2021-02-02T06:51:30.244964Z",
     "shell.execute_reply": "2021-02-02T06:51:30.245291Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1607510288065844"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.special import comb\n",
    "comb(5,2) * (1/6.)**2 * (5/6.)**3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.267368Z",
     "iopub.status.busy": "2021-02-02T06:51:30.266547Z",
     "iopub.status.idle": "2021-02-02T06:51:30.274473Z",
     "shell.execute_reply": "2021-02-02T06:51:30.274828Z"
    }
   },
   "outputs": [],
   "source": [
    "from statsmodels.formula.api import glm\n",
    "glm_mod = glm(formula, dta, family=sm.families.Binomial()).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.286366Z",
     "iopub.status.busy": "2021-02-02T06:51:30.283991Z",
     "iopub.status.idle": "2021-02-02T06:51:30.288384Z",
     "shell.execute_reply": "2021-02-02T06:51:30.288747Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  Generalized Linear Model Regression Results                   \n",
      "================================================================================\n",
      "Dep. Variable:     ['NABOVE', 'NBELOW']   No. Observations:                  303\n",
      "Model:                              GLM   Df Residuals:                      282\n",
      "Model Family:                  Binomial   Df Model:                           20\n",
      "Link Function:                    logit   Scale:                          1.0000\n",
      "Method:                            IRLS   Log-Likelihood:                -2998.6\n",
      "Date:                  Tue, 02 Feb 2021   Deviance:                       4078.8\n",
      "Time:                          06:51:30   Pearson chi2:                 4.05e+03\n",
      "No. Iterations:                       5                                         \n",
      "Covariance Type:              nonrobust                                         \n",
      "============================================================================================\n",
      "                               coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "Intercept                    2.9589      1.547      1.913      0.056      -0.073       5.990\n",
      "LOWINC                      -0.0168      0.000    -38.749      0.000      -0.018      -0.016\n",
      "PERASIAN                     0.0099      0.001     16.505      0.000       0.009       0.011\n",
      "PERBLACK                    -0.0187      0.001    -25.182      0.000      -0.020      -0.017\n",
      "PERHISP                     -0.0142      0.000    -32.818      0.000      -0.015      -0.013\n",
      "PCTCHRT                      0.0049      0.001      3.921      0.000       0.002       0.007\n",
      "PCTYRRND                    -0.0036      0.000    -15.878      0.000      -0.004      -0.003\n",
      "PERMINTE                     0.2545      0.030      8.498      0.000       0.196       0.313\n",
      "AVYRSEXP                     0.2407      0.057      4.212      0.000       0.129       0.353\n",
      "PERMINTE:AVYRSEXP           -0.0141      0.002     -7.391      0.000      -0.018      -0.010\n",
      "AVSALK                       0.0804      0.014      5.775      0.000       0.053       0.108\n",
      "PERMINTE:AVSALK             -0.0040      0.000     -8.450      0.000      -0.005      -0.003\n",
      "AVYRSEXP:AVSALK             -0.0039      0.001     -4.059      0.000      -0.006      -0.002\n",
      "PERMINTE:AVYRSEXP:AVSALK     0.0002   2.99e-05      7.428      0.000       0.000       0.000\n",
      "PERSPENK                    -1.9522      0.317     -6.162      0.000      -2.573      -1.331\n",
      "PTRATIO                     -0.3341      0.061     -5.453      0.000      -0.454      -0.214\n",
      "PERSPENK:PTRATIO             0.0917      0.015      6.321      0.000       0.063       0.120\n",
      "PCTAF                       -0.1690      0.033     -5.169      0.000      -0.233      -0.105\n",
      "PERSPENK:PCTAF               0.0490      0.007      6.574      0.000       0.034       0.064\n",
      "PTRATIO:PCTAF                0.0080      0.001      5.362      0.000       0.005       0.011\n",
      "PERSPENK:PTRATIO:PCTAF      -0.0022      0.000     -6.445      0.000      -0.003      -0.002\n",
      "============================================================================================\n"
     ]
    }
   ],
   "source": [
    "print(glm_mod.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The number of trials "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.295160Z",
     "iopub.status.busy": "2021-02-02T06:51:30.294191Z",
     "iopub.status.idle": "2021-02-02T06:51:30.297186Z",
     "shell.execute_reply": "2021-02-02T06:51:30.297526Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      807.0\n",
       "1      184.0\n",
       "2      571.0\n",
       "3      573.0\n",
       "4       65.0\n",
       "       ...  \n",
       "298    342.0\n",
       "299    154.0\n",
       "300    595.0\n",
       "301    709.0\n",
       "302    156.0\n",
       "Length: 303, dtype: float64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "glm_mod.model.data.orig_endog.sum(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.303341Z",
     "iopub.status.busy": "2021-02-02T06:51:30.300292Z",
     "iopub.status.idle": "2021-02-02T06:51:30.305819Z",
     "shell.execute_reply": "2021-02-02T06:51:30.305478Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      470.732584\n",
       "1      138.266178\n",
       "2      285.832629\n",
       "3      392.702917\n",
       "4       20.963146\n",
       "          ...    \n",
       "298    111.464708\n",
       "299     61.037884\n",
       "300    235.517446\n",
       "301    290.952508\n",
       "302     53.312851\n",
       "Length: 303, dtype: float64"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "glm_mod.fittedvalues * glm_mod.model.data.orig_endog.sum(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First differences: We hold all explanatory variables constant at their means and manipulate the percentage of low income households to assess its impact\n",
    "on the response variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.309542Z",
     "iopub.status.busy": "2021-02-02T06:51:30.308559Z",
     "iopub.status.idle": "2021-02-02T06:51:30.310926Z",
     "shell.execute_reply": "2021-02-02T06:51:30.310499Z"
    }
   },
   "outputs": [],
   "source": [
    "exog = glm_mod.model.data.orig_exog # get the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.316093Z",
     "iopub.status.busy": "2021-02-02T06:51:30.313667Z",
     "iopub.status.idle": "2021-02-02T06:51:30.318080Z",
     "shell.execute_reply": "2021-02-02T06:51:30.318409Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept                       1.000000\n",
      "LOWINC                         41.409877\n",
      "PERASIAN                        5.896335\n",
      "PERBLACK                        5.636808\n",
      "PERHISP                        34.398080\n",
      "PCTCHRT                         1.175909\n",
      "PCTYRRND                       11.611905\n",
      "PERMINTE                       14.694747\n",
      "AVYRSEXP                       14.253875\n",
      "PERMINTE:AVYRSEXP             209.018700\n",
      "AVSALK                         58.640258\n",
      "PERMINTE:AVSALK               879.979883\n",
      "AVYRSEXP:AVSALK               839.718173\n",
      "PERMINTE:AVYRSEXP:AVSALK    12585.266464\n",
      "PERSPENK                        4.320310\n",
      "PTRATIO                        22.464250\n",
      "PERSPENK:PTRATIO               96.295756\n",
      "PCTAF                          33.630593\n",
      "PERSPENK:PCTAF                147.235740\n",
      "PTRATIO:PCTAF                 747.445536\n",
      "PERSPENK:PTRATIO:PCTAF       3243.607568\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "means25 = exog.mean()\n",
    "print(means25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.324440Z",
     "iopub.status.busy": "2021-02-02T06:51:30.323451Z",
     "iopub.status.idle": "2021-02-02T06:51:30.325874Z",
     "shell.execute_reply": "2021-02-02T06:51:30.326222Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept                       1.000000\n",
      "LOWINC                         26.683040\n",
      "PERASIAN                        5.896335\n",
      "PERBLACK                        5.636808\n",
      "PERHISP                        34.398080\n",
      "PCTCHRT                         1.175909\n",
      "PCTYRRND                       11.611905\n",
      "PERMINTE                       14.694747\n",
      "AVYRSEXP                       14.253875\n",
      "PERMINTE:AVYRSEXP             209.018700\n",
      "AVSALK                         58.640258\n",
      "PERMINTE:AVSALK               879.979883\n",
      "AVYRSEXP:AVSALK               839.718173\n",
      "PERMINTE:AVYRSEXP:AVSALK    12585.266464\n",
      "PERSPENK                        4.320310\n",
      "PTRATIO                        22.464250\n",
      "PERSPENK:PTRATIO               96.295756\n",
      "PCTAF                          33.630593\n",
      "PERSPENK:PCTAF                147.235740\n",
      "PTRATIO:PCTAF                 747.445536\n",
      "PERSPENK:PTRATIO:PCTAF       3243.607568\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "means25['LOWINC'] = exog['LOWINC'].quantile(.25)\n",
    "print(means25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.332073Z",
     "iopub.status.busy": "2021-02-02T06:51:30.329917Z",
     "iopub.status.idle": "2021-02-02T06:51:30.334022Z",
     "shell.execute_reply": "2021-02-02T06:51:30.334354Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept                       1.000000\n",
      "LOWINC                         55.460075\n",
      "PERASIAN                        5.896335\n",
      "PERBLACK                        5.636808\n",
      "PERHISP                        34.398080\n",
      "PCTCHRT                         1.175909\n",
      "PCTYRRND                       11.611905\n",
      "PERMINTE                       14.694747\n",
      "AVYRSEXP                       14.253875\n",
      "PERMINTE:AVYRSEXP             209.018700\n",
      "AVSALK                         58.640258\n",
      "PERMINTE:AVSALK               879.979883\n",
      "AVYRSEXP:AVSALK               839.718173\n",
      "PERMINTE:AVYRSEXP:AVSALK    12585.266464\n",
      "PERSPENK                        4.320310\n",
      "PTRATIO                        22.464250\n",
      "PERSPENK:PTRATIO               96.295756\n",
      "PCTAF                          33.630593\n",
      "PERSPENK:PCTAF                147.235740\n",
      "PTRATIO:PCTAF                 747.445536\n",
      "PERSPENK:PTRATIO:PCTAF       3243.607568\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "means75 = exog.mean()\n",
    "means75['LOWINC'] = exog['LOWINC'].quantile(.75)\n",
    "print(means75)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, `predict` expects a `DataFrame` since `patsy` is used to select columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.365806Z",
     "iopub.status.busy": "2021-02-02T06:51:30.364822Z",
     "iopub.status.idle": "2021-02-02T06:51:30.366824Z",
     "shell.execute_reply": "2021-02-02T06:51:30.367251Z"
    }
   },
   "outputs": [],
   "source": [
    "resp25 = glm_mod.predict(pd.DataFrame(means25).T)\n",
    "resp75 = glm_mod.predict(pd.DataFrame(means75).T)\n",
    "diff = resp75 - resp25"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The interquartile first difference for the percentage of low income households in a school district is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.371881Z",
     "iopub.status.busy": "2021-02-02T06:51:30.370756Z",
     "iopub.status.idle": "2021-02-02T06:51:30.373351Z",
     "shell.execute_reply": "2021-02-02T06:51:30.373696Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-11.8863%\n"
     ]
    }
   ],
   "source": [
    "print(\"%2.4f%%\" % (diff[0]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.377500Z",
     "iopub.status.busy": "2021-02-02T06:51:30.376531Z",
     "iopub.status.idle": "2021-02-02T06:51:30.378889Z",
     "shell.execute_reply": "2021-02-02T06:51:30.378468Z"
    }
   },
   "outputs": [],
   "source": [
    "nobs = glm_mod.nobs\n",
    "y = glm_mod.model.endog\n",
    "yhat = glm_mod.mu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.395201Z",
     "iopub.status.busy": "2021-02-02T06:51:30.394375Z",
     "iopub.status.idle": "2021-02-02T06:51:30.521414Z",
     "shell.execute_reply": "2021-02-02T06:51:30.521767Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from statsmodels.graphics.api import abline_plot\n",
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111, ylabel='Observed Values', xlabel='Fitted Values')\n",
    "ax.scatter(yhat, y)\n",
    "y_vs_yhat = sm.OLS(y, sm.add_constant(yhat, prepend=True)).fit()\n",
    "fig = abline_plot(model_results=y_vs_yhat, ax=ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot fitted values vs Pearson residuals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pearson residuals are defined to be\n",
    "\n",
    "$$\\frac{(y - \\mu)}{\\sqrt{(var(\\mu))}}$$\n",
    "\n",
    "where var is typically determined by the family. E.g., binomial variance is $np(1 - p)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.537902Z",
     "iopub.status.busy": "2021-02-02T06:51:30.537092Z",
     "iopub.status.idle": "2021-02-02T06:51:30.678671Z",
     "shell.execute_reply": "2021-02-02T06:51:30.679029Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f6f578b97d0>]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111, title='Residual Dependence Plot', xlabel='Fitted Values',\n",
    "                          ylabel='Pearson Residuals')\n",
    "ax.scatter(yhat, stats.zscore(glm_mod.resid_pearson))\n",
    "ax.axis('tight')\n",
    "ax.plot([0.0, 1.0],[0.0, 0.0], 'k-');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Histogram of standardized deviance residuals with Kernel Density Estimate overlaid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The definition of the deviance residuals depends on the family. For the Binomial distribution this is\n",
    "\n",
    "$$r_{dev} = sign\\left(Y-\\mu\\right)*\\sqrt{2n(Y\\log\\frac{Y}{\\mu}+(1-Y)\\log\\frac{(1-Y)}{(1-\\mu)}}$$\n",
    "\n",
    "They can be used to detect ill-fitting covariates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.685326Z",
     "iopub.status.busy": "2021-02-02T06:51:30.684314Z",
     "iopub.status.idle": "2021-02-02T06:51:30.687412Z",
     "shell.execute_reply": "2021-02-02T06:51:30.687778Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.nonparametric.kde.KDEUnivariate at 0x7f6f578783d0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "resid = glm_mod.resid_deviance\n",
    "resid_std = stats.zscore(resid)\n",
    "kde_resid = sm.nonparametric.KDEUnivariate(resid_std)\n",
    "kde_resid.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.701875Z",
     "iopub.status.busy": "2021-02-02T06:51:30.696169Z",
     "iopub.status.idle": "2021-02-02T06:51:30.882635Z",
     "shell.execute_reply": "2021-02-02T06:51:30.883038Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f6f57865350>]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsIAAAHiCAYAAADiVqpyAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAABJKUlEQVR4nO3dd3xUVf7/8fcnjd6UgEjvHaUqAjZUQFCwIPauq66rW13d/a67/tRdy9rW3gsqgqgIIoIVUSwgKC0B6VUINXRSzu+PO0iMAQaY5MzMfT0fj3lkMnNz551ifHNy7jnmnBMAAAAQNim+AwAAAAA+UIQBAAAQShRhAAAAhBJFGAAAAKFEEQYAAEAoUYQBAAAQShRhAHHNzE40s+UxPN/lZvZFkfe3mFmTWJ0/cs7PzOzqWJ7zAF57nJld5uO1y9K+vm/Fv8eH+DqLzeyUWJwLQPyhCAPYLzPraWaTzWyTma03sy/NrGvkuZiVDh+cc5WdcwvL6vXM7F9mlmdmmyO3eWb2mJnVicX5nXP9nHMvx+JcsVDk891iZhsjP0fdD/W8Zf19A5CcKMIA9snMqkp6T9Kjkg6TVFfSHZJ2+swVDTNL851hL4Y756oo+HqeJekISd/FqgzHoeHOucqSakr6VNKbnvMAgCSKMID9ayFJzrlhzrkC59x259wE59wMM2st6SlJ3XeP+EmSmfU3s+lmlmtmy8zsX7tPZmaNzMyZ2WVmttTM1prZ34s8X8HMXjKzDWY2R1LXomHM7FYzWxAZTZ1jZmcVee7yyGj1Q2a2XtK/zOxwMxsdyfKtpKbFzufMrJmZHRn5HHbftpmZK3LclWaWFck13swaFnnuVDPLjoyYPybJovnCOufynHOzJQ2RlCPpT0XOOcDMvi8yitqhyOc/stjn8IiZ/S9y/+dpGWbW1Mw+MbN1ka/za2ZWvcjHLTazP5vZjEj24WZWvsjzAyMZciNf876Rx6uZ2fNmtsrMVpjZXWaWGsXnmy/pNUl1zSxzf+eKfF8mRrKtNbPhRbI5M2sWub/X73GRn7e0Io9F/TUq9nXuZmZTI6+z2swe3N/nDCC+UYQB7M88SQVm9rKZ9TOzGrufcM5lSbpO0leRP1VXjzy1VdKlkqpL6i/pejMbVOy8PSW1lNRb0u2RUi1J/1RQZJpK6iOp+HzXBZJ6SaqmYGT61WIjqcdIWiiplqS7JT0uaYekOpKujNx+xTm3MvI5VI6MXr4j6Q1JimT/m6SzJWVKmiRpWOS5mpLekvR/CkY8F0jqUdJr7I1zrkDSu5HPS2bWSdILkn4j6XBJT0sabWblIq97ugUj9YqUxvMkvV7CqU3SfyQdKam1pPqS/lXsmPMk9ZXUWFIHSZdHzttN0iuS/qLg+3i8pMWRj3lZUr6kZpI6SjpN0n7nRJtZhoKfi3WSNkRxrjslTZBUQ1I9BX+VKElU3+O9xdL+v0a7PSLpEedcVQU/nyMO4HUAxCGKMIB9cs7lKiitTtKzknIio2+19/ExnznnZjrnCp1zMxSUtxOKHXZHZHT5B0k/SDoq8vh5ku52zq13zi2T9L9i534zUloLnXPDJf0oqVuRQ1Y65x6NjD7uknSOpNudc1udc7MUFK99MrO/SmqlPYXqN5L+45zLipz335KOjowKny5pjnNupHMuT9LDkn7a32uUYKWCqRKSdI2kp51z30RG4V9WMBXlWOfcEknTJA2KHHuypG3Oua+Ln9A5N98596FzbqdzLkfSg/r19+F/ka/nekljJB0defwqSS9EPr7QObfCOZcd+b73k/T7yNd0jaSHJJ2/j8/tPAv+WrA98rmd65zLj+JceZIaSjrSObfDOferueiRfwgc8Pf4AL9Gu+VJamZmNZ1zW0r6mgNILBRhAPsVKYCXO+fqSWqnYPTs4b0db2bHmNmnZpZjZpsUjBrXLHZY0bK4TVLlyP0jJS0r8tySYue+tMiUgY2RPEXPXfRjMyWl7et8JWTvJ+lmSYOcc9sjDzeU9EiR11yvYCSxbvG8zjlX7PWiVTdy3t2v96fdrxd5zfqR15KC0d8LIvcvVMmjwTKzWmb2RmTKQa6kVxX996G+gtHt4hpKSpe0qki2pxWMwO/NiMhfC2pLmiWpc5TnukXB1/lbM5ttZiWN9B7w97ioKL9Gu12lYKpQtplNMbMB0b4OgPhEEQZwQJxz2ZJeUlBApWCkuLjXJY2WVN85V03BPOKo5s1KWqWghO3WYPedyAjss5JulHR4pFzNKnbuonlyFPzZvcTzFWdmLRWMJp4XGY3ebZmk3zjnqhe5VXDOTS6e18ys2Ovtl5mlSDpDwZSL3a93d7HXq+icGxZ5/k1JJ5pZPQUX25VYhBX8yd9J6hD5c/7Fiv77sEzF5lMXeXynpJpFslV1zrXd3wmdc2sVjK7/KzKdZZ/ncs795Jy7xjl3ZOTjntg9L7iI/X2Pt0beVizy2BFF7kf9NXLO/eicu0BBUb9X0kgzq7S/zxtA/KIIA9gnM2tlZn+KlC6ZWX0Fo5G7/yy8WlK9yPzP3apIWu+c2xGZa3rhAbzkCEm3mVmNyGv+rshzlRSUlpxIliu0p5D/SmTu7dsKildFM2ujX8853v15VlUwT/f/SvgT/FORTG0jx1Yzs8GR58ZKamtmZ0cuyLpJvyxae2Vm6ZG50cMiH7P74qtnJV0XGVk3M6tkwQWIVSKfV46kzyS9KGlRZK52SapI2iJpo5nVVTDfN1rPS7rCzHqbWYqZ1TWzVs65VQrm7T5gZlUjzzU1s71NJ/iFyD+kxku6ZX/nMrPBu3/uFMwpdpIKip1vn9/jyNdqhaSLzSw1MqpctOBH/TUys4vNLNM5VyhpY+Thgr0dDyD+UYQB7M9mBRegfWNmWxUU4Fnas8LBJ5JmS/rJzNZGHrtB0v8zs82SbteBXVR0h4I/bS9SUJKG7n7COTdH0gOSvlJQwNtL+nI/57tRwZ/7f1Iwkv3iXo7rpODivQetyOoRkdd9R8EI4BuRP5/PUjC3dfco52BJ9yi4CKx5FJmGRM69UcHI+TpJnZ1zKyPnnKpgLu1jCgrgfEUuYividUmnaO+jwVLwtewkaZOCwv72fnL9zDn3raQrFMzZ3SRpooKpDFJwwVuGpDmRfCMVXKgWrfslXWtmtfZzrq4Kfu62KPg63eycW1TC+fb3Pb5GQcFdJ6mtpMlFnjuQr1FfSbMjeR6RdL5zbkcUny+AOGXBdDYAAAAgXBgRBgAAQChRhAEAABBKFGEAAACEEkUYAAAAoUQRBgAAQCil+XrhmjVrukaNGvl6eQAAAITEd999t9Y5l1n8cW9FuFGjRpo6daqvlwcAAEBImFmJW68zNQIAAAChRBEGAABAKFGEAQAAEEoUYQAAAIQSRRgAAAChRBEGAABAKFGEAQAAEEoUYQAAAIQSRRgAAAChRBEGAABAKFGEAQAAEEoUYQAAAIRSVEXYzPqa2Vwzm29mt5bw/IlmtsnMvo/cbo99VAAAACB20vZ3gJmlSnpc0qmSlkuaYmajnXNzih06yTk3oBQyAgAAADEXzYhwN0nznXMLnXO7JL0haWDpxgIAAABKVzRFuK6kZUXeXx55rLjuZvaDmY0zs7YxSQcAAACUkv1OjZBkJTzmir0/TVJD59wWMztd0ihJzX91IrNrJV0rSQ0aNDiwpAAAAEAMRTMivFxS/SLv15O0sugBzrlc59yWyP33JaWbWc3iJ3LOPeOc6+Kc65KZmXkIsQEAAIBDE00RniKpuZk1NrMMSedLGl30ADM7wswscr9b5LzrYh0WAAAAiJX9To1wzuWb2Y2SxktKlfSCc262mV0Xef4pSedKut7M8iVtl3S+c6749AkAOGiNbh0bs3Mtvqd/zM4FAEhc0cwR3j3d4f1ijz1V5P5jkh6LbTQAAACg9LCzHAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEKJIgwAAIBQoggDAAAglCjCAAAACCWKMAAAAEIpzXcAANgn56S1a9V07TI5M+VUrqHN5Sr5TgUASAIUYQDxp6BAev996fXXpU8+kdas0cdFnl5arbYmNumst9r11vd1Wkhm3qICABJXVEXYzPpKekRSqqTnnHP37OW4rpK+ljTEOTcyZikBhINz0tix0l//Ks2ZI2VmSn37Sp066XefrJTJqW5ujo5eOVfnzPpYl0x/X9/Ua6t7TrxC0+u28p0eAJBg9luEzSxV0uOSTpW0XNIUMxvtnJtTwnH3ShpfGkEBJLmffpIuu0yaMEFq3lwaPlw66ywpPV2SNOansb84vNLObTp31se64es3NfK1W/T0MWfroZ4XKS813Ud6AEACiuZiuW6S5jvnFjrndkl6Q9LAEo77naS3JK2JYT4AYfDZZ1LHjtKkSdKjj0qzZ0vnnfdzCS7J1nIV9XLnM3Ty1U9pRPtTdMPXIzXqlT/pyFx+BQEAohPN1Ii6kpYVeX+5pGOKHmBmdSWdJelkSV33diIzu1bStZLUoEGDA80KIME0unXsfo85d+ZHunfc/7S4xpG6/oL7NW95I+kfE6J+ja3lKuq2fjfp42bH6MGxD+rtoX/Wpef9P83LbHTwwQEAoRDNiHBJV6G4Yu8/LOmvzrmCfZ3IOfeMc66Lc65LZmZmlBEBJKuLp43Vf99/WF82PEpnXvrgIZXXj5ofo8EX3StJevO1v6rT8qwYpQQAJKtoivBySfWLvF9P0spix3SR9IaZLZZ0rqQnzGxQLAICSE6XTx2tuz58Uh82O0bXnPMPbS1X8ZDPOTezkc65+L9aV7GaXhz5L7XMWXzoQQEASSuaIjxFUnMza2xmGZLOlzS66AHOucbOuUbOuUaSRkq6wTk3KtZhASSHvnO/1O0fP6sPWnTX9YNu0860jJide0W1WrpkyF3anl5OL4+4XXU3MWcYAFCy/RZh51y+pBsVrAaRJWmEc262mV1nZteVdkAAyaXTiiw9/N4Dmn5kS9084M/KT439cuYrqtXSZef9P1XM26mXR9yuyju3xfw1AACJL6otlp1z7zvnWjjnmjrn7o489pRz7qkSjr2cNYQBlKT25rV65u27tKrK4brmnH9oZ3q5UnutuZmNdO3Zf1ejDSt1//sPB2sUAwBQRFRFGAAOVWphgR4dfZ8q5O3U1efcrvUVq5X6a37doIPuOfFy9Zs3Wdd8+06pvx4AILFQhAGUiT9/PlTdls/RbX1v1ILD6+//A2Lkua5naWzLHrp14kvqsnx2mb0uACD+UYQBlLrjF36n678ZqdeO7qvRbU4s2xc30y39btbyarX04HsPqhLzhQEAERRhAKWq6o4tunfc/zTv8Ab6f72v9ZJha7mK+mP/P6pubo7+8clzXjIAAOIPRRhAqfrHx88pc+sG/an/H2K6TNqB+q5eGz19zNk6f8YEafTo/X8AACDpUYQBlJqT53+rwbM+0hPHDtbMOs19x9FDPS/SnFqNpeuukzZt8h0HAOAZRRhA6di8WXePf1xZmY30aI/zfaeRJOWlpuuvfW+SVq+W/vY333EAAJ5RhAGUjjvuUJ0t6/S3PjcqLzXdd5qfzazTXPrd76Qnn5S++sp3HACARxRhALE3Y4b08MN6/ag+ml63le80v3bnnVLdutK110p5eb7TAAA8oQgDiK3CQumGG6QaNXTfCZf5TlOyKlWkRx+VZs0KRoYBAKFEEQYQW8OHS19+Kd17rzZWqOo7zd4NHCj17i3961/SunW+0wAAPKAIA4idHTuk226Tjj5auvxy32n2zUx66KFg9Yh//ct3GgCABxRhALHz2GPSkiXSf/8rpSTAr5f27YOl1J58UprN9ssAEDYJ8H8qAAlh/Xrp7rulfv2CKQeJ4o47gjnDf/yj5JzvNACAMkQRBhAbd90l5eZK993nO8mBqVkzmBoxYYI0dqzvNACAMpTmOwCA+NLo1gMvgw02rNJHzz2qt9qdotteXSJpSeyDlaYbbgimR9xyi9S3r5TGr0YACANGhAEcsj9PGqr81FQ92Oti31EOTnq69J//SFlZ0tChvtMAAMoIRRjAIWmes0QDsibpxc5nKqfyYb7jHLxBg6Ru3aR//jNY/QIAkPQowgAOyc2T39DWjPJ6tttZvqMcGjPpnnukZcvYZAMAQoIiDOCgtchZrNOzv9BLnc+M780zonXSSdKppwarX+Tm+k4DAChlFGEAB+2mL4PR4Oe7DvQdJXb+/e9gp7kHHvCdBABQyijCAA5Ki5zFGjA3iUaDd+vSRRo8OCjCa9b4TgMAKEUUYQAH5eYvh2lzRgU913WQ7yixd+ed0vbt0v33+04CAChFFGEAB6xFzmL1n/ulXux8pjZVqOI7Tuy1bClddJH0+OOMCgNAEqMIAzhg133zlraml9cLyTQ3uLj/+z9p505GhQEgiVGEARyQupvW6Mw5E/XGUX2Sa25wcS1aMCoMAEmOIgzggFw1ZZScWXLODS6OUWEASGoUYQBRq749V+fPGK/RbU7QqqqZvuOUPkaFASCpUYQBRO2SaWNVMW+nnu52tu8oZYdRYQBIWhRhAFEpn7dDl383Rh837ap5mY18xyk7jAoDQNKiCAOIyuCZH+nw7bl66phzfEcpe4wKA0BSoggD2K+UwgJdPWWUvjuylabUa+s7TtkrOiqck+M7DQAgRijCAPar94Iparjxp2ClCDPfcfz429+kHTukRx7xnQQAECMUYQD7dcXU0VpeNVMTWnT3HcWfVq2kc86RHntM2rTJdxoAQAxQhAHsU6s1i3Tc0hka2qm/ClJSfcfx67bbghL85JO+kwAAYoAiDGCfrpg6WtvSy+mNDn18R/GvUyepb1/pwQelbdt8pwEAHCKKMIC9OmzbJg2a85nebnuyNlWo4jtOfPj734ML5p5/3ncSAMAhoggD2KsLvv9A5Qry9GLnM31HiR89e0q9egVLqe3a5TsNAOAQUIQBlCi9IE+XTB+rzxt11IKa9X3HiS9/+5u0bJn02mu+kwAADgFFGECJ+s2drCO2rNcLXRgN/pU+faSOHaV77pEKCnynAQAcJIowgBJdPH2sFlevo4lNOvuOEn/MglHhefOkt9/2nQYAcJAowgB+pWXOYnVbPkevHd1Pzvg1UaKzzw7WFr77bsk532kAAAeB/8MB+JWLpo/TztR0vdnhFN9R4ldKinTrrdIPP0jjxvlOAwA4CBRhAL9Qcdd2nTX7E73Xqqc2VqjqO058u/BCqUGDYFQYAJBwKMIAfmHQnM9UZdd2vdbxdN9R4l96uvSXv0iTJ0tffuk7DQDgAJnzNLetS5cuburUqV5eG8BeOKc5RzSVk6n/5Y8EF4Vhnxb/40SpYcNgfeFRo3zHAQCUwMy+c851Kf44I8IA9vj6a7VZs0ivdjydEhytSpWk3/5WevddKTvbdxoAwAGgCAPY48kntTmjgt5tc4LvJInlxhul8uWlBx7wnQQAcAAowgAC69dLI0bo7XYna1tGBd9pEktmpnTFFdIrr0irVvlOAwCIEkUYQOC116SdO/XGUX18J0lMf/yjlJ8vPfqo7yQAgChRhAEEG0I895zUubOyajXxnSYxNWsWbLLxxBPS5s2+0wAAokARBiB99500Y4Z09dW+kyS2W26RNm0K/lEBAIh7FGEA0vPPSxUqSBdc4DtJYuvaVTrhBOmhh6S8PN9pAAD7QREGwm7bNun116Vzz5WqVfOdJvHdcou0bJk0fLjvJACA/aAIA2E3cqSUmytddZXvJMmhXz+pbVvpvvuCudcAgLiV5jsAgEPX6NaxB/2xw1+/X7Vq1NFJ72+Wxh38eRBhFmy7fPnl0oQJUh9W4QCAeMWIMBBijdev0DHLZmlEh9PYSS6WLrhAqls3GBUGAMQtijAQYufN+FD5lqKR7Xr7jpJcMjKkm2+WPvlE+v5732kAAHtBEQZCKrWwQOfM+lifNu2qnMqH+Y6TfK6+WqpYUXrkEd9JAAB7QREGQuqkBVNVa+sGDe9wmu8oyalGjWDb5ddfl1av9p0GAFACijAQUkNmTNCaSjX0adMuvqMkr5tuknbtkp580ncSAEAJKMJACB22bZNOXDhV77Q9SQUpqb7jJK8WLaQBA4IivGOH7zQAgGIowkAInTlnotILC/RWu5N9R0l+v/+9tGaNNGyY7yQAgGIowkAInT37E82s3VTzMhv5jpL8Tj5Zat9eevhhNtgAgDhDEQZCpnnOEnX4ab7eZjS4bJgFo8IzZkiffuo7DQCgCHaWA0Lm7NmfKt9SNLr1Cb6jJIVodvUrl19DX1aspum/uU3XnHP7Xo9bfE//WEYDAOwHI8JAiKQUFmjQ7E/1WZPOWlepuu84obEzLUOvHX26es+fokbrV/iOAwCIoAgDIdJ96UzV2bJOb7OTXJl7tePpyk9J1eXfjfEdBQAQQREGQuTsWR8rt1wlfdysm+8ooZNTuYbGtDleg2d+pKo7tviOAwAQRRgIjYq7tqvfvMl6r1Uv7UzL8B0nlF7oMlCV8nZoyA8TfEcBAIgiDIRGv7mTVTFvp0YyLcKb2bWb6uv67XTZtDFKKSzwHQcAQo8iDITE2bM/1uLqdTStbivfUULtpc5nqF5ujk5eMNV3FAAIPYowEAJH5q5R9yUzg7WDzXzHCbUPmx+rnyofpkunvec7CgCEHkUYCIFBsz9TipzeaXuS7yihV5CSqteP7qfjF09XY5ZSAwCvoirCZtbXzOaa2Xwzu7WE5wea2Qwz+97MpppZz9hHBXCwzpwzUVPrttay6kf4jgJJw47qo7yUVF00/X3fUQAg1PZbhM0sVdLjkvpJaiPpAjNrU+ywjyUd5Zw7WtKVkp6LcU4AB6llzmK1WrtEo9qc6DsKInIqH6YPWhynwTM/Uvm8Hb7jAEBoRTMi3E3SfOfcQufcLklvSBpY9ADn3BbnnIu8W0mSE4C4cOacicq3FL3fij/UxJNXOvVXtZ1bNXDORN9RACC0oinCdSUtK/L+8shjv2BmZ5lZtqSxCkaFAfjmnAbOmagvGnXU+orVfKdBEVPqtVV2zYa6dNpYyTF2AAA+RFOES7rE/Fe/tZ1z7zjnWkkaJOnOEk9kdm1kDvHUnJycAwoK4MB1WpGterlr9G6bE3xHQXFmGtqpv9quWahOK7N9pwGAUIqmCC+XVL/I+/Ukrdzbwc65zyU1NbOaJTz3jHOui3OuS2Zm5gGHBXBgzsyaqB1pGZrQ/FjfUVCCd9qepNyMirpk2ljfUQAglKIpwlMkNTezxmaWIel8SaOLHmBmzcyCxUnNrJOkDEnrYh0WQPRSCws0IHuSPmraTVvLVfQdByXYllFBb7XvrdPnfqHDt270HQcAQme/Rdg5ly/pRknjJWVJGuGcm21m15nZdZHDzpE0y8y+V7DCxJAiF88B8KDH4u9Vc9smjWZaRFx79ejTVa4gX0NmTPAdBQBCJy2ag5xz70t6v9hjTxW5f6+ke2MbDcChODPrc+WWq6TPmnTxHQX7sKBmfU1u0EHn/zBeKiyUUtjnCADKCr9xgSRULm+n+sybrHEtjtOutHTfcbAfbxzVRw02rZY+/th3FAAIFYowkIROXjBFVXZtZ7WIBDG+RXdtKF9FevZZ31EAIFQowkASGpg1UWsq1dDXDdr7joIo7EzL0NvtTpZGjZJYWhIAygxFGEgyVXds0UkLpuq9Vr1UmJLqOw6iNOyoPlJenvTyy76jAEBoUISBJNNn3lcqV5DHtIgEM79mA+m446TnnmOnOQAoIxRhIMmcOWeiFlevox/qtPAdBQfqmmukuXOlSZN8JwGAUKAIA0kkc8sGHbd0hka3Pl6yknZHR1wbPFiqWpWL5gCgjFCEgSTSP3uSUl0hm2gkqkqVpIsukkaOlDZs8J0GAJIeRRhIIv2zv1BWZqNgvikS0zXXSDt2SK++6jsJACQ9ijCQJI7IXauuK+bovVa9fEfBoejYUercOZgewUVzAFCqKMJAkjh97peSpPdb9fScBIfsmmukmTOlb7/1nQQAkhpFGEgSp8/9QnNqNdaiw+r6joJDdcEFUoUK0osv+k4CAEktzXcAAIeuTm6OuqzI0n3HX+o7Cg5Bo1vH/nz/wSbH6pSXXlXXSqdpZ3q5AzrP4nv6xzoaACQlRoSBJPDztIiWPTwnQay81a63qu7cqlPnf+M7CgAkLYowkAT6Z0/S7FpNtJhpEUnjqwbttaJKps6d+bHvKACQtCjCQKJbulSdVs7VWC6SSyqFKal6u93J6rV4umptXuc7DgAkJYowkOhGjpQkinAServdyUp1hTprzqe+owBAUqIIA4luxAjNrN1US2oc6TsJYmzRYXU1tW7rYHoEawoDQMxRhIFEtmSJ9M03GssmGklrZLvear5umTr89KPvKACQdCjCQCJjWkTSG9u6l3akZXDRHACUAoowkMhGjJA6d9ay6kf4ToJSsrlcJY1v3l1nZk1URn6e7zgAkFQowkCiWrw42IL3vPN8J0EpG9m+t6rv2KLerCkMADFFEQYS1ZtvBm8HD/abA6Xuy4ZHaVXlw3XuLKZHAEAsUYSBRPXmm1KXLlLjxr6ToJQVpqTqnXYn6YSF3ylzywbfcQAgaVCEgUS0aJE0ZQrTIkLkrba9leYKNSD7c99RACBpUISBRMS0iNBZULO+ZtVuqoFzPvMdBQCSBkUYSEQjRkjdukmNGvlOgjI0qs0JOnrVj2q8foXvKACQFCjCQKJZuFD67jtGg0NoTOvjVSjToNmf+Y4CAEmBIgwkGqZFhNbqKjX1VcP2wfQItlwGgENGEQYSzYgR0jHHSA0b+k4CD0a1OVGNNq7S0avm+Y4CAAmPIgwkkvnzpWnTWC0ixD5o2UM7U9O5aA4AYoAiDCSS3dMizj3Xbw54s7lcJX3UrJvOyPpcaQX5vuMAQEKjCAOJ5M03pWOPlRo08J0EHr3b5kTV3LZJPRd/7zsKACQ0ijCQKH78UZo+nWkR0GdNumhTuUpMjwCAQ0QRBhIF0yIQsSstXWNb9dRpP36tCrt2+I4DAAmLIgwkihEjpO7dpfr1fSdBHHi3zYmqlLdDp87/2ncUAEhYFGEgEcybJ/3wA9Mi8LNv67fViiqZOmv2p76jAEDCoggDiYBpESjGWYrGtDlevRZNV41tm3zHAYCERBEGEsGIEVKPHlK9er6TII6MaX280lyh+s77yncUAEhIFGEg3s2dK82YwZbK+JXZtZpowWF1dUbW576jAEBCoggD8Y5pEdgbM73X6ngdu3SmMres950GABIORRiIdyNGSD17SnXr+k6CODSmdS+lyOn0uV/6jgIACYciDMSzrCxp5kxWi8Beza/ZQFmZjZgeAQAHIc13ACCsGt06dr/H3PTlMP1epmOzq2lNFMcjnMa0Pl63fP6Kjsxdo5VVa/mOAwAJgxFhII6dnv2FptRrozVVDvcdBXHsvVa9JEn9s77wnAQAEgtFGIhTzdYuVau1SzS2VU/fURDnltaoox+OaK4zspkeAQAHgiIMxKn+2V+oUKZxLXv4joIEMKZ1L3X4ab4abljpOwoAJAyKMBCn+md/oSn12yqn8mG+oyABjI1MjxiQNclzEgBIHBRhIA41z1miFuuWakyk3AD7s6pqpqbUbcPqEQBwACjCQBwakP2FCixF41sc5zsKEsiY1r3Uau0SadYs31EAICFQhIF445z6Z0/SN/XbKadyDd9pkEDGteypAkuRhg/3HQUAEgJFGIgzLdcuUbP1y1ktAgcsp3INfd2gXVCEnfMdBwDiHkUYiDP9syapwFL0AdMicBDGtDpe+vFHafp031EAIO5RhIF44pwGZE/SVw3aa12l6r7TIAF90PI4KS1NeuMN31EAIO5RhIE40mbNIjXZsPLnncKAA7WxQlXp1FOZHgEAUaAIA3Gkf/Yk5VuKxrfo7jsKEtmQIdLSpdI33/hOAgBxjSIMxAvn1D/7C01ueJQ2VKzmOw0S2aBBUkYGq0cAwH5QhIE40Xb1AjXauIppETh01apJfftKb74pFRb6TgMAcYsiDMSJAdlfKC8lVRNaHOs7CpLBkCHSihXSl1/6TgIAcYsiDMSDyCYaXzY8OrjYCThUZ5whlS/P9AgA2AeKMBAH2v80Xw02rWYTDcROlSpS//7SyJFSQYHvNAAQlyjCQBzonz1Ju1LSWC0CsXXeedLq1dLnn/tOAgBxiSIM+OacBmR/oUmNOyq3fGXfaZBM+veXKlZkegQA7AVFGPDs6FXzVC93DdMiEHuVKgVzhd96S8rP950GAOIORRjwrH/2JO1MTdNHzY7xHQXJaMgQae1a6ZNPfCcBgLhDEQY8Mleo07O/1OeNOzEtAqWjX7/gwjmmRwDAr1CEAY86rpyruptzNJZNNFBaypeXBg6U3nlH2rXLdxoAiCsUYcCj/tlfaGdqOtMiULrOO0/asEH66CPfSQAgrlCEAU9SCgvUP3uSJjbprC3lKvqOg2R22mnBtstMjwCAX6AIA54cs2y2jtiyXu+2PsF3FCS7cuWks86SRo2SduzwnQYA4gZFGPDkjKyJ2pJRQR836+o7CsJgyBApN1caP953EgCIGxRhwIddu3T63C/1YbNjtCO9vO80CIPevaXDDmN6BAAUQREGfJgwQdV3bNHoNkyLQBlJT5fOPlsaPVravt13GgCIC2m+AwChNGyY1leoqkmNOvpOgiTU6NaxJT7eY3MjvbZ1q6678E590LJHVOdafE//WEYDgLgS1YiwmfU1s7lmNt/Mbi3h+YvMbEbkNtnMjop9VCBJbN0qjRqlcS2PU34q/xZF2fm6QXutrVhNA7Im+Y4CAHFhv0XYzFIlPS6pn6Q2ki4wszbFDlsk6QTnXAdJd0p6JtZBgaQxZoy0bZtGs1oEylhBSqrGteyh3gumqOIupkcAQDQjwt0kzXfOLXTO7ZL0hqSBRQ9wzk12zm2IvPu1pHqxjQkkkWHDpLp19W39tr6TIITea9VLFfJ3qvf8b31HAQDvoinCdSUtK/L+8shje3OVpHGHEgpIWhs2SOPGSUOGyBnXqqLsTanXRqsrH6YB2UyPAIBo/k9sJTzmSjzQ7CQFRfive3n+WjObamZTc3Jyok8JJIu335by8qQLL/SdBCFVmJKq91v20IkLv1Plndt8xwEAr6Ipwssl1S/yfj1JK4sfZGYdJD0naaBzbl1JJ3LOPeOc6+Kc65KZmXkweYHE9vrrUvPmUqdOvpMgxN5r1UvlCvJ0yvxvfEcBAK+iKcJTJDU3s8ZmliHpfEmjix5gZg0kvS3pEufcvNjHBJLAqlXSp59KF1wgWUl/aAHKxrS6rbSySk0NyPrcdxQA8Gq/Rdg5ly/pRknjJWVJGuGcm21m15nZdZHDbpd0uKQnzOx7M5taaomBRDVihORcUIQBj5ylaGyrnjp+0XRV3bHFdxwA8Caqq3Wcc+8751o455o65+6OPPaUc+6pyP2rnXM1nHNHR25dSjM0kJCGDZM6dpRatfKdBNB7rXopozBffeZ95TsKAHjDZetAWVi4UPrmG0aDETd+qNNCy6rVZvUIAKFGEQbKwhtvBG+HDPGbA9jNTGNb9VSPxd+r+vZc32kAwAuKMFDanJNefVXq2VNq0MB3GuBnY1r1UporVN+5k31HAQAvKMJAaZs2TcrKki65xHcS4Bdm126qRTXqMD0CQGhRhIHSNnSolJEhDR7sOwnwS2Z6r9Xx6r50pmpu3eA7DQCUOYowUJry84PVIs44Q6pRw3ca4Ffea91LqUyPABBSFGGgNE2YIK1Zw7QIxK25NRvqx8Pr6wymRwAIIYowUJqGDpUOP1zq1893EqBkkdUjui6brVqb1/lOAwBliiIMlJbcXGnUqGDJtIwM32mAvRrT6nilyOn0uV/6jgIAZYoiDJSWkSOlHTuYFoG4t6BmfWVlNmL1CAChQxEGSsvQoVLz5tIxx/hOAuzXe616qcuKLNXJzfEdBQDKDEUYKA1Ll0qffSZdfLFk5jsNsF/vte4lSerPqDCAEKEIA6XhtdeCtxdf7DcHEKUlNY7UzNpNNSD7C99RAKDMUISBWHMumBbRo4fUpInvNEDUxrbqpaNXzVO9jT/5jgIAZYIiDMQaWyojQb3XqqckMSoMIDQowkCsvfxysFzaeef5TgIckOXVj9D3dVqwegSA0KAIA7G0c2cwP/iss9hSGQlpTKteard6gRqtX+E7CgCUOoowEEtjxkjr10tXXOE7CXBQxrbqpUKZzsz63HcUACh1FGEgll54QapXTzrlFN9JgIPyU9Wa+rZ+Ww2c81lw4ScAJDGKMBArK1ZI48dLl14qpab6TgMctHfanqSm61eo/U/zfUcBgFJFEQZiZehQqbCQaRFIeONa9tDO1DSdNftT31EAoFRRhIFYcC6YFtGrl9Ssme80wCHJLV9ZnzbtqjOyP5fy833HAYBSQxEGYmHyZOnHHxkNRtJ4p81Jyty6Ufr4Y99RAKDUUISBWHjxRalSJWnwYN9JgJj4rGkX5ZartGe7cABIQhRh4FBt3SoNHx5soFG5su80QEzsTMvQ2JY9pHfeCX7GASAJUYSBQzVypLRlC9MikHTebXti8LM9erTvKABQKijCwKF68cXgArmePX0nAWLqm/rtgnWxmR4BIElRhIFDsWCBNHFiMBps5jsNEFPOUqQLL5Q++EDKyfEdBwBijiIMHIrnn5dSUqTLLvOdBCgdF10kFRRII0b4TgIAMUcRBg5WXl6wdvCAAVLdur7TAKWjQwepfXumRwBIShRh4GCNGSOtXi1de63vJEDpuugi6auvgqlAAJBEKMLAwXrmmeBCor59fScBStcFFwRvX3/dbw4AiDGKMHAwFi2SJkyQrrpKSk31nQYoXQ0aSCecIL36arCdOAAkCYowcDCefz5YJeLKK30nAcrGRRdJ8+ZJU6f6TgIAMUMRBg5Ufn5wkVy/fsFIGRAGgwdL5cpJr7ziOwkAxAxFGDhQY8dKq1ZxkRzCpXp1adCgYJ7wzp2+0wBATFCEgQP1zDPSkUdKp5/uOwlQti6/XFq/PvjHIAAkAYowcCCWLpXGjQvmBqel+U4DlK1TT5Xq1JFeesl3EgCICYowcCCefz54e9VVfnMAPqSmSpdcIr3/frCGNgAkOIowEK38/KAI9+kjNWrkOw3gx2WXBVsus6YwgCRAEQaiNWaMtGKF9Jvf+E4C+NOmjdS1q/Tii6wpDCDhUYSBaD3+uFS/vjRggO8kgF+XXy7NnCl9/73vJABwSCjCQDSys6WPPw5Gg7lIDmF3/vlSRob08su+kwDAIaEIA9F48kkpPV26+mrfSQD/DjtMGjhQeu01adcu32kA4KBRhIH92bo1WC7q3HOl2rV9pwHiw2WXSWvXBitIAECCoggD+/Paa1JurvTb3/pOAsSPPn2CfxiypjCABEYRBvbFueAiuQ4dpOOO850GiB9pacGawmPHSmvW+E4DAAeFIgzsy+TJ0owZwWiwme80QHy58spgfe1XXvGdBAAOCkUY2JcnnpCqVpUuvNB3EiD+tG4t9eghPfccawoDSEgUYWBvVq+W3nwzWDO1cmXfaYD4dPXV0ty50hdf+E4CAAeMIgzszfPPS3l50vXX+04CxK/Bg4O/mjz7rO8kAHDA2BkAodDo1rEHdHxaQb4+f/ohLWx4lC5+aYGkBaUTDIhz0fy3c1eTHjp32HB1O6y/csvv/a8ni+/pH8toAHDIGBEGStBn3lc6cvNavdT5TN9RgLg37Kg+Kp+/SwPnfOY7CgAcEIowUIIrvhutxdXr6JOmXXxHAeLe7COaaVbtprrgh/FcNAcgoVCEgWI6rJqnLiuy9HLnASpMSfUdB0gIbxzVR23WLFL7n+b7jgIAUaMIA8VcMXW0NmdU0JvtT/UdBUgY77Y5QdvTygWjwgCQICjCQBGZW9arf/YXGtn+FG0pV9F3HCBhbC5XSWNb9dSZWRNVcdd233EAICoUYaCIi6e/r7TCAr3U+QzfUYCEM+yoPqq8a7v6Z0/yHQUAokIRBiLK5e/SRd+P0ydNu2hJjSN9xwESznd1W+vHw+vrwu+ZHgEgMVCEgYgzsj5XzW2b9GKXgb6jAInJTMOO6quOq+aq7WrW3gYQ/yjCgCQ5pyumjtbcmg30ZcOjfKcBEtbI9r21Pa2cLp52YJvYAIAPFGFAUrfls9V2zUK92PlMycx3HCBh5ZavrFFtTtCgORNVdccW33EAYJ8owoCkq6aM0obyVTSq7Ym+owAJb2inAaqQv1PnzvzYdxQA2CeKMEKv8foVOvXHb/RKp/7akV7edxwg4c2p3UTfHdlKF08fK3OFvuMAwF5RhBF6V00ZpbzUNA3t1N93FCBpvNKpv5psWKkei3/wHQUA9ooijFA7bNsmnTvrY73d9iStrVTDdxwgaYxr2VNrK1bTpdO5aA5A/KIII9QumTZW5fN36bmuZ/mOAiSVXWnpGt7hNPWe/62OzF3jOw4AlIgijNAql7dTl057Tx817aoFNev7jgMkndeP7idJuvD7DzwnAYCSUYQRWufM/kSHb8/Vs93O9h0FSEorqtXSJ027asgPE5SRn+c7DgD8CkUYoWSuUFd/+45+OKK5vqnfznccIGkN7Xi6MrdtVN95X/qOAgC/QhFGKJ0y/1s12bBSz3Y7iw00gFI0qXFHLaxxpK6YOsZ3FAD4FYowQumab9/W8qq1NK5lD99RgKTmLEUvdT5DHVfNlb76ynccAPgFijBCp+OKbHVbPkfPdx2ogpRU33GApDey/SnaVK6S9NBDvqMAwC9QhBE6138zUhvLV9bwDqf5jgKEwraMChp2VB/prbekJUt8xwGAn1GEESotchbrtB+/1kudz9C2jAq+4wCh8XLnM4L5+I8+6jsKAPwsqiJsZn3NbK6ZzTezW0t4vpWZfWVmO83sz7GPCcTGdd+8pa3p5fVS5zN8RwFCZVXVTOncc6Vnn5U2b/YdBwAkRVGEzSxV0uOS+klqI+kCM2tT7LD1km6S9N+YJwRipN7Gn3TmnIl6/ei+2lihqu84QPj84Q9Sbq704ou+kwCApOhGhLtJmu+cW+ic2yXpDUkDix7gnFvjnJsiiRXTEbd+8+3bKrQUPdd1kO8oQDgdc4zUvbv0yCNSQYHvNAAQVRGuK2lZkfeXRx47YGZ2rZlNNbOpOTk5B3MK4KBkbtmg82Z8qJHte2t1lZq+4wDh9Yc/SAsXSqNG+U4CAFEV4ZJ2G3AH82LOuWecc12cc10yMzMP5hTAQbly6rtKKyzQ08ec4zsKEG5nny01bSrde6/kDup/JQAQM9EU4eWS6hd5v56klaUTBygFGzfq4ulj9X7LHlpS40jfaYBwS02V/vIXacoU6dNPfacBEHLRFOEpkpqbWWMzy5B0vqTRpRsLiKHHH1eVXdv1RPfBvpMAkKTLLpNq15buucd3EgAht98i7JzLl3SjpPGSsiSNcM7NNrPrzOw6STKzI8xsuaQ/Svo/M1tuZlyWD/+2bpUeflifNOmirFpNfKcBIEnlywdzhT/8UJo2zXcaACEW1TrCzrn3nXMtnHNNnXN3Rx57yjn3VOT+T865es65qs656pH7uaUZHIjKk09Ka9fqse5DfCcBUNR110lVqwZzhQHAE3aWQ/LaulW67z7ptNM0rV5r32kAFFWtmnT99dLIkdL8+b7TAAgpijCS1xNPSDk50j//6TsJgJLcfLOUni7df7/vJABCiiKM5FRkNFjHHec7DYCS1KkjXXFFsNPcsmX7Px4AYowijOT0xBPS2rXSv/7lOwmAfbnttuDtf/7jNweAUKIII/nsHg3u0yfYzhVA/GrQQLrySum55xgVBlDmKMJIPrtHg5kbDCQGRoUBeEIRRnJhNBhIPA0bMioMwAuKMJILo8FAYto9KsxucwDKEEUYySM3N1icn9FgIPEwKgzAA4owkscDD0jr1kl33+07CYCDsXtU+I47/OYAEBoUYSSHNWuCInzeeVLnzr7TADgYDRtKN9wQrCs8Z47vNABCgCKM5HD33dKOHdKdd/pOAuBQ/P3vUqVKwVsAKGUUYSS+xYulJ5+UrrpKatHCdxoAh6JmTemvf5VGjZImT/adBkCSowgj8f3zn1JqqnT77b6TAIiF3/9eOuKIoBA75zsNgCRGEUZimzVLGjpUuukmqW5d32kAxEKlSsH26F98Ib33nu80AJIYRRiJ7c9/lqpVC0aOACSPK68Mpjr99a9SXp7vNACSFEUYiWvcOGn8+GBqxGGH+U4DIJbS04NdIrOygmsAAKAUUISRmPLypD/9SWrePFhuCUDyOfNM6bTTgvn/OTm+0wBIQhRhJKZnnglGiu6/X8rI8J0GQGkwkx5+WNq6Vfrb33ynAZCEKMJIPBs2BNMhTjopGDECkLxatw4uhn3+eWnqVN9pACQZijASz113SevXSw8+GIwYAUhut98u1aoVFOLCQt9pACQRijASS1aW9Oij0hVXSEcf7TsNgLJQrZp0zz3SV19Jr7ziOw2AJEIRRuJwTvrtb4M1Rv/zH99pAJSlSy+VjjsuuEh2zRrfaQAkCYowEsewYdKnnwYluFYt32kAlKWUFOm556QtW4IpEgAQAxRhJIZNm6Q//lHq2lW65hrfaQD40Lq19I9/SMOHS6NH+04DIAlQhJEY/vGP4M+hTz4ppab6TgPAl1tukdq3l66/PvgHMgAcAoow4t+0adLjjwcbZ3Tu7DsNAJ8yMoKl1H76ia3VARwyijDiW16edNVVUmZmsGwaAHTtGkyVevpp6YMPfKcBkMAowohv//mP9P330lNPSdWr+04DIF7ceafUrp102WXS6tW+0wBIUBRhxK8ffgj+Z3fhhdKgQb7TAIgn5csHK8nk5kqXX85GGwAOCkUY8SkvL9g047DDpP/9z3caAPGoXTvpgQeC6RGPPuo7DYAERBFGfLrnHmn69GBKxOGH+04DIF5df710xhnBahI//OA7DYAEQxFG/Pnuu2BKxPnnS2ed5TsNgHhmFqwicfjh0rnnShs2+E4EIIFQhBFfcnOlIUOk2rWlxx7znQZAIsjMlN58U1qyRLrgAqmgwHciAAmCIoz44Zx03XXSokXBRTBMiQAQrR49gn88jx8v/e1vvtMASBBpvgMAP3vppaAA33mn1LOn7zQAEs211wbXFtx3n9SxYzC9CgD2gRFhxIesLOnGG6WTT5Zuu813GgCJ6pFHgn9IX3ml9M03vtMAiHPmnPPywl26dHFTp0718tqIM5s2ScceK61bF2yeceSRkqRGt471mwtA3Fp8T/+9P7l6tXTcccHvlkmTpNatyy4YgLhkZt8557oUf5wRYfhVUBBc3DJ/vjRixM8lGAAOWu3a0oQJUlqa1KePtGyZ70QA4hRFGH7ddps0blywGP6JJ/pOAyBZNG0a/G7ZtCkow+vW+U4EIA5RhOHPK69I998v3XBDsFoEAMRSx47Su+9KCxcGZXj9et+JAMQZijD8+Pxz6ZprpJNOkh5+2HcaAMnqxBOlkSOlmTOD3zdr1vhOBCCOUIRR9qZNC7ZEbdIkWAQ/Pd13IgDJbMAA6b33pB9/lI4/XlqxwnciAHGCIoyyNW+e1LevVL16cDELm2YAKAunnhpstrFyZVCGFyzwnQhAHKAIo+wsWxb8z0iSPvxQql/fbx4A4dKrl/TRR9LGjVK3btLEib4TAfCMIoyysXSp1Lt38D+g8eOlFi18JwIQRt26BRtt1KolnXKK9PzzvhMB8IgijNI3f34wErNmTbCcUceOvhMBCLNmzaSvvgp2srz6aukPf5B27fKdCoAHab4DwL9Y7uD2q92eZs0KpkPk50uffkoJBhAfqleXxo6V/vQn6eGH9f3wsbrpjFu0tEadQzrtPne8AxB3GBFG6fnqK+mEE6SUlGC5NEowgHiSliY98oiuG3SbGq9fqbEv3aSBsz/1nQpAGaIIo3S89lqwZmeNGtKkSVLr1r4TAUCJPmjZQ/2ufFRZtRrrkfce0GPv3qvMLRt8xwJQBijCiK3CQunvf5cuvljq3j24KKVJE9+pAGCfVlatpQsu+I/u73WJTv3xK3303HU6//sPZK7QdzQApYgijJipumOLdM450r//HewaN3486wQDSBgFKal6/Lgh6nfFY8qq1Vj3jH9Mw1+/Ve1X/eg7GoBSQhFGTBy9cq7GvnRzsHvTQw9JTz8tZWT4jgUAB2zh4fV0/gX/0V/63aQm61dozCt/0COj71e9jT/5jgYgxlg1AofEXKGu/naUbvn8Za2ufHgwH/jYY33HAoBDY6Y3O5ymcS176jffvKWrp4xS33lfathRffXMMWdrZdVavhMCiAFGhHHQ6m1araHD/6G/f/aCPmp2jE6/4n+UYABJZUu5inrg+Et04rVP6+22J+ui78dp4tPX6L73H1aTdct9xwNwiBgRxgEzV6iLpo/TbZ+9KGem2/rcqGFH9ZHMfEcDgFKxukpN3dbvJj3a43xd8+07Ov+HCTp35sf6rElnDe3UXxMbd1JhSqrvmAAOEEUYB6Tp2mW668Mn1H3pTH3eqKNu6/s7rajGnwgBhMPKqrV0xym/0WPdh+jSaWN1/ozxenHkHVpetVYwILCojdS4se+YAKJEEUZUKu7arpsmv6GrpozStvTy+mvf32l4h9MYBQYQSusqVddDvS7So8cN0ak/fq1Lp4/VXyYNlZoMDZaOvOgiafBgqRYDBUA8M+eclxfu0qWLmzp1qpfXxi/ta4tlc4U6I2uSbvv0BdXZsk7D25+q+064TOsqVS+7gACQAOpuWqMvG66WXn9dmjlTSk2Vjj9eGjBA6t9fatHigAYP9vW7+UCx9TPCzsy+c851Kf44I8LYq+5LZui2z15Qh5/ma1btpvrtoFs1rS47xAFASVZUqyXdeoV0661BER42TBozRvrTn4Jbs2ZBIT75ZKlXr2DnTQBeUYTxKy1yFuvWz17SyQunakWVTP2h/x81qu2JcsYiIwAQlfbtg9u//y0tWSKNHRvcnn5aeuSRYGT4qKOkE04IRo2POUaqW9d3aiB0KML4WZN1y3XjV8M1cM5Ebc2ooH+feIVe7nyGdqaxMQYAHLSGDaUbbghuO3ZI334rffaZNHHinmIsSUceKXXrJnXtKnXrpqo7tii3fGWv0YFkRxGGmq5bphsnD9eZWZ9rV2q6nus6SE8ee642VqjqOxoAJJfy5YMR4OOPD97fuVOaNk2aMiUoyFOmSKNGSZJmSFpetZayajXWnFqNlRW5La1+BH+hA2KEIhxm2dnSnXfqw9eHaUd6hp7tOkjPdjubC+EAoKyUKxesMtG9+57HNmyQpk7VfXe9qtZrFqn1mkU6ecEUpbpCSdKWjAqaW7Phz8U4q1ZjZWc20raMCp4+CSBxUYTD6Ouvpf/+V3r7balCBT1zzNl6tutZFGAAiAc1akinnqonPt7180Pl83aoxdqlPxfj1msW6cw5E3Xx9+MkSYUyLa5RR7NrN9Xs2k01q3ZTza7dRBsqVvP1WQAJgSIcFoWFwdXL//2v9MUXUvXqwZXNf/iD7nngW9/pAAD7sCO9vGbUaaEZdVrsedA51ctd83Mxbrt6gTqunKszsif9fMiKKpmaU7uJVGGq1LGj1KlTcFEea8ADkijCyW/bNunVV6UHHpDmzQsu2nj4Yemqq6TKXIQBAAnLTMur1dbyarX1YfNjf3642vbNart6gdquXqh2qxeo7eoF0h13SLv3DahZMyjEHTtKnTsH95s0oRwjlCjCySo7W3rqKenll6WNG4Nfdm+8IZ1zjpTGtx0AktWmClU0udHRmtzo6J8fW/x/J0gzZkjTpwcX502bJj34oJSXFxxQrVpQiIveWrSQUrgoD8mNneWSya5dwdXGTz4ZLM2Tnh4U3+uvDxZv38u/9mO5exEAIDFk5Oep+dolav/TfLVbvUDtVi9Q6zWLVK4gKMdbMipoTq3GkTnHzTTziKaa8PRvYjaYEq8758VrLhwadpZLVs5JP/wQTH949VVp9epg+sO//y1deaVUu7bvhACAOLQrLV2zj2im2Uc0+/mxtIJ8NVu37OcpFe1+WqAhMyboirwxwQGv/1nq0EFq00Zq3XrP20aNgi2lgQRDEU5Uy5cH+9kPHSrNmhX8C/3006Xf/Ebq04dfSACAA5afmqbsWo2VXauxRrY/RZKUUligxutXqt3q+XqkhQumV3zwgfTSS3s+sHz5YCpF69bBfONGjfbcGjQIngfiEEU4kWRnB1MfRo2SvvkmeKx7d+nxx6XzzgsugAAAIIYKU1K1oGZ9LahZX48U/VP/hg3B/5eysoLbnDnBhiBvvSXl5//yJEccEZTiunWD+0ccoSE/rNHaStWVU6mGcirV0PqK1djJFGWOIhzPtm6VJk2SPv44WPps7tzg8S5dpLvukoYMkZo12/c5AAAoDTVq/HozEEkqKJBWrpQWL/7lbcmSoDB/+qm0fr3uLeGUO9IytLF8ZW0sX0WbylfWpgpVtLF8ZW2KPJZbvpK2ZlTQ1vQK2ppRQdsyymtrRgVp0aJgJaTKlYPRZ1bAQJQowvEkN1eaOnVP+f366+CK3vT0YDvO3/1OOvNMqX5930kBAChZamrw/6n69YMLtUuyc6e6/2GYMrduUObWDaq1ZYNqbM9VtR1bVG3HFlXfsVnVdmxR/Y0/qV3ksUp5O/b+mi8UuZ+SIlWoIGVkBLf09D33i97S00sszMMWrpMkOZVcpgssRc5MhZaigpQUFUbuB7fgfl5qmnaklZN2fChVrBjcKlQI3lauHPwj4rDDfvk2g9FwH6IqwmbWV9IjklIlPeecu6fY8xZ5/nRJ2yRd7pybFuOsySUnJ/gz0qxZe/aYz84OLn4zC5au+f3vpd69pZ49pUqVfCcGACA2ypXTqqqZWlU1M+oPSS/IU7UdW1Rx1w5VytsevN21XRXzduipQS2lzZulLVuCtzt3BispFb3l5f36sRJWzkopLNxrBpNThnNKcYVKKf62cM/9jII8lc/fJS2aLG3fvmeZun2pVGlPKa5ZU8rM3PfbmjWDMo9Dst8ibGapkh6XdKqk5ZKmmNlo59ycIof1k9Q8cjtG0pORt+G1fXtwQduyZXtuS5bsmU+1bt2eY2vXlrp1ky64IHjbtWvwHwMAAJAk5aWma22lGlJJ40KXxW6ZsiGlsXxaXl7QC7ZtC4r6hg3Bbf36X79dv15auza4KDEnJ3h8b6pV239hLlqcq1Zl2kgx0YwId5M03zm3UJLM7A1JAyUVLcIDJb3igkWJvzaz6mZWxzm3KuaJD4VzwQ9iQUFwy8/fc7+kx4r+4O6+FX1/69Zgs4p164Lb+vV77hcturtlZkotW0pnn71nyZm2bdnuEgCAZJaeHtyqVg0uFjwQ+flBp1i7NijGe3u7bFmwUUpOTjDavbccxUtytWp7pm/s7bZ7qklaWnBLT//l26L3U1ODTrO3W5zN4Y6mCNeVtKzI+8v169Heko6pKym+ivCyZcEau7FUuXIwenv44cGtfv3gbd26e+ZI1a8v1avH8jEAAODApKUFfzmOdl8A54KBun2V5t1vp00LRqi3bg0G+AoKSvdzkaSlS+PqWqdoinBJtb34pJpojpGZXSvp2si7W8xsbhSvH9+2bAluS5f6TpKMakpa6zsE4h4/J4gWPyuHyEpa6iEOxDhXzH5O4vXr5VWDBr5eucSR0GiK8HJJRat7PUkrD+IYOeeekfRMFK8JyMymlrQdIlAUPyeIFj8riAY/J+GSEsUxUyQ1N7PGZpYh6XxJo4sdM1rSpRY4VtKmuJsfDAAAABSx3xFh51y+md0oabyC5dNecM7NNrPrIs8/Jel9BUunzVewfNoVpRcZAAAAOHRRrSPsnHtfQdkt+thTRe47Sb+NbTSAaTSICj8niBY/K4gGPychYq6ExaQBAACAZBfNHGEAAAAg6VCEEbfM7H4zyzazGWb2jplV950J8cXM+prZXDObb2a3+s6D+GNm9c3sUzPLMrPZZnaz70yIb2aWambTzew931lQ+ijCiGcfSmrnnOsgaZ6k2zznQRwpsv17P0ltJF1gZm38pkIcypf0J+dca0nHSvotPyfYj5slZfkOgbJBEUbccs5NcM7lR979WsH61MBuP2//7pzbJWn39u/Az5xzq5xz0yL3NysoOHX9pkK8MrN6kvpLes53FpQNijASxZWSxvkOgbiyt63dgRKZWSNJHSV94zkK4tfDkm6RVOg5B8pIVMunAaXFzD6SdEQJT/3dOfdu5Ji/K/jz5mtlmQ1xL6qt3QFJMrPKkt6S9HvnXK7vPIg/ZjZA0hrn3HdmdqLnOCgjFGF45Zw7ZV/Pm9llkgZI6u1Y6w+/FNXW7oCZpSsowa855972nQdxq4ekM83sdEnlJVU1s1edcxd7zoVSxDrCiFtm1lfSg5JOcM7l+M6D+GJmaQououwtaYWC7eAvdM7N9hoMccXMTNLLktY7537vOQ4SRGRE+M/OuQGeo6CUMUcY8ewxSVUkfWhm35vZU/v7AIRH5ELK3du/Z0kaQQlGCXpIukTSyZHfI99HRvwAgBFhAAAAhBMjwgAAAAglijAAAABCiSIMAACAUKIIAwAAIJQowgAAAAglijAAAABCiSIMAACAUKIIAwAAIJT+Px4KLSLNnYloAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111, title=\"Standardized Deviance Residuals\")\n",
    "ax.hist(resid_std, bins=25, density=True);\n",
    "ax.plot(kde_resid.support, kde_resid.density, 'r');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### QQ-plot of deviance residuals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-02T06:51:30.886107Z",
     "iopub.status.busy": "2021-02-02T06:51:30.885428Z",
     "iopub.status.idle": "2021-02-02T06:51:31.082146Z",
     "shell.execute_reply": "2021-02-02T06:51:31.082542Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(12,8))\n",
    "ax = fig.add_subplot(111)\n",
    "fig = sm.graphics.qqplot(resid, line='r', ax=ax)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
