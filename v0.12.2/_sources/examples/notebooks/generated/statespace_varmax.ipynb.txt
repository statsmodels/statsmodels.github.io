{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# VARMAX models\n",
    "\n",
    "This is a brief introduction notebook to VARMAX models in statsmodels. The VARMAX model is generically specified as:\n",
    "$$\n",
    "y_t = \\nu + A_1 y_{t-1} + \\dots + A_p y_{t-p} + B x_t + \\epsilon_t +\n",
    "M_1 \\epsilon_{t-1} + \\dots M_q \\epsilon_{t-q}\n",
    "$$\n",
    "\n",
    "where $y_t$ is a $\\text{k_endog} \\times 1$ vector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2021-02-02T06:54:15.503767Z",
     "iopub.status.busy": "2021-02-02T06:54:15.502827Z",
     "iopub.status.idle": "2021-02-02T06:54:15.953520Z",
     "shell.execute_reply": "2021-02-02T06:54:15.954741Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2021-02-02T06:54:15.959803Z",
     "iopub.status.busy": "2021-02-02T06:54:15.958280Z",
     "iopub.status.idle": "2021-02-02T06:54:16.996561Z",
     "shell.execute_reply": "2021-02-02T06:54:16.997981Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2021-02-02T06:54:17.003615Z",
     "iopub.status.busy": "2021-02-02T06:54:17.002039Z",
     "iopub.status.idle": "2021-02-02T06:54:17.212620Z",
     "shell.execute_reply": "2021-02-02T06:54:17.212980Z"
    }
   },
   "outputs": [],
   "source": [
    "dta = sm.datasets.webuse('lutkepohl2', 'https://www.stata-press.com/data/r12/')\n",
    "dta.index = dta.qtr\n",
    "dta.index.freq = dta.index.inferred_freq\n",
    "endog = dta.loc['1960-04-01':'1978-10-01', ['dln_inv', 'dln_inc', 'dln_consump']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model specification\n",
    "\n",
    "The `VARMAX` class in statsmodels allows estimation of VAR, VMA, and VARMA models (through the `order` argument), optionally with a constant term (via the `trend` argument). Exogenous regressors may also be included (as usual in statsmodels, by the `exog` argument), and in this way a time trend may be added. Finally, the class allows measurement error (via the `measurement_error` argument) and allows specifying either a diagonal or unstructured innovation covariance matrix (via the `error_cov_type` argument)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example 1: VAR\n",
    "\n",
    "Below is a simple VARX(2) model in two endogenous variables and an exogenous series, but no constant term. Notice that we needed to allow for more iterations than the default (which is `maxiter=50`) in order for the likelihood estimation to converge. This is not unusual in VAR models which have to estimate a large number of parameters, often on a relatively small number of time series: this model, for example, estimates 27 parameters off of 75 observations of 3 variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2021-02-02T06:54:17.238702Z",
     "iopub.status.busy": "2021-02-02T06:54:17.237742Z",
     "iopub.status.idle": "2021-02-02T06:54:22.721118Z",
     "shell.execute_reply": "2021-02-02T06:54:22.720718Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Statespace Model Results                             \n",
      "==================================================================================\n",
      "Dep. Variable:     ['dln_inv', 'dln_inc']   No. Observations:                   75\n",
      "Model:                            VARX(2)   Log Likelihood                 361.038\n",
      "Date:                    Tue, 02 Feb 2021   AIC                           -696.076\n",
      "Time:                            06:54:22   BIC                           -665.949\n",
      "Sample:                        04-01-1960   HQIC                          -684.046\n",
      "                             - 10-01-1978                                         \n",
      "Covariance Type:                      opg                                         \n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):            0.04, 10.15   Jarque-Bera (JB):          11.23, 2.37\n",
      "Prob(Q):                        0.84, 0.00   Prob(JB):                   0.00, 0.31\n",
      "Heteroskedasticity (H):         0.45, 0.40   Skew:                      0.15, -0.38\n",
      "Prob(H) (two-sided):            0.05, 0.03   Kurtosis:                   4.87, 3.43\n",
      "                            Results for equation dln_inv                            \n",
      "====================================================================================\n",
      "                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "L1.dln_inv          -0.2412      0.093     -2.593      0.010      -0.423      -0.059\n",
      "L1.dln_inc           0.2947      0.449      0.657      0.511      -0.585       1.174\n",
      "L2.dln_inv          -0.1648      0.155     -1.061      0.288      -0.469       0.139\n",
      "L2.dln_inc           0.0825      0.422      0.195      0.845      -0.745       0.910\n",
      "beta.dln_consump     0.9479      0.640      1.482      0.138      -0.306       2.201\n",
      "                            Results for equation dln_inc                            \n",
      "====================================================================================\n",
      "                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "L1.dln_inv           0.0633      0.036      1.768      0.077      -0.007       0.133\n",
      "L1.dln_inc           0.0841      0.107      0.783      0.434      -0.126       0.295\n",
      "L2.dln_inv           0.0097      0.033      0.296      0.768      -0.055       0.074\n",
      "L2.dln_inc           0.0339      0.134      0.253      0.801      -0.229       0.297\n",
      "beta.dln_consump     0.7711      0.112      6.872      0.000       0.551       0.991\n",
      "                                  Error covariance matrix                                   \n",
      "============================================================================================\n",
      "                               coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "sqrt.var.dln_inv             0.0434      0.004     12.289      0.000       0.036       0.050\n",
      "sqrt.cov.dln_inv.dln_inc  4.755e-05      0.002      0.024      0.981      -0.004       0.004\n",
      "sqrt.var.dln_inc             0.0109      0.001     11.220      0.000       0.009       0.013\n",
      "============================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "exog = endog['dln_consump']\n",
    "mod = sm.tsa.VARMAX(endog[['dln_inv', 'dln_inc']], order=(2,0), trend='n', exog=exog)\n",
    "res = mod.fit(maxiter=1000, disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the estimated VAR model, we can plot the impulse response functions of the endogenous variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2021-02-02T06:54:22.726343Z",
     "iopub.status.busy": "2021-02-02T06:54:22.725098Z",
     "iopub.status.idle": "2021-02-02T06:54:22.942023Z",
     "shell.execute_reply": "2021-02-02T06:54:22.942389Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 0, 't'), Text(0.5, 1.0, 'Responses to a shock to `dln_inv`')]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = res.impulse_responses(10, orthogonalized=True).plot(figsize=(13,3))\n",
    "ax.set(xlabel='t', title='Responses to a shock to `dln_inv`');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example 2: VMA\n",
    "\n",
    "A vector moving average model can also be formulated. Below we show a VMA(2) on the same data, but where the innovations to the process are uncorrelated. In this example we leave out the exogenous regressor but now include the constant term."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2021-02-02T06:54:22.952215Z",
     "iopub.status.busy": "2021-02-02T06:54:22.951314Z",
     "iopub.status.idle": "2021-02-02T06:54:27.408822Z",
     "shell.execute_reply": "2021-02-02T06:54:27.409755Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Statespace Model Results                             \n",
      "==================================================================================\n",
      "Dep. Variable:     ['dln_inv', 'dln_inc']   No. Observations:                   75\n",
      "Model:                             VMA(2)   Log Likelihood                 353.886\n",
      "                              + intercept   AIC                           -683.771\n",
      "Date:                    Tue, 02 Feb 2021   BIC                           -655.961\n",
      "Time:                            06:54:27   HQIC                          -672.667\n",
      "Sample:                        04-01-1960                                         \n",
      "                             - 10-01-1978                                         \n",
      "Covariance Type:                      opg                                         \n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):             0.01, 0.07   Jarque-Bera (JB):         12.35, 12.99\n",
      "Prob(Q):                        0.93, 0.78   Prob(JB):                   0.00, 0.00\n",
      "Heteroskedasticity (H):         0.44, 0.81   Skew:                      0.05, -0.48\n",
      "Prob(H) (two-sided):            0.04, 0.60   Kurtosis:                   4.99, 4.80\n",
      "                           Results for equation dln_inv                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0182      0.005      3.824      0.000       0.009       0.028\n",
      "L1.e(dln_inv)    -0.2620      0.106     -2.481      0.013      -0.469      -0.055\n",
      "L1.e(dln_inc)     0.5405      0.633      0.854      0.393      -0.700       1.781\n",
      "L2.e(dln_inv)     0.0298      0.148      0.201      0.841      -0.261       0.320\n",
      "L2.e(dln_inc)     0.1630      0.477      0.341      0.733      -0.773       1.099\n",
      "                           Results for equation dln_inc                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0207      0.002     13.123      0.000       0.018       0.024\n",
      "L1.e(dln_inv)     0.0489      0.041      1.178      0.239      -0.032       0.130\n",
      "L1.e(dln_inc)    -0.0806      0.139     -0.580      0.562      -0.353       0.192\n",
      "L2.e(dln_inv)     0.0174      0.042      0.410      0.682      -0.066       0.101\n",
      "L2.e(dln_inc)     0.1278      0.152      0.842      0.400      -0.170       0.425\n",
      "                             Error covariance matrix                              \n",
      "==================================================================================\n",
      "                     coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "sigma2.dln_inv     0.0020      0.000      7.344      0.000       0.001       0.003\n",
      "sigma2.dln_inc     0.0001   2.32e-05      5.834      0.000    9.01e-05       0.000\n",
      "==================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/build/statsmodels/statsmodels/statsmodels/base/model.py:568: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "mod = sm.tsa.VARMAX(endog[['dln_inv', 'dln_inc']], order=(0,2), error_cov_type='diagonal')\n",
    "res = mod.fit(maxiter=1000, disp=False)\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Caution: VARMA(p,q) specifications\n",
    "\n",
    "Although the model allows estimating VARMA(p,q) specifications, these models are not identified without additional restrictions on the representation matrices, which are not built-in. For this reason, it is recommended that the user proceed with error (and indeed a warning is issued when these models are specified). Nonetheless, they may in some circumstances provide useful information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2021-02-02T06:54:27.413910Z",
     "iopub.status.busy": "2021-02-02T06:54:27.412688Z",
     "iopub.status.idle": "2021-02-02T06:54:29.526812Z",
     "shell.execute_reply": "2021-02-02T06:54:29.527707Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/build/statsmodels/statsmodels/statsmodels/tsa/statespace/varmax.py:163: EstimationWarning: Estimation of VARMA(p,q) models is not generically robust, due especially to identification issues.\n",
      "  EstimationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                             Statespace Model Results                             \n",
      "==================================================================================\n",
      "Dep. Variable:     ['dln_inv', 'dln_inc']   No. Observations:                   75\n",
      "Model:                         VARMA(1,1)   Log Likelihood                 354.287\n",
      "                              + intercept   AIC                           -682.575\n",
      "Date:                    Tue, 02 Feb 2021   BIC                           -652.448\n",
      "Time:                            06:54:29   HQIC                          -670.545\n",
      "Sample:                        04-01-1960                                         \n",
      "                             - 10-01-1978                                         \n",
      "Covariance Type:                      opg                                         \n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):             0.01, 0.06   Jarque-Bera (JB):         11.05, 14.18\n",
      "Prob(Q):                        0.94, 0.81   Prob(JB):                   0.00, 0.00\n",
      "Heteroskedasticity (H):         0.43, 0.91   Skew:                      0.01, -0.46\n",
      "Prob(H) (two-sided):            0.04, 0.81   Kurtosis:                   4.88, 4.92\n",
      "                           Results for equation dln_inv                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0105      0.066      0.160      0.873      -0.118       0.139\n",
      "L1.dln_inv       -0.0061      0.697     -0.009      0.993      -1.372       1.359\n",
      "L1.dln_inc        0.3804      2.768      0.137      0.891      -5.044       5.805\n",
      "L1.e(dln_inv)    -0.2487      0.707     -0.352      0.725      -1.635       1.138\n",
      "L1.e(dln_inc)     0.1253      3.017      0.042      0.967      -5.788       6.038\n",
      "                           Results for equation dln_inc                          \n",
      "=================================================================================\n",
      "                    coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------\n",
      "intercept         0.0165      0.027      0.601      0.548      -0.037       0.070\n",
      "L1.dln_inv       -0.0336      0.278     -0.121      0.904      -0.579       0.512\n",
      "L1.dln_inc        0.2349      1.117      0.210      0.833      -1.955       2.425\n",
      "L1.e(dln_inv)     0.0888      0.285      0.312      0.755      -0.470       0.647\n",
      "L1.e(dln_inc)    -0.2376      1.152     -0.206      0.837      -2.495       2.020\n",
      "                                  Error covariance matrix                                   \n",
      "============================================================================================\n",
      "                               coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "sqrt.var.dln_inv             0.0449      0.003     14.533      0.000       0.039       0.051\n",
      "sqrt.cov.dln_inv.dln_inc     0.0017      0.003      0.649      0.516      -0.003       0.007\n",
      "sqrt.var.dln_inc             0.0116      0.001     11.717      0.000       0.010       0.013\n",
      "============================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "mod = sm.tsa.VARMAX(endog[['dln_inv', 'dln_inc']], order=(1,1))\n",
    "res = mod.fit(maxiter=1000, disp=False)\n",
    "print(res.summary())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
